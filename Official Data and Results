---
title: "CountyDistances"
output: html_document
date: "2024-02-09"
---



### Importing County Distance dataset

```{r}
library(readxl)
library(dplyr)
library(readr)



countyDistancescsv <- read_csv("countyDistances.csv")



```


### Importing Official Hurricane Data

```{r}
official_hurr_data <- read_excel("official_hurr_data.xlsx")

## FEB14 update on hurr_data - put all NAs as 0, and make it so that if DAMAGE = 0 or CROPS = 0, do not count county as hit 

official_hurr_data$DAMAGE_PROPERTY_NUM[is.na(official_hurr_data$DAMAGE_PROPERTY_NUM)] <- 0
official_hurr_data$DAMAGE_CROPS_NUM[is.na(official_hurr_data$DAMAGE_CROPS_NUM)] <- 0


# create a new variable for each hurricane that shows how many years since and how many years away from the next hurricane hit 


# possible hurricanes to focus on 


# hurricane Gustav (2008) - 38 counties hit - Louisiana and Mississippi
# hurricane Humberto (2007) - 49 counties hit - Texas and Georgia
# hurricane Irma (2017) - 14 counties hit - Florida
# hurricane Isaac (2012) - 20 counties hit - Louisiana
# hurricane isabel (2003) - 63 counties hit
# hurricane Michael (2018) - 31 counties hit - Georgia and FL


# Using square bracket indexing
irma_subset <- official_hurr_data[official_hurr_data$HURR_NAME == "Hurricane Irma", ]

# drop row if PROPERTY and CROPS damage are both 0
irma_subset <- subset(irma_subset, !(DAMAGE_PROPERTY_NUM == 0 & DAMAGE_CROPS_NUM == 0))

# go in the countyDistance and create a column that has a 1 if the county got hit by IRMA

# Define the FIPS codes for Hurricane Irma
irma_fips <- c(12103, 12055, 12071, 12021, 12105, 12081, 12015, 12057, 12115, 12101, 12049, 12086, 12087)


# Create a new column "Irma" with values based on FIPS codes - and if damage was 0 for both property and crops, don't count it as a hit county

countyDistancescsv$Irma <- ifelse(countyDistancescsv$FIPS %in% irma_fips, 1, 0)

# Reorder the columns to have "Irma" as the second column
countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "Irma"), 2:(ncol(countyDistancescsv)-1))]


# Assuming 'countyDistancescsv' is your dataset
countyDistancescsv$within100_irma <- apply(countyDistancescsv[, paste0("di", irma_fips)], 1, function(row) {
  if (any(row < 100)) {
    return(1)
  } else {
    return(0)
  }
})


countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "within100_irma"), 2:(ncol(countyDistancescsv)-1))]

Irma_counties <- subset(countyDistancescsv, within100_irma == 1)


Irma_counties <- Irma_counties %>% 
  select("FIPS", "within100_irma", "Irma")

#write_csv(Irma_counties, "Irma_counties.csv")


# Joining hurr data

## importing joined_data_1 from Hurr_data_cleaning R project - all hurricane data by FIPS

joined_data_1 <- read_excel("joined_data_1 (1).xlsx")


# filter out all hurricanes IRMA

joined_data__irma <- joined_data_1 %>%
  filter(HURR_NAME == "Hurricane Irma")
  
irma_data <- left_join(Irma_counties, joined_data__irma, by = "FIPS")
```

## Importing DATASET2 dataset with all data from all counties in all years

```{r}
DATASET2 <- read_excel("DATASET2.xlsx")


# we don't need normalized columns - deselecting them

DATASET2 <- DATASET2 %>% 
  select(!"Years_from_hurr":"Column2")

DATASET2 <- DATASET2 %>% 
  select(!"County.y":"EPISODE_NARRATIVE")


DATASET2$Average_HomeValue <- as.numeric(DATASET2$Average_HomeValue)
DATASET2$HRCN_EVNTS <- as.numeric(DATASET2$HRCN_EVNTS)
DATASET2$HRCN_AFREQ <- as.numeric(DATASET2$HRCN_AFREQ)
DATASET2$HRCN_EXPT <- as.numeric(DATASET2$HRCN_EXPT)
DATASET2$HRCN_HLRP <- as.numeric(DATASET2$HRCN_HLRP)
DATASET2$HRCN_HLRA <- as.numeric(DATASET2$HRCN_HLRA)
DATASET2$HRCN_EALT <- as.numeric(DATASET2$HRCN_EALT)
DATASET2$HRCN_ALR_NPCTL <- as.numeric(DATASET2$HRCN_ALR_NPCTL)
DATASET2$HRCN_RISKS <- as.numeric(DATASET2$HRCN_RISKS)
```

### Hurricane Irma

```{r}
## inner joining the two datasets together


FINAL_DATA_irma <- inner_join(DATASET2, irma_data, by = "FIPS")

FINAL_DATA_irma$FIPS <- as.character(FINAL_DATA_irma$FIPS)

```



```{r}
# adding hurricane_hit dummy where it's 0 until 2017, then turn into 1 if Irma == 1

FINAL_DATA_irma <- FINAL_DATA_irma %>%
  mutate(hurr_hit = ifelse(Irma == 1 & Year >= 2017, 1, 0))

FINAL_DATA_irma$Income <- as.numeric(FINAL_DATA_irma$Income)
FINAL_DATA_irma$Population <- as.numeric(FINAL_DATA_irma$Population)


# adding leads and lags

FINAL_DATA_irma <- FINAL_DATA_irma %>%
  mutate(
    lead4 = ifelse(Year == 2013, 1, 0),
    lead3 = ifelse(Year == 2014, 1, 0),
    lead2 = ifelse(Year == 2015, 1, 0),
    lead1 = ifelse(Year == 2016, 1, 0),
    lag0 = ifelse(Year == 2017, 1, 0),
    lag1 = ifelse(Year == 2018, 1, 0),
    lag2 = ifelse(Year == 2019, 1, 0),
    lag3 = ifelse(Year == 2020, 1, 0),
    lag4 = ifelse(Year == 2021, 1, 0),
    lag5 = ifelse(Year == 2022, 1, 0)
  )


FINAL_DATA_irma$DAMAGE_PROPERTY_NUM[is.na(FINAL_DATA_irma$DAMAGE_PROPERTY_NUM)] <- 0
FINAL_DATA_irma$DAMAGE_CROPS_NUM[is.na(FINAL_DATA_irma$DAMAGE_CROPS_NUM)] <- 0

hurr_damage_treshold <- 645000

# Create a new column indicating heavily hit or not
FINAL_DATA_irma$impact <- ifelse(FINAL_DATA_irma$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "Heavily Hit", "Not Heavily Hit")

FINAL_DATA_irma$impact <- ifelse(FINAL_DATA_irma$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "hit_hard", ifelse(FINAL_DATA_irma$DAMAGE_PROPERTY_NUM > 0, "hit_soft", "not_hit"))

# Create a new column "Hit_hard"
FINAL_DATA_irma$Hit_hard <- ifelse(FINAL_DATA_irma$impact == "hit_hard", 1, 0)

# Create a new column "hit_soft"
FINAL_DATA_irma$hit_soft <- ifelse(FINAL_DATA_irma$impact == "hit_soft", 1, 0)

FINAL_DATA_irma$not_hit <- ifelse(FINAL_DATA_irma$impact == "not_hit", 1, 0)

# write.csv(FINAL_DATA_irma,"FINAL_DATA_irma.csv")




# Filter the hurricane data for the specified FIPS codes
filtered_hurricanes_Irma <- official_hurr_data %>%
  filter(FIPS %in% irma_fips)

# Create a new variable 'Hit_again_years' indicating how many years before or after 2018 the county was hit again

filtered_hurricanes_Irma$Hurr_Year <- as.numeric(filtered_hurricanes_Irma$Hurr_Year)

filtered_hurricanes_Irma <- filtered_hurricanes_Irma %>%
  mutate(Hit_again_years = Hurr_Year - 2017)

filtered_hurricanes_Irma <- filtered_hurricanes_Irma[filtered_hurricanes_Irma$Hit_again_years != 0, ]

# Group by FIPS and keep the row with the closest value to 0 in hit_again_years
filtered_hurricanes_Irma <- filtered_hurricanes_Irma %>%
  group_by(FIPS) %>%
  slice(which.min(abs(Hit_again_years))) %>%
  ungroup()


# merge into FINAL_DATA_Irma 
FINAL_DATA_irma <- merge(FINAL_DATA_irma, filtered_hurricanes_Irma, by = "FIPS", all.x = TRUE, suffixes = c("_final", "_filtered"))

FINAL_DATA_irma <- FINAL_DATA_irma %>% 
  select("FIPS":"not_hit", "Hit_again_years")


FINAL_DATA_irma$hit_again_5after <- ifelse(FINAL_DATA_irma$Hit_again_years >= 1 & FINAL_DATA_irma$Hit_again_years <= 5, 1, 0)

FINAL_DATA_irma$hit_again_5after <- replace(FINAL_DATA_irma$hit_again_5after, is.na(FINAL_DATA_irma$hit_again_5after), 0)

```


## Creating my own variables for Irma and Non-Irma (treatment and control groups)

Doing this in excel and copy/pasting in here so don't have to write 43 lines of code

```{r}
FINAL_DATA_irma$NOT_Irma2000 <- (FINAL_DATA_irma$Irma==0)*(FINAL_DATA_irma$Year==2000)
FINAL_DATA_irma$NOT_Irma2001 <- (FINAL_DATA_irma$Irma==0)*(FINAL_DATA_irma$Year==2001)
FINAL_DATA_irma$NOT_Irma2002 <- (FINAL_DATA_irma$Irma==0)*(FINAL_DATA_irma$Year==2002)
FINAL_DATA_irma$NOT_Irma2003 <- (FINAL_DATA_irma$Irma==0)*(FINAL_DATA_irma$Year==2003)
FINAL_DATA_irma$NOT_Irma2004 <- (FINAL_DATA_irma$Irma==0)*(FINAL_DATA_irma$Year==2004)
FINAL_DATA_irma$NOT_Irma2005 <- (FINAL_DATA_irma$Irma==0)*(FINAL_DATA_irma$Year==2005)
FINAL_DATA_irma$NOT_Irma2006 <- (FINAL_DATA_irma$Irma==0)*(FINAL_DATA_irma$Year==2006)
FINAL_DATA_irma$NOT_Irma2007 <- (FINAL_DATA_irma$Irma==0)*(FINAL_DATA_irma$Year==2007)
FINAL_DATA_irma$NOT_Irma2008 <- (FINAL_DATA_irma$Irma==0)*(FINAL_DATA_irma$Year==2008)
FINAL_DATA_irma$NOT_Irma2009 <- (FINAL_DATA_irma$Irma==0)*(FINAL_DATA_irma$Year==2009)
FINAL_DATA_irma$NOT_Irma2010 <- (FINAL_DATA_irma$Irma==0)*(FINAL_DATA_irma$Year==2010)
FINAL_DATA_irma$NOT_Irma2011 <- (FINAL_DATA_irma$Irma==0)*(FINAL_DATA_irma$Year==2011)
FINAL_DATA_irma$NOT_Irma2012 <- (FINAL_DATA_irma$Irma==0)*(FINAL_DATA_irma$Year==2012)
FINAL_DATA_irma$NOT_Irma2013 <- (FINAL_DATA_irma$Irma==0)*(FINAL_DATA_irma$Year==2013)
FINAL_DATA_irma$NOT_Irma2014 <- (FINAL_DATA_irma$Irma==0)*(FINAL_DATA_irma$Year==2014)
FINAL_DATA_irma$NOT_Irma2015 <- (FINAL_DATA_irma$Irma==0)*(FINAL_DATA_irma$Year==2015)
FINAL_DATA_irma$NOT_Irma2016 <- (FINAL_DATA_irma$Irma==0)*(FINAL_DATA_irma$Year==2016)
FINAL_DATA_irma$NOT_Irma2017 <- (FINAL_DATA_irma$Irma==0)*(FINAL_DATA_irma$Year==2017)
FINAL_DATA_irma$NOT_Irma2018 <- (FINAL_DATA_irma$Irma==0)*(FINAL_DATA_irma$Year==2018)
FINAL_DATA_irma$NOT_Irma2019 <- (FINAL_DATA_irma$Irma==0)*(FINAL_DATA_irma$Year==2019)
FINAL_DATA_irma$NOT_Irma2020 <- (FINAL_DATA_irma$Irma==0)*(FINAL_DATA_irma$Year==2020)
FINAL_DATA_irma$NOT_Irma2021 <- (FINAL_DATA_irma$Irma==0)*(FINAL_DATA_irma$Year==2021)
FINAL_DATA_irma$NOT_Irma2022 <- (FINAL_DATA_irma$Irma==0)*(FINAL_DATA_irma$Year==2022)
FINAL_DATA_irma$NOT_Irma2023 <- (FINAL_DATA_irma$Irma==0)*(FINAL_DATA_irma$Year==2023)
FINAL_DATA_irma$Irma2000 <- (FINAL_DATA_irma$Irma==1)*(FINAL_DATA_irma$Year==2000)
FINAL_DATA_irma$Irma2001 <- (FINAL_DATA_irma$Irma==1)*(FINAL_DATA_irma$Year==2001)
FINAL_DATA_irma$Irma2002 <- (FINAL_DATA_irma$Irma==1)*(FINAL_DATA_irma$Year==2002)
FINAL_DATA_irma$Irma2003 <- (FINAL_DATA_irma$Irma==1)*(FINAL_DATA_irma$Year==2003)
FINAL_DATA_irma$Irma2004 <- (FINAL_DATA_irma$Irma==1)*(FINAL_DATA_irma$Year==2004)
FINAL_DATA_irma$Irma2005 <- (FINAL_DATA_irma$Irma==1)*(FINAL_DATA_irma$Year==2005)
FINAL_DATA_irma$Irma2006 <- (FINAL_DATA_irma$Irma==1)*(FINAL_DATA_irma$Year==2006)
FINAL_DATA_irma$Irma2007 <- (FINAL_DATA_irma$Irma==1)*(FINAL_DATA_irma$Year==2007)
FINAL_DATA_irma$Irma2008 <- (FINAL_DATA_irma$Irma==1)*(FINAL_DATA_irma$Year==2008)
FINAL_DATA_irma$Irma2009 <- (FINAL_DATA_irma$Irma==1)*(FINAL_DATA_irma$Year==2009)
FINAL_DATA_irma$Irma2010 <- (FINAL_DATA_irma$Irma==1)*(FINAL_DATA_irma$Year==2010)
FINAL_DATA_irma$Irma2011 <- (FINAL_DATA_irma$Irma==1)*(FINAL_DATA_irma$Year==2011)
FINAL_DATA_irma$Irma2012 <- (FINAL_DATA_irma$Irma==1)*(FINAL_DATA_irma$Year==2012)
FINAL_DATA_irma$Irma2013 <- (FINAL_DATA_irma$Irma==1)*(FINAL_DATA_irma$Year==2013)
FINAL_DATA_irma$Irma2014 <- (FINAL_DATA_irma$Irma==1)*(FINAL_DATA_irma$Year==2014)
FINAL_DATA_irma$Irma2015 <- (FINAL_DATA_irma$Irma==1)*(FINAL_DATA_irma$Year==2015)
FINAL_DATA_irma$Irma2016 <- (FINAL_DATA_irma$Irma==1)*(FINAL_DATA_irma$Year==2016)
FINAL_DATA_irma$Irma2017 <- (FINAL_DATA_irma$Irma==1)*(FINAL_DATA_irma$Year==2017)
FINAL_DATA_irma$Irma2018 <- (FINAL_DATA_irma$Irma==1)*(FINAL_DATA_irma$Year==2018)
FINAL_DATA_irma$Irma2019 <- (FINAL_DATA_irma$Irma==1)*(FINAL_DATA_irma$Year==2019)
FINAL_DATA_irma$Irma2020 <- (FINAL_DATA_irma$Irma==1)*(FINAL_DATA_irma$Year==2020)
FINAL_DATA_irma$Irma2021 <- (FINAL_DATA_irma$Irma==1)*(FINAL_DATA_irma$Year==2021)
FINAL_DATA_irma$Irma2022 <- (FINAL_DATA_irma$Irma==1)*(FINAL_DATA_irma$Year==2022)
FINAL_DATA_irma$Irma2023 <- (FINAL_DATA_irma$Irma==1)*(FINAL_DATA_irma$Year==2023)
```


### HURRICANE MICHAEL

```{r}
michael_subset <- official_hurr_data[official_hurr_data$HURR_NAME == "Hurricane Michael", ]

# drop row if PROPERTY and CROPS damage are both 0
michael_subset <- subset(michael_subset, !(DAMAGE_PROPERTY_NUM == 0 & DAMAGE_CROPS_NUM == 0))

unique_fips_values <- unique(michael_subset$FIPS)
print(unique_fips_values)

Michael_fips <- c(12005, 12013, 12063, 12077, 13087, 13253, 12039, 13095, 13201, 12133, 12045, 12129, 13099, 12037, 12073, 13007, 13037, 13131, 13205, 13177, 13273, 13321, 1069, 13175, 13023, 13081, 13091, 13093, 13235, 13261, 13315)


countyDistancescsv$Michael <- ifelse(countyDistancescsv$FIPS %in% Michael_fips, 1, 0)


countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "Michael"), 2:(ncol(countyDistancescsv)-1))]


#Assuming 'countyDistancescsv' is your dataset
 countyDistancescsv$within100_michael <- apply(countyDistancescsv[, paste0("di", Michael_fips)], 1, function(row) {
  if (any(row < 100)) {
    return(1)
  } else {
    return(0)
  }
})

countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "within100_michael"), 2:(ncol(countyDistancescsv)-1))]

Michael_counties <- subset(countyDistancescsv, within100_michael == 1)

Michael_counties <- Michael_counties %>% 
  select("FIPS", "within100_michael", "Michael")


joined_data_michael <- joined_data_1 %>%
  filter(HURR_NAME == "Hurricane Michael")
  
michael_data <- left_join(Michael_counties, joined_data_michael, by = "FIPS")

FINAL_DATA_Michael <- inner_join(DATASET2, michael_data, by = "FIPS")

FINAL_DATA_Michael <- FINAL_DATA_Michael %>%
  mutate(hurr_hit = ifelse(Michael == 1 & Year >= 2018, 1, 0))

FINAL_DATA_Michael$Income <- as.numeric(FINAL_DATA_Michael$Income)
FINAL_DATA_Michael$Population <- as.numeric(FINAL_DATA_Michael$Population)


# adding leads and lags

FINAL_DATA_Michael <- FINAL_DATA_Michael %>%
  mutate(
    lead4 = ifelse(Year == 2013, 1, 0),
    lead3 = ifelse(Year == 2014, 1, 0),
    lead2 = ifelse(Year == 2015, 1, 0),
    lead1 = ifelse(Year == 2016, 1, 0),
    lag0 = ifelse(Year == 2017, 1, 0),
    lag1 = ifelse(Year == 2018, 1, 0),
    lag2 = ifelse(Year == 2019, 1, 0),
    lag3 = ifelse(Year == 2020, 1, 0),
    lag4 = ifelse(Year == 2021, 1, 0),
    lag5 = ifelse(Year == 2022, 1, 0)
  )

FINAL_DATA_Michael$DAMAGE_PROPERTY_NUM[is.na(FINAL_DATA_Michael$DAMAGE_PROPERTY_NUM)] <- 0
FINAL_DATA_Michael$DAMAGE_CROPS_NUM[is.na(FINAL_DATA_Michael$DAMAGE_CROPS_NUM)] <- 0

hurr_damage_treshold <- 645000

# Create a new column indicating heavily hit or not
FINAL_DATA_Michael$impact <- ifelse(FINAL_DATA_Michael$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "Heavily Hit", "Not Heavily Hit")

FINAL_DATA_Michael$impact <- ifelse(FINAL_DATA_Michael$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "hit_hard", ifelse(FINAL_DATA_Michael$DAMAGE_PROPERTY_NUM > 0, "hit_soft", "not_hit"))

# Create a new column "Hit_hard"
FINAL_DATA_Michael$Hit_hard <- ifelse(FINAL_DATA_Michael$impact == "hit_hard", 1, 0)

# Create a new column "hit_soft"
FINAL_DATA_Michael$hit_soft <- ifelse(FINAL_DATA_Michael$impact == "hit_soft", 1, 0)

FINAL_DATA_Michael$not_hit <- ifelse(FINAL_DATA_Michael$impact == "not_hit", 1, 0)

# Filter the hurricane data for the specified FIPS codes
filtered_hurricanes_michael <- official_hurr_data %>%
  filter(FIPS %in% Michael_fips)

# Create a new variable 'Hit_again_years' indicating how many years before or after 2018 the county was hit again

filtered_hurricanes_michael$Hurr_Year <- as.numeric(filtered_hurricanes_michael$Hurr_Year)

filtered_hurricanes_michael <- filtered_hurricanes_michael %>%
  mutate(Hit_again_years = Hurr_Year - 2018)

filtered_hurricanes_michael <- filtered_hurricanes_michael[filtered_hurricanes_michael$Hit_again_years != 0, ]

# Group by FIPS and keep the row with the closest value to 0 in hit_again_years
filtered_hurricanes_michael <- filtered_hurricanes_michael %>%
  group_by(FIPS) %>%
  slice(which.min(abs(Hit_again_years))) %>%
  ungroup()


# merge into FINAL_DATA_MICHAEL 
FINAL_DATA_Michael <- merge(FINAL_DATA_Michael, filtered_hurricanes_michael, by = "FIPS", all.x = TRUE, suffixes = c("_final", "_filtered"))

FINAL_DATA_Michael <- FINAL_DATA_Michael %>% 
  select("FIPS":"not_hit", "Hit_again_years")


FINAL_DATA_Michael$hit_again_5after <- ifelse(FINAL_DATA_Michael$Hit_again_years >= 1 & FINAL_DATA_Michael$Hit_again_years <= 5, 1, 0)

FINAL_DATA_Michael$hit_again_5after <- replace(FINAL_DATA_Michael$hit_again_5after, is.na(FINAL_DATA_Michael$hit_again_5after), 0)


```

```{r}
FINAL_DATA_Michael$NOT_Michael2000 <- (FINAL_DATA_Michael$Michael==0)*(FINAL_DATA_Michael$Year==2000)
FINAL_DATA_Michael$NOT_Michael2001 <- (FINAL_DATA_Michael$Michael==0)*(FINAL_DATA_Michael$Year==2001)
FINAL_DATA_Michael$NOT_Michael2002 <- (FINAL_DATA_Michael$Michael==0)*(FINAL_DATA_Michael$Year==2002)
FINAL_DATA_Michael$NOT_Michael2003 <- (FINAL_DATA_Michael$Michael==0)*(FINAL_DATA_Michael$Year==2003)
FINAL_DATA_Michael$NOT_Michael2004 <- (FINAL_DATA_Michael$Michael==0)*(FINAL_DATA_Michael$Year==2004)
FINAL_DATA_Michael$NOT_Michael2005 <- (FINAL_DATA_Michael$Michael==0)*(FINAL_DATA_Michael$Year==2005)
FINAL_DATA_Michael$NOT_Michael2006 <- (FINAL_DATA_Michael$Michael==0)*(FINAL_DATA_Michael$Year==2006)
FINAL_DATA_Michael$NOT_Michael2007 <- (FINAL_DATA_Michael$Michael==0)*(FINAL_DATA_Michael$Year==2007)
FINAL_DATA_Michael$NOT_Michael2008 <- (FINAL_DATA_Michael$Michael==0)*(FINAL_DATA_Michael$Year==2008)
FINAL_DATA_Michael$NOT_Michael2009 <- (FINAL_DATA_Michael$Michael==0)*(FINAL_DATA_Michael$Year==2009)
FINAL_DATA_Michael$NOT_Michael2010 <- (FINAL_DATA_Michael$Michael==0)*(FINAL_DATA_Michael$Year==2010)
FINAL_DATA_Michael$NOT_Michael2011 <- (FINAL_DATA_Michael$Michael==0)*(FINAL_DATA_Michael$Year==2011)
FINAL_DATA_Michael$NOT_Michael2012 <- (FINAL_DATA_Michael$Michael==0)*(FINAL_DATA_Michael$Year==2012)
FINAL_DATA_Michael$NOT_Michael2013 <- (FINAL_DATA_Michael$Michael==0)*(FINAL_DATA_Michael$Year==2013)
FINAL_DATA_Michael$NOT_Michael2014 <- (FINAL_DATA_Michael$Michael==0)*(FINAL_DATA_Michael$Year==2014)
FINAL_DATA_Michael$NOT_Michael2015 <- (FINAL_DATA_Michael$Michael==0)*(FINAL_DATA_Michael$Year==2015)
FINAL_DATA_Michael$NOT_Michael2016 <- (FINAL_DATA_Michael$Michael==0)*(FINAL_DATA_Michael$Year==2016)
FINAL_DATA_Michael$NOT_Michael2017 <- (FINAL_DATA_Michael$Michael==0)*(FINAL_DATA_Michael$Year==2017)
FINAL_DATA_Michael$NOT_Michael2018 <- (FINAL_DATA_Michael$Michael==0)*(FINAL_DATA_Michael$Year==2018)
FINAL_DATA_Michael$NOT_Michael2019 <- (FINAL_DATA_Michael$Michael==0)*(FINAL_DATA_Michael$Year==2019)
FINAL_DATA_Michael$NOT_Michael2020 <- (FINAL_DATA_Michael$Michael==0)*(FINAL_DATA_Michael$Year==2020)
FINAL_DATA_Michael$NOT_Michael2021 <- (FINAL_DATA_Michael$Michael==0)*(FINAL_DATA_Michael$Year==2021)
FINAL_DATA_Michael$NOT_Michael2022 <- (FINAL_DATA_Michael$Michael==0)*(FINAL_DATA_Michael$Year==2022)
FINAL_DATA_Michael$NOT_Michael2023 <- (FINAL_DATA_Michael$Michael==0)*(FINAL_DATA_Michael$Year==2023)
FINAL_DATA_Michael$Michael2000 <- (FINAL_DATA_Michael$Michael==1)*(FINAL_DATA_Michael$Year==2000)
FINAL_DATA_Michael$Michael2001 <- (FINAL_DATA_Michael$Michael==1)*(FINAL_DATA_Michael$Year==2001)
FINAL_DATA_Michael$Michael2002 <- (FINAL_DATA_Michael$Michael==1)*(FINAL_DATA_Michael$Year==2002)
FINAL_DATA_Michael$Michael2003 <- (FINAL_DATA_Michael$Michael==1)*(FINAL_DATA_Michael$Year==2003)
FINAL_DATA_Michael$Michael2004 <- (FINAL_DATA_Michael$Michael==1)*(FINAL_DATA_Michael$Year==2004)
FINAL_DATA_Michael$Michael2005 <- (FINAL_DATA_Michael$Michael==1)*(FINAL_DATA_Michael$Year==2005)
FINAL_DATA_Michael$Michael2006 <- (FINAL_DATA_Michael$Michael==1)*(FINAL_DATA_Michael$Year==2006)
FINAL_DATA_Michael$Michael2007 <- (FINAL_DATA_Michael$Michael==1)*(FINAL_DATA_Michael$Year==2007)
FINAL_DATA_Michael$Michael2008 <- (FINAL_DATA_Michael$Michael==1)*(FINAL_DATA_Michael$Year==2008)
FINAL_DATA_Michael$Michael2009 <- (FINAL_DATA_Michael$Michael==1)*(FINAL_DATA_Michael$Year==2009)
FINAL_DATA_Michael$Michael2010 <- (FINAL_DATA_Michael$Michael==1)*(FINAL_DATA_Michael$Year==2010)
FINAL_DATA_Michael$Michael2011 <- (FINAL_DATA_Michael$Michael==1)*(FINAL_DATA_Michael$Year==2011)
FINAL_DATA_Michael$Michael2012 <- (FINAL_DATA_Michael$Michael==1)*(FINAL_DATA_Michael$Year==2012)
FINAL_DATA_Michael$Michael2013 <- (FINAL_DATA_Michael$Michael==1)*(FINAL_DATA_Michael$Year==2013)
FINAL_DATA_Michael$Michael2014 <- (FINAL_DATA_Michael$Michael==1)*(FINAL_DATA_Michael$Year==2014)
FINAL_DATA_Michael$Michael2015 <- (FINAL_DATA_Michael$Michael==1)*(FINAL_DATA_Michael$Year==2015)
FINAL_DATA_Michael$Michael2016 <- (FINAL_DATA_Michael$Michael==1)*(FINAL_DATA_Michael$Year==2016)
FINAL_DATA_Michael$Michael2017 <- (FINAL_DATA_Michael$Michael==1)*(FINAL_DATA_Michael$Year==2017)
FINAL_DATA_Michael$Michael2018 <- (FINAL_DATA_Michael$Michael==1)*(FINAL_DATA_Michael$Year==2018)
FINAL_DATA_Michael$Michael2019 <- (FINAL_DATA_Michael$Michael==1)*(FINAL_DATA_Michael$Year==2019)
FINAL_DATA_Michael$Michael2020 <- (FINAL_DATA_Michael$Michael==1)*(FINAL_DATA_Michael$Year==2020)
FINAL_DATA_Michael$Michael2021 <- (FINAL_DATA_Michael$Michael==1)*(FINAL_DATA_Michael$Year==2021)
FINAL_DATA_Michael$Michael2022 <- (FINAL_DATA_Michael$Michael==1)*(FINAL_DATA_Michael$Year==2022)
FINAL_DATA_Michael$Michael2023 <- (FINAL_DATA_Michael$Michael==1)*(FINAL_DATA_Michael$Year==2023)
```


## HURRICANE ISAAC

```{r}
Isaac_subset <- official_hurr_data[official_hurr_data$HURR_NAME == "Hurricane Isaac", ]

# drop row if PROPERTY and CROPS damage are both 0
Isaac_subset <- subset(Isaac_subset, !(DAMAGE_PROPERTY_NUM == 0 & DAMAGE_CROPS_NUM == 0))

unique_fips_values <- unique(Isaac_subset$FIPS)
print(unique_fips_values)

Isaac_fips <- c(22071, 22063, 22051, 22095, 22033, 22087, 22007, 22103, 22105, 22075, 22091, 22117, 22109, 22057, 22089, 22005, 22093, 22037, 22047, 22077)


countyDistancescsv$Isaac <- ifelse(countyDistancescsv$FIPS %in% Isaac_fips, 1, 0)


countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "Isaac"), 2:(ncol(countyDistancescsv)-1))]


#Assuming 'countyDistancescsv' is your dataset
 countyDistancescsv$within100_Isaac <- apply(countyDistancescsv[, paste0("di", Isaac_fips)], 1, function(row) {
  if (any(row < 100)) {
    return(1)
  } else {
    return(0)
  }
})

countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "within100_Isaac"), 2:(ncol(countyDistancescsv)-1))]

Isaac_counties <- subset(countyDistancescsv, within100_Isaac == 1)

Isaac_counties <- Isaac_counties %>% 
  select("FIPS", "within100_Isaac", "Isaac")


joined_data_Isaac <- joined_data_1 %>%
  filter(HURR_NAME == "Hurricane Isaac")
  
Isaac_data <- left_join(Isaac_counties, joined_data_Isaac, by = "FIPS")

FINAL_DATA_Isaac <- inner_join(DATASET2, Isaac_data, by = "FIPS")

FINAL_DATA_Isaac <- FINAL_DATA_Isaac %>%
  mutate(hurr_hit = ifelse(Isaac == 1 & Year >= 2012, 1, 0))

FINAL_DATA_Isaac$Income <- as.numeric(FINAL_DATA_Isaac$Income)
FINAL_DATA_Isaac$Population <- as.numeric(FINAL_DATA_Isaac$Population)


# adding leads and lags

FINAL_DATA_Isaac <- FINAL_DATA_Isaac %>%
  mutate(
    lead4 = ifelse(Year == 2013, 1, 0),
    lead3 = ifelse(Year == 2014, 1, 0),
    lead2 = ifelse(Year == 2015, 1, 0),
    lead1 = ifelse(Year == 2016, 1, 0),
    lag0 = ifelse(Year == 2017, 1, 0),
    lag1 = ifelse(Year == 2018, 1, 0),
    lag2 = ifelse(Year == 2019, 1, 0),
    lag3 = ifelse(Year == 2020, 1, 0),
    lag4 = ifelse(Year == 2021, 1, 0),
    lag5 = ifelse(Year == 2022, 1, 0)
  )




FINAL_DATA_Isaac$DAMAGE_PROPERTY_NUM[is.na(FINAL_DATA_Isaac$DAMAGE_PROPERTY_NUM)] <- 0
FINAL_DATA_Isaac$DAMAGE_CROPS_NUM[is.na(FINAL_DATA_Isaac$DAMAGE_CROPS_NUM)] <- 0

hurr_damage_treshold <- 645000

# Create a new column indicating heavily hit or not
FINAL_DATA_Isaac$impact <- ifelse(FINAL_DATA_Isaac$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "Heavily Hit", "Not Heavily Hit")

FINAL_DATA_Isaac$impact <- ifelse(FINAL_DATA_Isaac$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "hit_hard", ifelse(FINAL_DATA_Isaac$DAMAGE_PROPERTY_NUM > 0, "hit_soft", "not_hit"))

# Create a new column "Hit_hard"
FINAL_DATA_Isaac$Hit_hard <- ifelse(FINAL_DATA_Isaac$impact == "hit_hard", 1, 0)

# Create a new column "hit_soft"
FINAL_DATA_Isaac$hit_soft <- ifelse(FINAL_DATA_Isaac$impact == "hit_soft", 1, 0)

FINAL_DATA_Isaac$not_hit <- ifelse(FINAL_DATA_Isaac$impact == "not_hit", 1, 0)
```

```{r}
# Filter the hurricane data for the specified FIPS codes
filtered_hurricanes_Isaac <- official_hurr_data %>%
  filter(FIPS %in% Isaac_fips)

# Create a new variable 'Hit_again_years' indicating how many years before or after 2018 the county was hit again

filtered_hurricanes_Isaac$Hurr_Year <- as.numeric(filtered_hurricanes_Isaac$Hurr_Year)

filtered_hurricanes_Isaac <- filtered_hurricanes_Isaac %>%
  mutate(Hit_again_years = Hurr_Year - 2012)

filtered_hurricanes_Isaac <- filtered_hurricanes_Isaac[filtered_hurricanes_Isaac$Hit_again_years != 0, ]

# Group by FIPS and keep the row with the closest value to 0 in hit_again_years
filtered_hurricanes_Isaac <- filtered_hurricanes_Isaac %>%
  group_by(FIPS) %>%
  slice(which.min(abs(Hit_again_years))) %>%
  ungroup()


# merge into FINAL_DATA_Isaac 
FINAL_DATA_Isaac2 <- merge(FINAL_DATA_Isaac, filtered_hurricanes_Isaac, by = "FIPS", all.x = TRUE, suffixes = c("_final", "_filtered"))

FINAL_DATA_Isaac2 <- FINAL_DATA_Isaac2 %>% 
  select("FIPS":"not_hit", "Hit_again_years")


FINAL_DATA_Isaac2$hit_again_5after <- ifelse(FINAL_DATA_Isaac2$Hit_again_years >= 1 & FINAL_DATA_Isaac2$Hit_again_years <= 5, 1, 0)

FINAL_DATA_Isaac2$hit_again_5after <- replace(FINAL_DATA_Isaac2$hit_again_5after, is.na(FINAL_DATA_Isaac2$hit_again_5after), 0)

```

```{r}
FINAL_DATA_Isaac2$NOT_Isaac2000 <- (FINAL_DATA_Isaac2$Isaac==0)*(FINAL_DATA_Isaac2$Year==2000)
FINAL_DATA_Isaac2$NOT_Isaac2001 <- (FINAL_DATA_Isaac2$Isaac==0)*(FINAL_DATA_Isaac2$Year==2001)
FINAL_DATA_Isaac2$NOT_Isaac2002 <- (FINAL_DATA_Isaac2$Isaac==0)*(FINAL_DATA_Isaac2$Year==2002)
FINAL_DATA_Isaac2$NOT_Isaac2003 <- (FINAL_DATA_Isaac2$Isaac==0)*(FINAL_DATA_Isaac2$Year==2003)
FINAL_DATA_Isaac2$NOT_Isaac2004 <- (FINAL_DATA_Isaac2$Isaac==0)*(FINAL_DATA_Isaac2$Year==2004)
FINAL_DATA_Isaac2$NOT_Isaac2005 <- (FINAL_DATA_Isaac2$Isaac==0)*(FINAL_DATA_Isaac2$Year==2005)
FINAL_DATA_Isaac2$NOT_Isaac2006 <- (FINAL_DATA_Isaac2$Isaac==0)*(FINAL_DATA_Isaac2$Year==2006)
FINAL_DATA_Isaac2$NOT_Isaac2007 <- (FINAL_DATA_Isaac2$Isaac==0)*(FINAL_DATA_Isaac2$Year==2007)
FINAL_DATA_Isaac2$NOT_Isaac2008 <- (FINAL_DATA_Isaac2$Isaac==0)*(FINAL_DATA_Isaac2$Year==2008)
FINAL_DATA_Isaac2$NOT_Isaac2009 <- (FINAL_DATA_Isaac2$Isaac==0)*(FINAL_DATA_Isaac2$Year==2009)
FINAL_DATA_Isaac2$NOT_Isaac2010 <- (FINAL_DATA_Isaac2$Isaac==0)*(FINAL_DATA_Isaac2$Year==2010)
FINAL_DATA_Isaac2$NOT_Isaac2011 <- (FINAL_DATA_Isaac2$Isaac==0)*(FINAL_DATA_Isaac2$Year==2011)
FINAL_DATA_Isaac2$NOT_Isaac2012 <- (FINAL_DATA_Isaac2$Isaac==0)*(FINAL_DATA_Isaac2$Year==2012)
FINAL_DATA_Isaac2$NOT_Isaac2013 <- (FINAL_DATA_Isaac2$Isaac==0)*(FINAL_DATA_Isaac2$Year==2013)
FINAL_DATA_Isaac2$NOT_Isaac2014 <- (FINAL_DATA_Isaac2$Isaac==0)*(FINAL_DATA_Isaac2$Year==2014)
FINAL_DATA_Isaac2$NOT_Isaac2015 <- (FINAL_DATA_Isaac2$Isaac==0)*(FINAL_DATA_Isaac2$Year==2015)
FINAL_DATA_Isaac2$NOT_Isaac2016 <- (FINAL_DATA_Isaac2$Isaac==0)*(FINAL_DATA_Isaac2$Year==2016)
FINAL_DATA_Isaac2$NOT_Isaac2017 <- (FINAL_DATA_Isaac2$Isaac==0)*(FINAL_DATA_Isaac2$Year==2017)
FINAL_DATA_Isaac2$NOT_Isaac2018 <- (FINAL_DATA_Isaac2$Isaac==0)*(FINAL_DATA_Isaac2$Year==2018)
FINAL_DATA_Isaac2$NOT_Isaac2019 <- (FINAL_DATA_Isaac2$Isaac==0)*(FINAL_DATA_Isaac2$Year==2019)
FINAL_DATA_Isaac2$NOT_Isaac2020 <- (FINAL_DATA_Isaac2$Isaac==0)*(FINAL_DATA_Isaac2$Year==2020)
FINAL_DATA_Isaac2$NOT_Isaac2021 <- (FINAL_DATA_Isaac2$Isaac==0)*(FINAL_DATA_Isaac2$Year==2021)
FINAL_DATA_Isaac2$NOT_Isaac2022 <- (FINAL_DATA_Isaac2$Isaac==0)*(FINAL_DATA_Isaac2$Year==2022)
FINAL_DATA_Isaac2$NOT_Isaac2023 <- (FINAL_DATA_Isaac2$Isaac==0)*(FINAL_DATA_Isaac2$Year==2023)
FINAL_DATA_Isaac2$Isaac2000 <- (FINAL_DATA_Isaac2$Isaac==1)*(FINAL_DATA_Isaac2$Year==2000)
FINAL_DATA_Isaac2$Isaac2001 <- (FINAL_DATA_Isaac2$Isaac==1)*(FINAL_DATA_Isaac2$Year==2001)
FINAL_DATA_Isaac2$Isaac2002 <- (FINAL_DATA_Isaac2$Isaac==1)*(FINAL_DATA_Isaac2$Year==2002)
FINAL_DATA_Isaac2$Isaac2003 <- (FINAL_DATA_Isaac2$Isaac==1)*(FINAL_DATA_Isaac2$Year==2003)
FINAL_DATA_Isaac2$Isaac2004 <- (FINAL_DATA_Isaac2$Isaac==1)*(FINAL_DATA_Isaac2$Year==2004)
FINAL_DATA_Isaac2$Isaac2005 <- (FINAL_DATA_Isaac2$Isaac==1)*(FINAL_DATA_Isaac2$Year==2005)
FINAL_DATA_Isaac2$Isaac2006 <- (FINAL_DATA_Isaac2$Isaac==1)*(FINAL_DATA_Isaac2$Year==2006)
FINAL_DATA_Isaac2$Isaac2007 <- (FINAL_DATA_Isaac2$Isaac==1)*(FINAL_DATA_Isaac2$Year==2007)
FINAL_DATA_Isaac2$Isaac2008 <- (FINAL_DATA_Isaac2$Isaac==1)*(FINAL_DATA_Isaac2$Year==2008)
FINAL_DATA_Isaac2$Isaac2009 <- (FINAL_DATA_Isaac2$Isaac==1)*(FINAL_DATA_Isaac2$Year==2009)
FINAL_DATA_Isaac2$Isaac2010 <- (FINAL_DATA_Isaac2$Isaac==1)*(FINAL_DATA_Isaac2$Year==2010)
FINAL_DATA_Isaac2$Isaac2011 <- (FINAL_DATA_Isaac2$Isaac==1)*(FINAL_DATA_Isaac2$Year==2011)
FINAL_DATA_Isaac2$Isaac2012 <- (FINAL_DATA_Isaac2$Isaac==1)*(FINAL_DATA_Isaac2$Year==2012)
FINAL_DATA_Isaac2$Isaac2013 <- (FINAL_DATA_Isaac2$Isaac==1)*(FINAL_DATA_Isaac2$Year==2013)
FINAL_DATA_Isaac2$Isaac2014 <- (FINAL_DATA_Isaac2$Isaac==1)*(FINAL_DATA_Isaac2$Year==2014)
FINAL_DATA_Isaac2$Isaac2015 <- (FINAL_DATA_Isaac2$Isaac==1)*(FINAL_DATA_Isaac2$Year==2015)
FINAL_DATA_Isaac2$Isaac2016 <- (FINAL_DATA_Isaac2$Isaac==1)*(FINAL_DATA_Isaac2$Year==2016)
FINAL_DATA_Isaac2$Isaac2017 <- (FINAL_DATA_Isaac2$Isaac==1)*(FINAL_DATA_Isaac2$Year==2017)
FINAL_DATA_Isaac2$Isaac2018 <- (FINAL_DATA_Isaac2$Isaac==1)*(FINAL_DATA_Isaac2$Year==2018)
FINAL_DATA_Isaac2$Isaac2019 <- (FINAL_DATA_Isaac2$Isaac==1)*(FINAL_DATA_Isaac2$Year==2019)
FINAL_DATA_Isaac2$Isaac2020 <- (FINAL_DATA_Isaac2$Isaac==1)*(FINAL_DATA_Isaac2$Year==2020)
FINAL_DATA_Isaac2$Isaac2021 <- (FINAL_DATA_Isaac2$Isaac==1)*(FINAL_DATA_Isaac2$Year==2021)
FINAL_DATA_Isaac2$Isaac2022 <- (FINAL_DATA_Isaac2$Isaac==1)*(FINAL_DATA_Isaac2$Year==2022)
FINAL_DATA_Isaac2$Isaac2023 <- (FINAL_DATA_Isaac2$Isaac==1)*(FINAL_DATA_Isaac2$Year==2023)
```


## HURRICANE ISABEL

```{r}

Isabel_subset <- official_hurr_data[official_hurr_data$HURR_NAME == "Hurricane Isabel", ]

# drop row if PROPERTY and CROPS damage are both 0
Isabel_subset <- subset(Isabel_subset, !(DAMAGE_PROPERTY_NUM == 0 & DAMAGE_CROPS_NUM == 0))

unique_fips_values <- unique(Isabel_subset$FIPS)
print(unique_fips_values)

Isabel_fips <- c(37055, 51700, 51199, 37137, 51095, 51550, 51115, 51057, 37031, 51119, 37187, 51710, 51073, 37041, 51149, 37139, 37013, 37015, 37049, 37147, 37083, 37131, 37143, 37091, 37195, 37133, 37065, 37073, 37183, 37127, 37079, 37053, 37191, 37181, 37103, 37185, 37077, 37069, 37063, 37061, 37107, 37145, 37029, 37051, 51193)


countyDistancescsv$Isabel <- ifelse(countyDistancescsv$FIPS %in% Isabel_fips, 1, 0)


countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "Isabel"), 2:(ncol(countyDistancescsv)-1))]


#Assuming 'countyDistancescsv' is your dataset
 countyDistancescsv$within100_Isabel <- apply(countyDistancescsv[, paste0("di",Isabel_fips)], 1, function(row) {
  if (any(row < 100)) {
    return(1)
  } else {
    return(0)
  }
})

countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "within100_Isabel"), 2:(ncol(countyDistancescsv)-1))]

Isabel_counties <- subset(countyDistancescsv, within100_Isabel == 1)

Isabel_counties <- Isabel_counties %>% 
  select("FIPS", "within100_Isabel", "Isabel")


joined_data_Isabel <- joined_data_1 %>%
  filter(HURR_NAME == "Hurricane Isabel")
  
Isabel_data <- left_join(Isabel_counties, joined_data_Isabel, by = "FIPS")

FINAL_DATA_Isabel <- inner_join(DATASET2, Isabel_data, by = "FIPS")

FINAL_DATA_Isabel <- FINAL_DATA_Isabel %>%
  mutate(hurr_hit = ifelse(Isabel == 1 & Year >= 2003, 1, 0))

FINAL_DATA_Isabel$Income <- as.numeric(FINAL_DATA_Isabel$Income)
FINAL_DATA_Isabel$Population <- as.numeric(FINAL_DATA_Isabel$Population)


# adding leads and lags

FINAL_DATA_Isabel <- FINAL_DATA_Isabel %>%
  mutate(
    lead4 = ifelse(Year == 2013, 1, 0),
    lead3 = ifelse(Year == 2014, 1, 0),
    lead2 = ifelse(Year == 2015, 1, 0),
    lead1 = ifelse(Year == 2016, 1, 0),
    lag0 = ifelse(Year == 2017, 1, 0),
    lag1 = ifelse(Year == 2018, 1, 0),
    lag2 = ifelse(Year == 2019, 1, 0),
    lag3 = ifelse(Year == 2020, 1, 0),
    lag4 = ifelse(Year == 2021, 1, 0),
    lag5 = ifelse(Year == 2022, 1, 0)
  )



FINAL_DATA_Isabel$DAMAGE_PROPERTY_NUM[is.na(FINAL_DATA_Isabel$DAMAGE_PROPERTY_NUM)] <- 0
FINAL_DATA_Isabel$DAMAGE_CROPS_NUM[is.na(FINAL_DATA_Isabel$DAMAGE_CROPS_NUM)] <- 0

hurr_damage_treshold <- 645000

# Create a new column indicating heavily hit or not
FINAL_DATA_Isabel$impact <- ifelse(FINAL_DATA_Isabel$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "Heavily Hit", "Not Heavily Hit")

FINAL_DATA_Isabel$impact <- ifelse(FINAL_DATA_Isabel$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "hit_hard", ifelse(FINAL_DATA_Isabel$DAMAGE_PROPERTY_NUM > 0, "hit_soft", "not_hit"))

# Create a new column "Hit_hard"
FINAL_DATA_Isabel$Hit_hard <- ifelse(FINAL_DATA_Isabel$impact == "hit_hard", 1, 0)

# Create a new column "hit_soft"
FINAL_DATA_Isabel$hit_soft <- ifelse(FINAL_DATA_Isabel$impact == "hit_soft", 1, 0)

FINAL_DATA_Isabel$not_hit <- ifelse(FINAL_DATA_Isabel$impact == "not_hit", 1, 0)

```

```{r}
# Filter the hurricane data for the specified FIPS codes
filtered_hurricanes_Isabel <- official_hurr_data %>%
  filter(FIPS %in% Isabel_fips)

# Create a new variable 'Hit_again_years' indicating how many years before or after 2018 the county was hit again

filtered_hurricanes_Isabel$Hurr_Year <- as.numeric(filtered_hurricanes_Isabel$Hurr_Year)

filtered_hurricanes_Isabel <- filtered_hurricanes_Isabel %>%
  mutate(Hit_again_years = Hurr_Year - 2003)

filtered_hurricanes_Isabel <- filtered_hurricanes_Isabel[filtered_hurricanes_Isabel$Hit_again_years != 0, ]

# Group by FIPS and keep the row with the closest value to 0 in hit_again_years
filtered_hurricanes_Isabel <- filtered_hurricanes_Isabel %>%
  group_by(FIPS) %>%
  slice(which.min(abs(Hit_again_years))) %>%
  ungroup()


# merge into FINAL_DATA_Isabel 
FINAL_DATA_Isabel <- merge(FINAL_DATA_Isabel, filtered_hurricanes_Isabel, by = "FIPS", all.x = TRUE, suffixes = c("_final", "_filtered"))

FINAL_DATA_Isabel <- FINAL_DATA_Isabel %>% 
  select("FIPS":"not_hit", "Hit_again_years")


FINAL_DATA_Isabel$hit_again_5after <- ifelse(FINAL_DATA_Isabel$Hit_again_years >= 1 & FINAL_DATA_Isabel$Hit_again_years <= 5, 1, 0)

FINAL_DATA_Isabel$hit_again_5after <- replace(FINAL_DATA_Isabel$hit_again_5after, is.na(FINAL_DATA_Isabel$hit_again_5after), 0)

```

```{r}
FINAL_DATA_Isabel$NOT_Isabel2000 <- (FINAL_DATA_Isabel$Isabel==0)*(FINAL_DATA_Isabel$Year==2000)
FINAL_DATA_Isabel$NOT_Isabel2001 <- (FINAL_DATA_Isabel$Isabel==0)*(FINAL_DATA_Isabel$Year==2001)
FINAL_DATA_Isabel$NOT_Isabel2002 <- (FINAL_DATA_Isabel$Isabel==0)*(FINAL_DATA_Isabel$Year==2002)
FINAL_DATA_Isabel$NOT_Isabel2003 <- (FINAL_DATA_Isabel$Isabel==0)*(FINAL_DATA_Isabel$Year==2003)
FINAL_DATA_Isabel$NOT_Isabel2004 <- (FINAL_DATA_Isabel$Isabel==0)*(FINAL_DATA_Isabel$Year==2004)
FINAL_DATA_Isabel$NOT_Isabel2005 <- (FINAL_DATA_Isabel$Isabel==0)*(FINAL_DATA_Isabel$Year==2005)
FINAL_DATA_Isabel$NOT_Isabel2006 <- (FINAL_DATA_Isabel$Isabel==0)*(FINAL_DATA_Isabel$Year==2006)
FINAL_DATA_Isabel$NOT_Isabel2007 <- (FINAL_DATA_Isabel$Isabel==0)*(FINAL_DATA_Isabel$Year==2007)
FINAL_DATA_Isabel$NOT_Isabel2008 <- (FINAL_DATA_Isabel$Isabel==0)*(FINAL_DATA_Isabel$Year==2008)
FINAL_DATA_Isabel$NOT_Isabel2009 <- (FINAL_DATA_Isabel$Isabel==0)*(FINAL_DATA_Isabel$Year==2009)
FINAL_DATA_Isabel$NOT_Isabel2010 <- (FINAL_DATA_Isabel$Isabel==0)*(FINAL_DATA_Isabel$Year==2010)
FINAL_DATA_Isabel$NOT_Isabel2011 <- (FINAL_DATA_Isabel$Isabel==0)*(FINAL_DATA_Isabel$Year==2011)
FINAL_DATA_Isabel$NOT_Isabel2012 <- (FINAL_DATA_Isabel$Isabel==0)*(FINAL_DATA_Isabel$Year==2012)
FINAL_DATA_Isabel$NOT_Isabel2013 <- (FINAL_DATA_Isabel$Isabel==0)*(FINAL_DATA_Isabel$Year==2013)
FINAL_DATA_Isabel$NOT_Isabel2014 <- (FINAL_DATA_Isabel$Isabel==0)*(FINAL_DATA_Isabel$Year==2014)
FINAL_DATA_Isabel$NOT_Isabel2015 <- (FINAL_DATA_Isabel$Isabel==0)*(FINAL_DATA_Isabel$Year==2015)
FINAL_DATA_Isabel$NOT_Isabel2016 <- (FINAL_DATA_Isabel$Isabel==0)*(FINAL_DATA_Isabel$Year==2016)
FINAL_DATA_Isabel$NOT_Isabel2017 <- (FINAL_DATA_Isabel$Isabel==0)*(FINAL_DATA_Isabel$Year==2017)
FINAL_DATA_Isabel$NOT_Isabel2018 <- (FINAL_DATA_Isabel$Isabel==0)*(FINAL_DATA_Isabel$Year==2018)
FINAL_DATA_Isabel$NOT_Isabel2019 <- (FINAL_DATA_Isabel$Isabel==0)*(FINAL_DATA_Isabel$Year==2019)
FINAL_DATA_Isabel$NOT_Isabel2020 <- (FINAL_DATA_Isabel$Isabel==0)*(FINAL_DATA_Isabel$Year==2020)
FINAL_DATA_Isabel$NOT_Isabel2021 <- (FINAL_DATA_Isabel$Isabel==0)*(FINAL_DATA_Isabel$Year==2021)
FINAL_DATA_Isabel$NOT_Isabel2022 <- (FINAL_DATA_Isabel$Isabel==0)*(FINAL_DATA_Isabel$Year==2022)
FINAL_DATA_Isabel$NOT_Isabel2023 <- (FINAL_DATA_Isabel$Isabel==0)*(FINAL_DATA_Isabel$Year==2023)
FINAL_DATA_Isabel$Isabel2000 <- (FINAL_DATA_Isabel$Isabel==1)*(FINAL_DATA_Isabel$Year==2000)
FINAL_DATA_Isabel$Isabel2001 <- (FINAL_DATA_Isabel$Isabel==1)*(FINAL_DATA_Isabel$Year==2001)
FINAL_DATA_Isabel$Isabel2002 <- (FINAL_DATA_Isabel$Isabel==1)*(FINAL_DATA_Isabel$Year==2002)
FINAL_DATA_Isabel$Isabel2003 <- (FINAL_DATA_Isabel$Isabel==1)*(FINAL_DATA_Isabel$Year==2003)
FINAL_DATA_Isabel$Isabel2004 <- (FINAL_DATA_Isabel$Isabel==1)*(FINAL_DATA_Isabel$Year==2004)
FINAL_DATA_Isabel$Isabel2005 <- (FINAL_DATA_Isabel$Isabel==1)*(FINAL_DATA_Isabel$Year==2005)
FINAL_DATA_Isabel$Isabel2006 <- (FINAL_DATA_Isabel$Isabel==1)*(FINAL_DATA_Isabel$Year==2006)
FINAL_DATA_Isabel$Isabel2007 <- (FINAL_DATA_Isabel$Isabel==1)*(FINAL_DATA_Isabel$Year==2007)
FINAL_DATA_Isabel$Isabel2008 <- (FINAL_DATA_Isabel$Isabel==1)*(FINAL_DATA_Isabel$Year==2008)
FINAL_DATA_Isabel$Isabel2009 <- (FINAL_DATA_Isabel$Isabel==1)*(FINAL_DATA_Isabel$Year==2009)
FINAL_DATA_Isabel$Isabel2010 <- (FINAL_DATA_Isabel$Isabel==1)*(FINAL_DATA_Isabel$Year==2010)
FINAL_DATA_Isabel$Isabel2011 <- (FINAL_DATA_Isabel$Isabel==1)*(FINAL_DATA_Isabel$Year==2011)
FINAL_DATA_Isabel$Isabel2012 <- (FINAL_DATA_Isabel$Isabel==1)*(FINAL_DATA_Isabel$Year==2012)
FINAL_DATA_Isabel$Isabel2013 <- (FINAL_DATA_Isabel$Isabel==1)*(FINAL_DATA_Isabel$Year==2013)
FINAL_DATA_Isabel$Isabel2014 <- (FINAL_DATA_Isabel$Isabel==1)*(FINAL_DATA_Isabel$Year==2014)
FINAL_DATA_Isabel$Isabel2015 <- (FINAL_DATA_Isabel$Isabel==1)*(FINAL_DATA_Isabel$Year==2015)
FINAL_DATA_Isabel$Isabel2016 <- (FINAL_DATA_Isabel$Isabel==1)*(FINAL_DATA_Isabel$Year==2016)
FINAL_DATA_Isabel$Isabel2017 <- (FINAL_DATA_Isabel$Isabel==1)*(FINAL_DATA_Isabel$Year==2017)
FINAL_DATA_Isabel$Isabel2018 <- (FINAL_DATA_Isabel$Isabel==1)*(FINAL_DATA_Isabel$Year==2018)
FINAL_DATA_Isabel$Isabel2019 <- (FINAL_DATA_Isabel$Isabel==1)*(FINAL_DATA_Isabel$Year==2019)
FINAL_DATA_Isabel$Isabel2020 <- (FINAL_DATA_Isabel$Isabel==1)*(FINAL_DATA_Isabel$Year==2020)
FINAL_DATA_Isabel$Isabel2021 <- (FINAL_DATA_Isabel$Isabel==1)*(FINAL_DATA_Isabel$Year==2021)
FINAL_DATA_Isabel$Isabel2022 <- (FINAL_DATA_Isabel$Isabel==1)*(FINAL_DATA_Isabel$Year==2022)
FINAL_DATA_Isabel$Isabel2023 <- (FINAL_DATA_Isabel$Isabel==1)*(FINAL_DATA_Isabel$Year==2023)
```


## HURRICANE KATRINA

```{r}

Katrina_subset <- official_hurr_data[official_hurr_data$HURR_NAME == "Hurricane Katrina", ]

# drop row if PROPERTY and CROPS damage are both 0
Katrina_subset <- subset(Katrina_subset, !(DAMAGE_PROPERTY_NUM == 0 & DAMAGE_CROPS_NUM == 0))

unique_fips_values <- unique(Katrina_subset$FIPS)
print(unique_fips_values)

Katrina_fips <- c(22071, 28047, 22103, 22051, 28045, 28059, 28109, 28067, 28075, 28073, 28147, 28091, 28113, 28131, 28031, 22095, 22089, 28105, 28149, 28077, 28085, 28129, 28123, 28079, 22105, 28029, 28005, 28159, 28007, 28021, 28163, 22033, 22101, 12005, 12037, 28097, 12045, 22007, 22005, 22091, 22093, 12129, 28157, 22037, 22099, 22047, 22077, 22029, 28025, 28043, 28051, 28015, 28011, 22025, 22083, 28151, 28133, 28125, 5003, 5017)


countyDistancescsv$Katrina <- ifelse(countyDistancescsv$FIPS %in% Katrina_fips, 1, 0)


countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "Katrina"), 2:(ncol(countyDistancescsv)-1))]


#Assuming 'countyDistancescsv' is your dataset
 countyDistancescsv$within100_Katrina <- apply(countyDistancescsv[, paste0("di",Katrina_fips)], 1, function(row) {
  if (any(row < 100)) {
    return(1)
  } else {
    return(0)
  }
})

countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "within100_Katrina"), 2:(ncol(countyDistancescsv)-1))]

Katrina_counties <- subset(countyDistancescsv, within100_Katrina == 1)

Katrina_counties <- Katrina_counties %>% 
  select("FIPS", "within100_Katrina", "Katrina")


joined_data_Katrina <- joined_data_1 %>%
  filter(HURR_NAME == "Hurricane Katrina")
  
Katrina_data <- left_join(Katrina_counties, joined_data_Katrina, by = "FIPS")

FINAL_DATA_Katrina <- inner_join(DATASET2, Katrina_data, by = "FIPS")

FINAL_DATA_Katrina <- FINAL_DATA_Katrina %>%
  mutate(hurr_hit = ifelse(Katrina == 1 & Year >= 2005, 1, 0))

FINAL_DATA_Katrina$Income <- as.numeric(FINAL_DATA_Katrina$Income)
FINAL_DATA_Katrina$Population <- as.numeric(FINAL_DATA_Katrina$Population)


# adding leads and lags

FINAL_DATA_Katrina <- FINAL_DATA_Katrina %>%
  mutate(
    lead4 = ifelse(Year == 2013, 1, 0),
    lead3 = ifelse(Year == 2014, 1, 0),
    lead2 = ifelse(Year == 2015, 1, 0),
    lead1 = ifelse(Year == 2016, 1, 0),
    lag0 = ifelse(Year == 2017, 1, 0),
    lag1 = ifelse(Year == 2018, 1, 0),
    lag2 = ifelse(Year == 2019, 1, 0),
    lag3 = ifelse(Year == 2020, 1, 0),
    lag4 = ifelse(Year == 2021, 1, 0),
    lag5 = ifelse(Year == 2022, 1, 0)
  )



FINAL_DATA_Katrina$DAMAGE_PROPERTY_NUM[is.na(FINAL_DATA_Katrina$DAMAGE_PROPERTY_NUM)] <- 0
FINAL_DATA_Katrina$DAMAGE_CROPS_NUM[is.na(FINAL_DATA_Katrina$DAMAGE_CROPS_NUM)] <- 0

hurr_damage_treshold <- 645000

# Create a new column indicating heavily hit or not
FINAL_DATA_Katrina$impact <- ifelse(FINAL_DATA_Katrina$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "Heavily Hit", "Not Heavily Hit")

FINAL_DATA_Katrina$impact <- ifelse(FINAL_DATA_Katrina$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "hit_hard", ifelse(FINAL_DATA_Katrina$DAMAGE_PROPERTY_NUM > 0, "hit_soft", "not_hit"))

# Create a new column "Hit_hard"
FINAL_DATA_Katrina$Hit_hard <- ifelse(FINAL_DATA_Katrina$impact == "hit_hard", 1, 0)

# Create a new column "hit_soft"
FINAL_DATA_Katrina$hit_soft <- ifelse(FINAL_DATA_Katrina$impact == "hit_soft", 1, 0)

FINAL_DATA_Katrina$not_hit <- ifelse(FINAL_DATA_Katrina$impact == "not_hit", 1, 0)

```

```{r}
# Filter the hurricane data for the specified FIPS codes
filtered_hurricanes_Katrina <- official_hurr_data %>%
  filter(FIPS %in% Katrina_fips)

# Create a new variable 'Hit_again_years' indicating how many years before or after 2018 the county was hit again

filtered_hurricanes_Katrina$Hurr_Year <- as.numeric(filtered_hurricanes_Katrina$Hurr_Year)

filtered_hurricanes_Katrina <- filtered_hurricanes_Katrina %>%
  mutate(Hit_again_years = Hurr_Year - 2005)

filtered_hurricanes_Katrina <- filtered_hurricanes_Katrina[filtered_hurricanes_Katrina$Hit_again_years != 0, ]

# Group by FIPS and keep the row with the closest value to 0 in hit_again_years
filtered_hurricanes_Katrina <- filtered_hurricanes_Katrina %>%
  group_by(FIPS) %>%
  slice(which.min(abs(Hit_again_years))) %>%
  ungroup()


# merge into FINAL_DATA_Katrina 
FINAL_DATA_Katrina <- merge(FINAL_DATA_Katrina, filtered_hurricanes_Katrina, by = "FIPS", all.x = TRUE, suffixes = c("_final", "_filtered"))

FINAL_DATA_Katrina <- FINAL_DATA_Katrina %>% 
  select("FIPS":"not_hit", "Hit_again_years")


FINAL_DATA_Katrina$hit_again_5after <- ifelse(FINAL_DATA_Katrina$Hit_again_years >= 1 & FINAL_DATA_Katrina$Hit_again_years <= 5, 1, 0)

FINAL_DATA_Katrina$hit_again_5after <- replace(FINAL_DATA_Katrina$hit_again_5after, is.na(FINAL_DATA_Katrina$hit_again_5after), 0)

```

```{r}
FINAL_DATA_Katrina$NOT_Katrina2000 <- (FINAL_DATA_Katrina$Katrina==0)*(FINAL_DATA_Katrina$Year==2000)
FINAL_DATA_Katrina$NOT_Katrina2001 <- (FINAL_DATA_Katrina$Katrina==0)*(FINAL_DATA_Katrina$Year==2001)
FINAL_DATA_Katrina$NOT_Katrina2002 <- (FINAL_DATA_Katrina$Katrina==0)*(FINAL_DATA_Katrina$Year==2002)
FINAL_DATA_Katrina$NOT_Katrina2003 <- (FINAL_DATA_Katrina$Katrina==0)*(FINAL_DATA_Katrina$Year==2003)
FINAL_DATA_Katrina$NOT_Katrina2004 <- (FINAL_DATA_Katrina$Katrina==0)*(FINAL_DATA_Katrina$Year==2004)
FINAL_DATA_Katrina$NOT_Katrina2005 <- (FINAL_DATA_Katrina$Katrina==0)*(FINAL_DATA_Katrina$Year==2005)
FINAL_DATA_Katrina$NOT_Katrina2006 <- (FINAL_DATA_Katrina$Katrina==0)*(FINAL_DATA_Katrina$Year==2006)
FINAL_DATA_Katrina$NOT_Katrina2007 <- (FINAL_DATA_Katrina$Katrina==0)*(FINAL_DATA_Katrina$Year==2007)
FINAL_DATA_Katrina$NOT_Katrina2008 <- (FINAL_DATA_Katrina$Katrina==0)*(FINAL_DATA_Katrina$Year==2008)
FINAL_DATA_Katrina$NOT_Katrina2009 <- (FINAL_DATA_Katrina$Katrina==0)*(FINAL_DATA_Katrina$Year==2009)
FINAL_DATA_Katrina$NOT_Katrina2010 <- (FINAL_DATA_Katrina$Katrina==0)*(FINAL_DATA_Katrina$Year==2010)
FINAL_DATA_Katrina$NOT_Katrina2011 <- (FINAL_DATA_Katrina$Katrina==0)*(FINAL_DATA_Katrina$Year==2011)
FINAL_DATA_Katrina$NOT_Katrina2012 <- (FINAL_DATA_Katrina$Katrina==0)*(FINAL_DATA_Katrina$Year==2012)
FINAL_DATA_Katrina$NOT_Katrina2013 <- (FINAL_DATA_Katrina$Katrina==0)*(FINAL_DATA_Katrina$Year==2013)
FINAL_DATA_Katrina$NOT_Katrina2014 <- (FINAL_DATA_Katrina$Katrina==0)*(FINAL_DATA_Katrina$Year==2014)
FINAL_DATA_Katrina$NOT_Katrina2015 <- (FINAL_DATA_Katrina$Katrina==0)*(FINAL_DATA_Katrina$Year==2015)
FINAL_DATA_Katrina$NOT_Katrina2016 <- (FINAL_DATA_Katrina$Katrina==0)*(FINAL_DATA_Katrina$Year==2016)
FINAL_DATA_Katrina$NOT_Katrina2017 <- (FINAL_DATA_Katrina$Katrina==0)*(FINAL_DATA_Katrina$Year==2017)
FINAL_DATA_Katrina$NOT_Katrina2018 <- (FINAL_DATA_Katrina$Katrina==0)*(FINAL_DATA_Katrina$Year==2018)
FINAL_DATA_Katrina$NOT_Katrina2019 <- (FINAL_DATA_Katrina$Katrina==0)*(FINAL_DATA_Katrina$Year==2019)
FINAL_DATA_Katrina$NOT_Katrina2020 <- (FINAL_DATA_Katrina$Katrina==0)*(FINAL_DATA_Katrina$Year==2020)
FINAL_DATA_Katrina$NOT_Katrina2021 <- (FINAL_DATA_Katrina$Katrina==0)*(FINAL_DATA_Katrina$Year==2021)
FINAL_DATA_Katrina$NOT_Katrina2022 <- (FINAL_DATA_Katrina$Katrina==0)*(FINAL_DATA_Katrina$Year==2022)
FINAL_DATA_Katrina$NOT_Katrina2023 <- (FINAL_DATA_Katrina$Katrina==0)*(FINAL_DATA_Katrina$Year==2023)
FINAL_DATA_Katrina$Katrina2000 <- (FINAL_DATA_Katrina$Katrina==1)*(FINAL_DATA_Katrina$Year==2000)
FINAL_DATA_Katrina$Katrina2001 <- (FINAL_DATA_Katrina$Katrina==1)*(FINAL_DATA_Katrina$Year==2001)
FINAL_DATA_Katrina$Katrina2002 <- (FINAL_DATA_Katrina$Katrina==1)*(FINAL_DATA_Katrina$Year==2002)
FINAL_DATA_Katrina$Katrina2003 <- (FINAL_DATA_Katrina$Katrina==1)*(FINAL_DATA_Katrina$Year==2003)
FINAL_DATA_Katrina$Katrina2004 <- (FINAL_DATA_Katrina$Katrina==1)*(FINAL_DATA_Katrina$Year==2004)
FINAL_DATA_Katrina$Katrina2005 <- (FINAL_DATA_Katrina$Katrina==1)*(FINAL_DATA_Katrina$Year==2005)
FINAL_DATA_Katrina$Katrina2006 <- (FINAL_DATA_Katrina$Katrina==1)*(FINAL_DATA_Katrina$Year==2006)
FINAL_DATA_Katrina$Katrina2007 <- (FINAL_DATA_Katrina$Katrina==1)*(FINAL_DATA_Katrina$Year==2007)
FINAL_DATA_Katrina$Katrina2008 <- (FINAL_DATA_Katrina$Katrina==1)*(FINAL_DATA_Katrina$Year==2008)
FINAL_DATA_Katrina$Katrina2009 <- (FINAL_DATA_Katrina$Katrina==1)*(FINAL_DATA_Katrina$Year==2009)
FINAL_DATA_Katrina$Katrina2010 <- (FINAL_DATA_Katrina$Katrina==1)*(FINAL_DATA_Katrina$Year==2010)
FINAL_DATA_Katrina$Katrina2011 <- (FINAL_DATA_Katrina$Katrina==1)*(FINAL_DATA_Katrina$Year==2011)
FINAL_DATA_Katrina$Katrina2012 <- (FINAL_DATA_Katrina$Katrina==1)*(FINAL_DATA_Katrina$Year==2012)
FINAL_DATA_Katrina$Katrina2013 <- (FINAL_DATA_Katrina$Katrina==1)*(FINAL_DATA_Katrina$Year==2013)
FINAL_DATA_Katrina$Katrina2014 <- (FINAL_DATA_Katrina$Katrina==1)*(FINAL_DATA_Katrina$Year==2014)
FINAL_DATA_Katrina$Katrina2015 <- (FINAL_DATA_Katrina$Katrina==1)*(FINAL_DATA_Katrina$Year==2015)
FINAL_DATA_Katrina$Katrina2016 <- (FINAL_DATA_Katrina$Katrina==1)*(FINAL_DATA_Katrina$Year==2016)
FINAL_DATA_Katrina$Katrina2017 <- (FINAL_DATA_Katrina$Katrina==1)*(FINAL_DATA_Katrina$Year==2017)
FINAL_DATA_Katrina$Katrina2018 <- (FINAL_DATA_Katrina$Katrina==1)*(FINAL_DATA_Katrina$Year==2018)
FINAL_DATA_Katrina$Katrina2019 <- (FINAL_DATA_Katrina$Katrina==1)*(FINAL_DATA_Katrina$Year==2019)
FINAL_DATA_Katrina$Katrina2020 <- (FINAL_DATA_Katrina$Katrina==1)*(FINAL_DATA_Katrina$Year==2020)
FINAL_DATA_Katrina$Katrina2021 <- (FINAL_DATA_Katrina$Katrina==1)*(FINAL_DATA_Katrina$Year==2021)
FINAL_DATA_Katrina$Katrina2022 <- (FINAL_DATA_Katrina$Katrina==1)*(FINAL_DATA_Katrina$Year==2022)
FINAL_DATA_Katrina$Katrina2023 <- (FINAL_DATA_Katrina$Katrina==1)*(FINAL_DATA_Katrina$Year==2023)
```

## HURRICANE GUSTAV

```{r}
Gustav_subset <- official_hurr_data[official_hurr_data$HURR_NAME == "Hurricane Gustav", ]

# drop row if PROPERTY and CROPS damage are both 0
Gustav_subset <- subset(Gustav_subset, !(DAMAGE_PROPERTY_NUM == 0 & DAMAGE_CROPS_NUM == 0))

unique_fips_values <- unique(Gustav_subset$FIPS)
print(unique_fips_values)

Gustav_fips <- c(22101, 22045, 22097, 22055, 22079, 22099, 22039, 22033, 22009, 22057, 28157, 22001, 22007, 22109, 22063, 28113, 22091, 28005, 28059, 28109, 22105, 28147, 22117, 22095, 22005, 28047, 22071, 22047, 22003, 22089, 22093, 22051, 22077, 28045, 22075, 22037, 22087, 22103)


countyDistancescsv$Gustav <- ifelse(countyDistancescsv$FIPS %in% Gustav_fips, 1, 0)


countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "Gustav"), 2:(ncol(countyDistancescsv)-1))]


#Assuming 'countyDistancescsv' is your dataset
 countyDistancescsv$within100_Gustav <- apply(countyDistancescsv[, paste0("di", Gustav_fips)], 1, function(row) {
  if (any(row < 100)) {
    return(1)
  } else {
    return(0)
  }
})

countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "within100_Gustav"), 2:(ncol(countyDistancescsv)-1))]

Gustav_counties <- subset(countyDistancescsv, within100_Gustav == 1)

Gustav_counties <- Gustav_counties %>% 
  select("FIPS", "within100_Gustav", "Gustav")


joined_data_Gustav <- joined_data_1 %>%
  filter(HURR_NAME == "Hurricane Gustav")
  
Gustav_data <- left_join(Gustav_counties, joined_data_Gustav, by = "FIPS")

FINAL_DATA_Gustav <- inner_join(DATASET2, Gustav_data, by = "FIPS")

FINAL_DATA_Gustav <- FINAL_DATA_Gustav %>%
  mutate(hurr_hit = ifelse(Gustav == 1 & Year >= 2008, 1, 0))

FINAL_DATA_Gustav$Income <- as.numeric(FINAL_DATA_Gustav$Income)
FINAL_DATA_Gustav$Population <- as.numeric(FINAL_DATA_Gustav$Population)


# adding leads and lags

FINAL_DATA_Gustav <- FINAL_DATA_Gustav %>%
  mutate(
    lead4 = ifelse(Year == 2013, 1, 0),
    lead3 = ifelse(Year == 2014, 1, 0),
    lead2 = ifelse(Year == 2015, 1, 0),
    lead1 = ifelse(Year == 2016, 1, 0),
    lag0 = ifelse(Year == 2017, 1, 0),
    lag1 = ifelse(Year == 2018, 1, 0),
    lag2 = ifelse(Year == 2019, 1, 0),
    lag3 = ifelse(Year == 2020, 1, 0),
    lag4 = ifelse(Year == 2021, 1, 0),
    lag5 = ifelse(Year == 2022, 1, 0)
  )

FINAL_DATA_Gustav$DAMAGE_PROPERTY_NUM[is.na(FINAL_DATA_Gustav$DAMAGE_PROPERTY_NUM)] <- 0
FINAL_DATA_Gustav$DAMAGE_CROPS_NUM[is.na(FINAL_DATA_Gustav$DAMAGE_CROPS_NUM)] <- 0

hurr_damage_treshold <- 645000

# Create a new column indicating heavily hit or not
FINAL_DATA_Gustav$impact <- ifelse(FINAL_DATA_Gustav$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "Heavily Hit", "Not Heavily Hit")

FINAL_DATA_Gustav$impact <- ifelse(FINAL_DATA_Gustav$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "hit_hard", ifelse(FINAL_DATA_Gustav$DAMAGE_PROPERTY_NUM > 0, "hit_soft", "not_hit"))

# Create a new column "Hit_hard"
FINAL_DATA_Gustav$Hit_hard <- ifelse(FINAL_DATA_Gustav$impact == "hit_hard", 1, 0)

# Create a new column "hit_soft"
FINAL_DATA_Gustav$hit_soft <- ifelse(FINAL_DATA_Gustav$impact == "hit_soft", 1, 0)

FINAL_DATA_Gustav$not_hit <- ifelse(FINAL_DATA_Gustav$impact == "not_hit", 1, 0)

# Filter the hurricane data for the specified FIPS codes
filtered_hurricanes_Gustav <- official_hurr_data %>%
  filter(FIPS %in% Gustav_fips)

# Create a new variable 'Hit_again_years' indicating how many years before or after 2018 the county was hit again

filtered_hurricanes_Gustav$Hurr_Year <- as.numeric(filtered_hurricanes_Gustav$Hurr_Year)

filtered_hurricanes_Gustav <- filtered_hurricanes_Gustav %>%
  mutate(Hit_again_years = Hurr_Year - 2018)

filtered_hurricanes_Gustav <- filtered_hurricanes_Gustav[filtered_hurricanes_Gustav$Hit_again_years != 0, ]

# Group by FIPS and keep the row with the closest value to 0 in hit_again_years
filtered_hurricanes_Gustav <- filtered_hurricanes_Gustav %>%
  group_by(FIPS) %>%
  slice(which.min(abs(Hit_again_years))) %>%
  ungroup()


# merge into FINAL_DATA_Gustav 
FINAL_DATA_Gustav <- merge(FINAL_DATA_Gustav, filtered_hurricanes_Gustav, by = "FIPS", all.x = TRUE, suffixes = c("_final", "_filtered"))

FINAL_DATA_Gustav <- FINAL_DATA_Gustav %>% 
  select("FIPS":"not_hit", "Hit_again_years")


FINAL_DATA_Gustav$hit_again_5after <- ifelse(FINAL_DATA_Gustav$Hit_again_years >= 1 & FINAL_DATA_Gustav$Hit_again_years <= 5, 1, 0)

FINAL_DATA_Gustav$hit_again_5after <- replace(FINAL_DATA_Gustav$hit_again_5after, is.na(FINAL_DATA_Gustav$hit_again_5after), 0)


```

```{r}
FINAL_DATA_Gustav$NOT_Gustav2000 <- (FINAL_DATA_Gustav$Gustav==0)*(FINAL_DATA_Gustav$Year==2000)
FINAL_DATA_Gustav$NOT_Gustav2001 <- (FINAL_DATA_Gustav$Gustav==0)*(FINAL_DATA_Gustav$Year==2001)
FINAL_DATA_Gustav$NOT_Gustav2002 <- (FINAL_DATA_Gustav$Gustav==0)*(FINAL_DATA_Gustav$Year==2002)
FINAL_DATA_Gustav$NOT_Gustav2003 <- (FINAL_DATA_Gustav$Gustav==0)*(FINAL_DATA_Gustav$Year==2003)
FINAL_DATA_Gustav$NOT_Gustav2004 <- (FINAL_DATA_Gustav$Gustav==0)*(FINAL_DATA_Gustav$Year==2004)
FINAL_DATA_Gustav$NOT_Gustav2005 <- (FINAL_DATA_Gustav$Gustav==0)*(FINAL_DATA_Gustav$Year==2005)
FINAL_DATA_Gustav$NOT_Gustav2006 <- (FINAL_DATA_Gustav$Gustav==0)*(FINAL_DATA_Gustav$Year==2006)
FINAL_DATA_Gustav$NOT_Gustav2007 <- (FINAL_DATA_Gustav$Gustav==0)*(FINAL_DATA_Gustav$Year==2007)
FINAL_DATA_Gustav$NOT_Gustav2008 <- (FINAL_DATA_Gustav$Gustav==0)*(FINAL_DATA_Gustav$Year==2008)
FINAL_DATA_Gustav$NOT_Gustav2009 <- (FINAL_DATA_Gustav$Gustav==0)*(FINAL_DATA_Gustav$Year==2009)
FINAL_DATA_Gustav$NOT_Gustav2010 <- (FINAL_DATA_Gustav$Gustav==0)*(FINAL_DATA_Gustav$Year==2010)
FINAL_DATA_Gustav$NOT_Gustav2011 <- (FINAL_DATA_Gustav$Gustav==0)*(FINAL_DATA_Gustav$Year==2011)
FINAL_DATA_Gustav$NOT_Gustav2012 <- (FINAL_DATA_Gustav$Gustav==0)*(FINAL_DATA_Gustav$Year==2012)
FINAL_DATA_Gustav$NOT_Gustav2013 <- (FINAL_DATA_Gustav$Gustav==0)*(FINAL_DATA_Gustav$Year==2013)
FINAL_DATA_Gustav$NOT_Gustav2014 <- (FINAL_DATA_Gustav$Gustav==0)*(FINAL_DATA_Gustav$Year==2014)
FINAL_DATA_Gustav$NOT_Gustav2015 <- (FINAL_DATA_Gustav$Gustav==0)*(FINAL_DATA_Gustav$Year==2015)
FINAL_DATA_Gustav$NOT_Gustav2016 <- (FINAL_DATA_Gustav$Gustav==0)*(FINAL_DATA_Gustav$Year==2016)
FINAL_DATA_Gustav$NOT_Gustav2017 <- (FINAL_DATA_Gustav$Gustav==0)*(FINAL_DATA_Gustav$Year==2017)
FINAL_DATA_Gustav$NOT_Gustav2018 <- (FINAL_DATA_Gustav$Gustav==0)*(FINAL_DATA_Gustav$Year==2018)
FINAL_DATA_Gustav$NOT_Gustav2019 <- (FINAL_DATA_Gustav$Gustav==0)*(FINAL_DATA_Gustav$Year==2019)
FINAL_DATA_Gustav$NOT_Gustav2020 <- (FINAL_DATA_Gustav$Gustav==0)*(FINAL_DATA_Gustav$Year==2020)
FINAL_DATA_Gustav$NOT_Gustav2021 <- (FINAL_DATA_Gustav$Gustav==0)*(FINAL_DATA_Gustav$Year==2021)
FINAL_DATA_Gustav$NOT_Gustav2022 <- (FINAL_DATA_Gustav$Gustav==0)*(FINAL_DATA_Gustav$Year==2022)
FINAL_DATA_Gustav$NOT_Gustav2023 <- (FINAL_DATA_Gustav$Gustav==0)*(FINAL_DATA_Gustav$Year==2023)
FINAL_DATA_Gustav$Gustav2000 <- (FINAL_DATA_Gustav$Gustav==1)*(FINAL_DATA_Gustav$Year==2000)
FINAL_DATA_Gustav$Gustav2001 <- (FINAL_DATA_Gustav$Gustav==1)*(FINAL_DATA_Gustav$Year==2001)
FINAL_DATA_Gustav$Gustav2002 <- (FINAL_DATA_Gustav$Gustav==1)*(FINAL_DATA_Gustav$Year==2002)
FINAL_DATA_Gustav$Gustav2003 <- (FINAL_DATA_Gustav$Gustav==1)*(FINAL_DATA_Gustav$Year==2003)
FINAL_DATA_Gustav$Gustav2004 <- (FINAL_DATA_Gustav$Gustav==1)*(FINAL_DATA_Gustav$Year==2004)
FINAL_DATA_Gustav$Gustav2005 <- (FINAL_DATA_Gustav$Gustav==1)*(FINAL_DATA_Gustav$Year==2005)
FINAL_DATA_Gustav$Gustav2006 <- (FINAL_DATA_Gustav$Gustav==1)*(FINAL_DATA_Gustav$Year==2006)
FINAL_DATA_Gustav$Gustav2007 <- (FINAL_DATA_Gustav$Gustav==1)*(FINAL_DATA_Gustav$Year==2007)
FINAL_DATA_Gustav$Gustav2008 <- (FINAL_DATA_Gustav$Gustav==1)*(FINAL_DATA_Gustav$Year==2008)
FINAL_DATA_Gustav$Gustav2009 <- (FINAL_DATA_Gustav$Gustav==1)*(FINAL_DATA_Gustav$Year==2009)
FINAL_DATA_Gustav$Gustav2010 <- (FINAL_DATA_Gustav$Gustav==1)*(FINAL_DATA_Gustav$Year==2010)
FINAL_DATA_Gustav$Gustav2011 <- (FINAL_DATA_Gustav$Gustav==1)*(FINAL_DATA_Gustav$Year==2011)
FINAL_DATA_Gustav$Gustav2012 <- (FINAL_DATA_Gustav$Gustav==1)*(FINAL_DATA_Gustav$Year==2012)
FINAL_DATA_Gustav$Gustav2013 <- (FINAL_DATA_Gustav$Gustav==1)*(FINAL_DATA_Gustav$Year==2013)
FINAL_DATA_Gustav$Gustav2014 <- (FINAL_DATA_Gustav$Gustav==1)*(FINAL_DATA_Gustav$Year==2014)
FINAL_DATA_Gustav$Gustav2015 <- (FINAL_DATA_Gustav$Gustav==1)*(FINAL_DATA_Gustav$Year==2015)
FINAL_DATA_Gustav$Gustav2016 <- (FINAL_DATA_Gustav$Gustav==1)*(FINAL_DATA_Gustav$Year==2016)
FINAL_DATA_Gustav$Gustav2017 <- (FINAL_DATA_Gustav$Gustav==1)*(FINAL_DATA_Gustav$Year==2017)
FINAL_DATA_Gustav$Gustav2018 <- (FINAL_DATA_Gustav$Gustav==1)*(FINAL_DATA_Gustav$Year==2018)
FINAL_DATA_Gustav$Gustav2019 <- (FINAL_DATA_Gustav$Gustav==1)*(FINAL_DATA_Gustav$Year==2019)
FINAL_DATA_Gustav$Gustav2020 <- (FINAL_DATA_Gustav$Gustav==1)*(FINAL_DATA_Gustav$Year==2020)
FINAL_DATA_Gustav$Gustav2021 <- (FINAL_DATA_Gustav$Gustav==1)*(FINAL_DATA_Gustav$Year==2021)
FINAL_DATA_Gustav$Gustav2022 <- (FINAL_DATA_Gustav$Gustav==1)*(FINAL_DATA_Gustav$Year==2022)
FINAL_DATA_Gustav$Gustav2023 <- (FINAL_DATA_Gustav$Gustav==1)*(FINAL_DATA_Gustav$Year==2023)
```


## HURRICANE Humberto

```{r}
Humberto_subset <- official_hurr_data[official_hurr_data$HURR_NAME == "Hurricane Humberto", ]

# drop row if PROPERTY and CROPS damage are both 0
Humberto_subset <- subset(Humberto_subset, !(DAMAGE_PROPERTY_NUM == 0 & DAMAGE_CROPS_NUM == 0))

unique_fips_values <- unique(Humberto_subset$FIPS)
print(unique_fips_values)

Humberto_fips <- c(48245, 48361, 48167, 48071, 22011, 22019)


countyDistancescsv$Humberto <- ifelse(countyDistancescsv$FIPS %in% Humberto_fips, 1, 0)


countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "Humberto"), 2:(ncol(countyDistancescsv)-1))]


#Assuming 'countyDistancescsv' is your dataset
 countyDistancescsv$within100_Humberto <- apply(countyDistancescsv[, paste0("di", Humberto_fips)], 1, function(row) {
  if (any(row < 100)) {
    return(1)
  } else {
    return(0)
  }
})

countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "within100_Humberto"), 2:(ncol(countyDistancescsv)-1))]

Humberto_counties <- subset(countyDistancescsv, within100_Humberto == 1)

Humberto_counties <- Humberto_counties %>% 
  select("FIPS", "within100_Humberto", "Humberto")


joined_data_Humberto <- joined_data_1 %>%
  filter(HURR_NAME == "Hurricane Humberto")
  
Humberto_data <- left_join(Humberto_counties, joined_data_Humberto, by = "FIPS")

FINAL_DATA_Humberto <- inner_join(DATASET2, Humberto_data, by = "FIPS")

FINAL_DATA_Humberto <- FINAL_DATA_Humberto %>%
  mutate(hurr_hit = ifelse(Humberto == 1 & Year >= 2007, 1, 0))

FINAL_DATA_Humberto$Income <- as.numeric(FINAL_DATA_Humberto$Income)
FINAL_DATA_Humberto$Population <- as.numeric(FINAL_DATA_Humberto$Population)


# adding leads and lags

FINAL_DATA_Humberto <- FINAL_DATA_Humberto %>%
  mutate(
    lead4 = ifelse(Year == 2013, 1, 0),
    lead3 = ifelse(Year == 2014, 1, 0),
    lead2 = ifelse(Year == 2015, 1, 0),
    lead1 = ifelse(Year == 2016, 1, 0),
    lag0 = ifelse(Year == 2017, 1, 0),
    lag1 = ifelse(Year == 2018, 1, 0),
    lag2 = ifelse(Year == 2019, 1, 0),
    lag3 = ifelse(Year == 2020, 1, 0),
    lag4 = ifelse(Year == 2021, 1, 0),
    lag5 = ifelse(Year == 2022, 1, 0)
  )

FINAL_DATA_Humberto$DAMAGE_PROPERTY_NUM[is.na(FINAL_DATA_Humberto$DAMAGE_PROPERTY_NUM)] <- 0
FINAL_DATA_Humberto$DAMAGE_CROPS_NUM[is.na(FINAL_DATA_Humberto$DAMAGE_CROPS_NUM)] <- 0

hurr_damage_treshold <- 645000

# Create a new column indicating heavily hit or not
FINAL_DATA_Humberto$impact <- ifelse(FINAL_DATA_Humberto$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "Heavily Hit", "Not Heavily Hit")

FINAL_DATA_Humberto$impact <- ifelse(FINAL_DATA_Humberto$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "hit_hard", ifelse(FINAL_DATA_Humberto$DAMAGE_PROPERTY_NUM > 0, "hit_soft", "not_hit"))

# Create a new column "Hit_hard"
FINAL_DATA_Humberto$Hit_hard <- ifelse(FINAL_DATA_Humberto$impact == "hit_hard", 1, 0)

# Create a new column "hit_soft"
FINAL_DATA_Humberto$hit_soft <- ifelse(FINAL_DATA_Humberto$impact == "hit_soft", 1, 0)

FINAL_DATA_Humberto$not_hit <- ifelse(FINAL_DATA_Humberto$impact == "not_hit", 1, 0)

# Filter the hurricane data for the specified FIPS codes
filtered_hurricanes_Humberto <- official_hurr_data %>%
  filter(FIPS %in% Humberto_fips)

# Create a new variable 'Hit_again_years' indicating how many years before or after 2018 the county was hit again

filtered_hurricanes_Humberto$Hurr_Year <- as.numeric(filtered_hurricanes_Humberto$Hurr_Year)

filtered_hurricanes_Humberto <- filtered_hurricanes_Humberto %>%
  mutate(Hit_again_years = Hurr_Year - 2007)

filtered_hurricanes_Humberto <- filtered_hurricanes_Humberto[filtered_hurricanes_Humberto$Hit_again_years != 0, ]

# Group by FIPS and keep the row with the closest value to 0 in hit_again_years
filtered_hurricanes_Humberto <- filtered_hurricanes_Humberto %>%
  group_by(FIPS) %>%
  slice(which.min(abs(Hit_again_years))) %>%
  ungroup()


# merge into FINAL_DATA_Humberto 
FINAL_DATA_Humberto <- merge(FINAL_DATA_Humberto, filtered_hurricanes_Humberto, by = "FIPS", all.x = TRUE, suffixes = c("_final", "_filtered"))

FINAL_DATA_Humberto <- FINAL_DATA_Humberto %>% 
  select("FIPS":"not_hit", "Hit_again_years")


FINAL_DATA_Humberto$hit_again_5after <- ifelse(FINAL_DATA_Humberto$Hit_again_years >= 1 & FINAL_DATA_Humberto$Hit_again_years <= 5, 1, 0)

FINAL_DATA_Humberto$hit_again_5after <- replace(FINAL_DATA_Humberto$hit_again_5after, is.na(FINAL_DATA_Humberto$hit_again_5after), 0)


```

```{r}
FINAL_DATA_Humberto$NOT_Humberto2000 <- (FINAL_DATA_Humberto$Humberto==0)*(FINAL_DATA_Humberto$Year==2000)
FINAL_DATA_Humberto$NOT_Humberto2001 <- (FINAL_DATA_Humberto$Humberto==0)*(FINAL_DATA_Humberto$Year==2001)
FINAL_DATA_Humberto$NOT_Humberto2002 <- (FINAL_DATA_Humberto$Humberto==0)*(FINAL_DATA_Humberto$Year==2002)
FINAL_DATA_Humberto$NOT_Humberto2003 <- (FINAL_DATA_Humberto$Humberto==0)*(FINAL_DATA_Humberto$Year==2003)
FINAL_DATA_Humberto$NOT_Humberto2004 <- (FINAL_DATA_Humberto$Humberto==0)*(FINAL_DATA_Humberto$Year==2004)
FINAL_DATA_Humberto$NOT_Humberto2005 <- (FINAL_DATA_Humberto$Humberto==0)*(FINAL_DATA_Humberto$Year==2005)
FINAL_DATA_Humberto$NOT_Humberto2006 <- (FINAL_DATA_Humberto$Humberto==0)*(FINAL_DATA_Humberto$Year==2006)
FINAL_DATA_Humberto$NOT_Humberto2007 <- (FINAL_DATA_Humberto$Humberto==0)*(FINAL_DATA_Humberto$Year==2007)
FINAL_DATA_Humberto$NOT_Humberto2008 <- (FINAL_DATA_Humberto$Humberto==0)*(FINAL_DATA_Humberto$Year==2008)
FINAL_DATA_Humberto$NOT_Humberto2009 <- (FINAL_DATA_Humberto$Humberto==0)*(FINAL_DATA_Humberto$Year==2009)
FINAL_DATA_Humberto$NOT_Humberto2010 <- (FINAL_DATA_Humberto$Humberto==0)*(FINAL_DATA_Humberto$Year==2010)
FINAL_DATA_Humberto$NOT_Humberto2011 <- (FINAL_DATA_Humberto$Humberto==0)*(FINAL_DATA_Humberto$Year==2011)
FINAL_DATA_Humberto$NOT_Humberto2012 <- (FINAL_DATA_Humberto$Humberto==0)*(FINAL_DATA_Humberto$Year==2012)
FINAL_DATA_Humberto$NOT_Humberto2013 <- (FINAL_DATA_Humberto$Humberto==0)*(FINAL_DATA_Humberto$Year==2013)
FINAL_DATA_Humberto$NOT_Humberto2014 <- (FINAL_DATA_Humberto$Humberto==0)*(FINAL_DATA_Humberto$Year==2014)
FINAL_DATA_Humberto$NOT_Humberto2015 <- (FINAL_DATA_Humberto$Humberto==0)*(FINAL_DATA_Humberto$Year==2015)
FINAL_DATA_Humberto$NOT_Humberto2016 <- (FINAL_DATA_Humberto$Humberto==0)*(FINAL_DATA_Humberto$Year==2016)
FINAL_DATA_Humberto$NOT_Humberto2017 <- (FINAL_DATA_Humberto$Humberto==0)*(FINAL_DATA_Humberto$Year==2017)
FINAL_DATA_Humberto$NOT_Humberto2018 <- (FINAL_DATA_Humberto$Humberto==0)*(FINAL_DATA_Humberto$Year==2018)
FINAL_DATA_Humberto$NOT_Humberto2019 <- (FINAL_DATA_Humberto$Humberto==0)*(FINAL_DATA_Humberto$Year==2019)
FINAL_DATA_Humberto$NOT_Humberto2020 <- (FINAL_DATA_Humberto$Humberto==0)*(FINAL_DATA_Humberto$Year==2020)
FINAL_DATA_Humberto$NOT_Humberto2021 <- (FINAL_DATA_Humberto$Humberto==0)*(FINAL_DATA_Humberto$Year==2021)
FINAL_DATA_Humberto$NOT_Humberto2022 <- (FINAL_DATA_Humberto$Humberto==0)*(FINAL_DATA_Humberto$Year==2022)
FINAL_DATA_Humberto$NOT_Humberto2023 <- (FINAL_DATA_Humberto$Humberto==0)*(FINAL_DATA_Humberto$Year==2023)
FINAL_DATA_Humberto$Humberto2000 <- (FINAL_DATA_Humberto$Humberto==1)*(FINAL_DATA_Humberto$Year==2000)
FINAL_DATA_Humberto$Humberto2001 <- (FINAL_DATA_Humberto$Humberto==1)*(FINAL_DATA_Humberto$Year==2001)
FINAL_DATA_Humberto$Humberto2002 <- (FINAL_DATA_Humberto$Humberto==1)*(FINAL_DATA_Humberto$Year==2002)
FINAL_DATA_Humberto$Humberto2003 <- (FINAL_DATA_Humberto$Humberto==1)*(FINAL_DATA_Humberto$Year==2003)
FINAL_DATA_Humberto$Humberto2004 <- (FINAL_DATA_Humberto$Humberto==1)*(FINAL_DATA_Humberto$Year==2004)
FINAL_DATA_Humberto$Humberto2005 <- (FINAL_DATA_Humberto$Humberto==1)*(FINAL_DATA_Humberto$Year==2005)
FINAL_DATA_Humberto$Humberto2006 <- (FINAL_DATA_Humberto$Humberto==1)*(FINAL_DATA_Humberto$Year==2006)
FINAL_DATA_Humberto$Humberto2007 <- (FINAL_DATA_Humberto$Humberto==1)*(FINAL_DATA_Humberto$Year==2007)
FINAL_DATA_Humberto$Humberto2008 <- (FINAL_DATA_Humberto$Humberto==1)*(FINAL_DATA_Humberto$Year==2008)
FINAL_DATA_Humberto$Humberto2009 <- (FINAL_DATA_Humberto$Humberto==1)*(FINAL_DATA_Humberto$Year==2009)
FINAL_DATA_Humberto$Humberto2010 <- (FINAL_DATA_Humberto$Humberto==1)*(FINAL_DATA_Humberto$Year==2010)
FINAL_DATA_Humberto$Humberto2011 <- (FINAL_DATA_Humberto$Humberto==1)*(FINAL_DATA_Humberto$Year==2011)
FINAL_DATA_Humberto$Humberto2012 <- (FINAL_DATA_Humberto$Humberto==1)*(FINAL_DATA_Humberto$Year==2012)
FINAL_DATA_Humberto$Humberto2013 <- (FINAL_DATA_Humberto$Humberto==1)*(FINAL_DATA_Humberto$Year==2013)
FINAL_DATA_Humberto$Humberto2014 <- (FINAL_DATA_Humberto$Humberto==1)*(FINAL_DATA_Humberto$Year==2014)
FINAL_DATA_Humberto$Humberto2015 <- (FINAL_DATA_Humberto$Humberto==1)*(FINAL_DATA_Humberto$Year==2015)
FINAL_DATA_Humberto$Humberto2016 <- (FINAL_DATA_Humberto$Humberto==1)*(FINAL_DATA_Humberto$Year==2016)
FINAL_DATA_Humberto$Humberto2017 <- (FINAL_DATA_Humberto$Humberto==1)*(FINAL_DATA_Humberto$Year==2017)
FINAL_DATA_Humberto$Humberto2018 <- (FINAL_DATA_Humberto$Humberto==1)*(FINAL_DATA_Humberto$Year==2018)
FINAL_DATA_Humberto$Humberto2019 <- (FINAL_DATA_Humberto$Humberto==1)*(FINAL_DATA_Humberto$Year==2019)
FINAL_DATA_Humberto$Humberto2020 <- (FINAL_DATA_Humberto$Humberto==1)*(FINAL_DATA_Humberto$Year==2020)
FINAL_DATA_Humberto$Humberto2021 <- (FINAL_DATA_Humberto$Humberto==1)*(FINAL_DATA_Humberto$Year==2021)
FINAL_DATA_Humberto$Humberto2022 <- (FINAL_DATA_Humberto$Humberto==1)*(FINAL_DATA_Humberto$Year==2022)
FINAL_DATA_Humberto$Humberto2023 <- (FINAL_DATA_Humberto$Humberto==1)*(FINAL_DATA_Humberto$Year==2023)
```



## HURRICANE Laura

```{r}
Laura_subset <- official_hurr_data[official_hurr_data$HURR_NAME == "Hurricane Laura", ]

# drop row if PROPERTY and CROPS damage are both 0
Laura_subset <- subset(Laura_subset, !(DAMAGE_PROPERTY_NUM == 0 & DAMAGE_CROPS_NUM == 0))

unique_fips_values <- unique(Laura_subset$FIPS)
print(unique_fips_values)

Laura_fips <- c(22019, 22051, 22011, 22115, 22023, 22079, 22003, 22039)


countyDistancescsv$Laura <- ifelse(countyDistancescsv$FIPS %in% Laura_fips, 1, 0)


countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "Laura"), 2:(ncol(countyDistancescsv)-1))]


#Assuming 'countyDistancescsv' is your dataset
 countyDistancescsv$within100_Laura <- apply(countyDistancescsv[, paste0("di", Laura_fips)], 1, function(row) {
  if (any(row < 100)) {
    return(1)
  } else {
    return(0)
  }
})

countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "within100_Laura"), 2:(ncol(countyDistancescsv)-1))]

Laura_counties <- subset(countyDistancescsv, within100_Laura == 1)

Laura_counties <- Laura_counties %>% 
  select("FIPS", "within100_Laura", "Laura")


joined_data_Laura <- joined_data_1 %>%
  filter(HURR_NAME == "Hurricane Laura")
  
Laura_data <- left_join(Laura_counties, joined_data_Laura, by = "FIPS")

FINAL_DATA_Laura <- inner_join(DATASET2, Laura_data, by = "FIPS")

FINAL_DATA_Laura <- FINAL_DATA_Laura %>%
  mutate(hurr_hit = ifelse(Laura == 1 & Year >= 2020, 1, 0))

FINAL_DATA_Laura$Income <- as.numeric(FINAL_DATA_Laura$Income)
FINAL_DATA_Laura$Population <- as.numeric(FINAL_DATA_Laura$Population)


# adding leads and lags

FINAL_DATA_Laura <- FINAL_DATA_Laura %>%
  mutate(
    lead4 = ifelse(Year == 2013, 1, 0),
    lead3 = ifelse(Year == 2014, 1, 0),
    lead2 = ifelse(Year == 2015, 1, 0),
    lead1 = ifelse(Year == 2016, 1, 0),
    lag0 = ifelse(Year == 2017, 1, 0),
    lag1 = ifelse(Year == 2018, 1, 0),
    lag2 = ifelse(Year == 2019, 1, 0),
    lag3 = ifelse(Year == 2020, 1, 0),
    lag4 = ifelse(Year == 2021, 1, 0),
    lag5 = ifelse(Year == 2022, 1, 0)
  )

FINAL_DATA_Laura$DAMAGE_PROPERTY_NUM[is.na(FINAL_DATA_Laura$DAMAGE_PROPERTY_NUM)] <- 0
FINAL_DATA_Laura$DAMAGE_CROPS_NUM[is.na(FINAL_DATA_Laura$DAMAGE_CROPS_NUM)] <- 0

hurr_damage_treshold <- 645000

# Create a new column indicating heavily hit or not
FINAL_DATA_Laura$impact <- ifelse(FINAL_DATA_Laura$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "Heavily Hit", "Not Heavily Hit")

FINAL_DATA_Laura$impact <- ifelse(FINAL_DATA_Laura$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "hit_hard", ifelse(FINAL_DATA_Laura$DAMAGE_PROPERTY_NUM > 0, "hit_soft", "not_hit"))

# Create a new column "Hit_hard"
FINAL_DATA_Laura$Hit_hard <- ifelse(FINAL_DATA_Laura$impact == "hit_hard", 1, 0)

# Create a new column "hit_soft"
FINAL_DATA_Laura$hit_soft <- ifelse(FINAL_DATA_Laura$impact == "hit_soft", 1, 0)

FINAL_DATA_Laura$not_hit <- ifelse(FINAL_DATA_Laura$impact == "not_hit", 1, 0)

# Filter the hurricane data for the specified FIPS codes
filtered_hurricanes_Laura <- official_hurr_data %>%
  filter(FIPS %in% Laura_fips)

# Create a new variable 'Hit_again_years' indicating how many years before or after 2018 the county was hit again

filtered_hurricanes_Laura$Hurr_Year <- as.numeric(filtered_hurricanes_Laura$Hurr_Year)

filtered_hurricanes_Laura <- filtered_hurricanes_Laura %>%
  mutate(Hit_again_years = Hurr_Year - 2020)

filtered_hurricanes_Laura <- filtered_hurricanes_Laura[filtered_hurricanes_Laura$Hit_again_years != 0, ]

# Group by FIPS and keep the row with the closest value to 0 in hit_again_years
filtered_hurricanes_Laura <- filtered_hurricanes_Laura %>%
  group_by(FIPS) %>%
  slice(which.min(abs(Hit_again_years))) %>%
  ungroup()


# merge into FINAL_DATA_Laura 
FINAL_DATA_Laura <- merge(FINAL_DATA_Laura, filtered_hurricanes_Laura, by = "FIPS", all.x = TRUE, suffixes = c("_final", "_filtered"))

FINAL_DATA_Laura <- FINAL_DATA_Laura %>% 
  select("FIPS":"not_hit", "Hit_again_years")


FINAL_DATA_Laura$hit_again_5after <- ifelse(FINAL_DATA_Laura$Hit_again_years >= 1 & FINAL_DATA_Laura$Hit_again_years <= 5, 1, 0)

FINAL_DATA_Laura$hit_again_5after <- replace(FINAL_DATA_Laura$hit_again_5after, is.na(FINAL_DATA_Laura$hit_again_5after), 0)


```

```{r}
FINAL_DATA_Laura$NOT_Laura2000 <- (FINAL_DATA_Laura$Laura==0)*(FINAL_DATA_Laura$Year==2000)
FINAL_DATA_Laura$NOT_Laura2001 <- (FINAL_DATA_Laura$Laura==0)*(FINAL_DATA_Laura$Year==2001)
FINAL_DATA_Laura$NOT_Laura2002 <- (FINAL_DATA_Laura$Laura==0)*(FINAL_DATA_Laura$Year==2002)
FINAL_DATA_Laura$NOT_Laura2003 <- (FINAL_DATA_Laura$Laura==0)*(FINAL_DATA_Laura$Year==2003)
FINAL_DATA_Laura$NOT_Laura2004 <- (FINAL_DATA_Laura$Laura==0)*(FINAL_DATA_Laura$Year==2004)
FINAL_DATA_Laura$NOT_Laura2005 <- (FINAL_DATA_Laura$Laura==0)*(FINAL_DATA_Laura$Year==2005)
FINAL_DATA_Laura$NOT_Laura2006 <- (FINAL_DATA_Laura$Laura==0)*(FINAL_DATA_Laura$Year==2006)
FINAL_DATA_Laura$NOT_Laura2007 <- (FINAL_DATA_Laura$Laura==0)*(FINAL_DATA_Laura$Year==2007)
FINAL_DATA_Laura$NOT_Laura2008 <- (FINAL_DATA_Laura$Laura==0)*(FINAL_DATA_Laura$Year==2008)
FINAL_DATA_Laura$NOT_Laura2009 <- (FINAL_DATA_Laura$Laura==0)*(FINAL_DATA_Laura$Year==2009)
FINAL_DATA_Laura$NOT_Laura2010 <- (FINAL_DATA_Laura$Laura==0)*(FINAL_DATA_Laura$Year==2010)
FINAL_DATA_Laura$NOT_Laura2011 <- (FINAL_DATA_Laura$Laura==0)*(FINAL_DATA_Laura$Year==2011)
FINAL_DATA_Laura$NOT_Laura2012 <- (FINAL_DATA_Laura$Laura==0)*(FINAL_DATA_Laura$Year==2012)
FINAL_DATA_Laura$NOT_Laura2013 <- (FINAL_DATA_Laura$Laura==0)*(FINAL_DATA_Laura$Year==2013)
FINAL_DATA_Laura$NOT_Laura2014 <- (FINAL_DATA_Laura$Laura==0)*(FINAL_DATA_Laura$Year==2014)
FINAL_DATA_Laura$NOT_Laura2015 <- (FINAL_DATA_Laura$Laura==0)*(FINAL_DATA_Laura$Year==2015)
FINAL_DATA_Laura$NOT_Laura2016 <- (FINAL_DATA_Laura$Laura==0)*(FINAL_DATA_Laura$Year==2016)
FINAL_DATA_Laura$NOT_Laura2017 <- (FINAL_DATA_Laura$Laura==0)*(FINAL_DATA_Laura$Year==2017)
FINAL_DATA_Laura$NOT_Laura2018 <- (FINAL_DATA_Laura$Laura==0)*(FINAL_DATA_Laura$Year==2018)
FINAL_DATA_Laura$NOT_Laura2019 <- (FINAL_DATA_Laura$Laura==0)*(FINAL_DATA_Laura$Year==2019)
FINAL_DATA_Laura$NOT_Laura2020 <- (FINAL_DATA_Laura$Laura==0)*(FINAL_DATA_Laura$Year==2020)
FINAL_DATA_Laura$NOT_Laura2021 <- (FINAL_DATA_Laura$Laura==0)*(FINAL_DATA_Laura$Year==2021)
FINAL_DATA_Laura$NOT_Laura2022 <- (FINAL_DATA_Laura$Laura==0)*(FINAL_DATA_Laura$Year==2022)
FINAL_DATA_Laura$NOT_Laura2023 <- (FINAL_DATA_Laura$Laura==0)*(FINAL_DATA_Laura$Year==2023)
FINAL_DATA_Laura$Laura2000 <- (FINAL_DATA_Laura$Laura==1)*(FINAL_DATA_Laura$Year==2000)
FINAL_DATA_Laura$Laura2001 <- (FINAL_DATA_Laura$Laura==1)*(FINAL_DATA_Laura$Year==2001)
FINAL_DATA_Laura$Laura2002 <- (FINAL_DATA_Laura$Laura==1)*(FINAL_DATA_Laura$Year==2002)
FINAL_DATA_Laura$Laura2003 <- (FINAL_DATA_Laura$Laura==1)*(FINAL_DATA_Laura$Year==2003)
FINAL_DATA_Laura$Laura2004 <- (FINAL_DATA_Laura$Laura==1)*(FINAL_DATA_Laura$Year==2004)
FINAL_DATA_Laura$Laura2005 <- (FINAL_DATA_Laura$Laura==1)*(FINAL_DATA_Laura$Year==2005)
FINAL_DATA_Laura$Laura2006 <- (FINAL_DATA_Laura$Laura==1)*(FINAL_DATA_Laura$Year==2006)
FINAL_DATA_Laura$Laura2007 <- (FINAL_DATA_Laura$Laura==1)*(FINAL_DATA_Laura$Year==2007)
FINAL_DATA_Laura$Laura2008 <- (FINAL_DATA_Laura$Laura==1)*(FINAL_DATA_Laura$Year==2008)
FINAL_DATA_Laura$Laura2009 <- (FINAL_DATA_Laura$Laura==1)*(FINAL_DATA_Laura$Year==2009)
FINAL_DATA_Laura$Laura2010 <- (FINAL_DATA_Laura$Laura==1)*(FINAL_DATA_Laura$Year==2010)
FINAL_DATA_Laura$Laura2011 <- (FINAL_DATA_Laura$Laura==1)*(FINAL_DATA_Laura$Year==2011)
FINAL_DATA_Laura$Laura2012 <- (FINAL_DATA_Laura$Laura==1)*(FINAL_DATA_Laura$Year==2012)
FINAL_DATA_Laura$Laura2013 <- (FINAL_DATA_Laura$Laura==1)*(FINAL_DATA_Laura$Year==2013)
FINAL_DATA_Laura$Laura2014 <- (FINAL_DATA_Laura$Laura==1)*(FINAL_DATA_Laura$Year==2014)
FINAL_DATA_Laura$Laura2015 <- (FINAL_DATA_Laura$Laura==1)*(FINAL_DATA_Laura$Year==2015)
FINAL_DATA_Laura$Laura2016 <- (FINAL_DATA_Laura$Laura==1)*(FINAL_DATA_Laura$Year==2016)
FINAL_DATA_Laura$Laura2017 <- (FINAL_DATA_Laura$Laura==1)*(FINAL_DATA_Laura$Year==2017)
FINAL_DATA_Laura$Laura2018 <- (FINAL_DATA_Laura$Laura==1)*(FINAL_DATA_Laura$Year==2018)
FINAL_DATA_Laura$Laura2019 <- (FINAL_DATA_Laura$Laura==1)*(FINAL_DATA_Laura$Year==2019)
FINAL_DATA_Laura$Laura2020 <- (FINAL_DATA_Laura$Laura==1)*(FINAL_DATA_Laura$Year==2020)
FINAL_DATA_Laura$Laura2021 <- (FINAL_DATA_Laura$Laura==1)*(FINAL_DATA_Laura$Year==2021)
FINAL_DATA_Laura$Laura2022 <- (FINAL_DATA_Laura$Laura==1)*(FINAL_DATA_Laura$Year==2022)
FINAL_DATA_Laura$Laura2023 <- (FINAL_DATA_Laura$Laura==1)*(FINAL_DATA_Laura$Year==2023)
```

## HURRICANE Harvey

```{r}
Harvey_subset <- official_hurr_data[official_hurr_data$HURR_NAME == "Hurricane Harvey", ]

# drop row if PROPERTY and CROPS damage are both 0
Harvey_subset <- subset(Harvey_subset, !(DAMAGE_PROPERTY_NUM == 0 & DAMAGE_CROPS_NUM == 0))

unique_fips_values <- unique(Harvey_subset$FIPS)
print(unique_fips_values)

Harvey_fips <- c(48007, 48355, 48391, 48409, 48057, 48469, 48175, 48123, 48025)


countyDistancescsv$Harvey <- ifelse(countyDistancescsv$FIPS %in% Harvey_fips, 1, 0)


countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "Harvey"), 2:(ncol(countyDistancescsv)-1))]


#Assuming 'countyDistancescsv' is your dataset
 countyDistancescsv$within100_Harvey <- apply(countyDistancescsv[, paste0("di", Harvey_fips)], 1, function(row) {
  if (any(row < 100)) {
    return(1)
  } else {
    return(0)
  }
})

countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "within100_Harvey"), 2:(ncol(countyDistancescsv)-1))]

Harvey_counties <- subset(countyDistancescsv, within100_Harvey == 1)

Harvey_counties <- Harvey_counties %>% 
  select("FIPS", "within100_Harvey", "Harvey")


joined_data_Harvey <- joined_data_1 %>%
  filter(HURR_NAME == "Hurricane Harvey")
  
Harvey_data <- left_join(Harvey_counties, joined_data_Harvey, by = "FIPS")

FINAL_DATA_Harvey <- inner_join(DATASET2, Harvey_data, by = "FIPS")

FINAL_DATA_Harvey <- FINAL_DATA_Harvey %>%
  mutate(hurr_hit = ifelse(Harvey == 1 & Year >= 2017, 1, 0))

FINAL_DATA_Harvey$Income <- as.numeric(FINAL_DATA_Harvey$Income)
FINAL_DATA_Harvey$Population <- as.numeric(FINAL_DATA_Harvey$Population)


# adding leads and lags

FINAL_DATA_Harvey <- FINAL_DATA_Harvey %>%
  mutate(
    lead4 = ifelse(Year == 2013, 1, 0),
    lead3 = ifelse(Year == 2014, 1, 0),
    lead2 = ifelse(Year == 2015, 1, 0),
    lead1 = ifelse(Year == 2016, 1, 0),
    lag0 = ifelse(Year == 2017, 1, 0),
    lag1 = ifelse(Year == 2018, 1, 0),
    lag2 = ifelse(Year == 2019, 1, 0),
    lag3 = ifelse(Year == 2020, 1, 0),
    lag4 = ifelse(Year == 2021, 1, 0),
    lag5 = ifelse(Year == 2022, 1, 0)
  )

FINAL_DATA_Harvey$DAMAGE_PROPERTY_NUM[is.na(FINAL_DATA_Harvey$DAMAGE_PROPERTY_NUM)] <- 0
FINAL_DATA_Harvey$DAMAGE_CROPS_NUM[is.na(FINAL_DATA_Harvey$DAMAGE_CROPS_NUM)] <- 0

hurr_damage_treshold <- 645000

# Create a new column indicating heavily hit or not
FINAL_DATA_Harvey$impact <- ifelse(FINAL_DATA_Harvey$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "Heavily Hit", "Not Heavily Hit")

FINAL_DATA_Harvey$impact <- ifelse(FINAL_DATA_Harvey$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "hit_hard", ifelse(FINAL_DATA_Harvey$DAMAGE_PROPERTY_NUM > 0, "hit_soft", "not_hit"))

# Create a new column "Hit_hard"
FINAL_DATA_Harvey$Hit_hard <- ifelse(FINAL_DATA_Harvey$impact == "hit_hard", 1, 0)

# Create a new column "hit_soft"
FINAL_DATA_Harvey$hit_soft <- ifelse(FINAL_DATA_Harvey$impact == "hit_soft", 1, 0)

FINAL_DATA_Harvey$not_hit <- ifelse(FINAL_DATA_Harvey$impact == "not_hit", 1, 0)

# Filter the hurricane data for the specified FIPS codes
filtered_hurricanes_Harvey <- official_hurr_data %>%
  filter(FIPS %in% Harvey_fips)

# Create a new variable 'Hit_again_years' indicating how many years before or after 2018 the county was hit again

filtered_hurricanes_Harvey$Hurr_Year <- as.numeric(filtered_hurricanes_Harvey$Hurr_Year)

filtered_hurricanes_Harvey <- filtered_hurricanes_Harvey %>%
  mutate(Hit_again_years = Hurr_Year - 2017)

filtered_hurricanes_Harvey <- filtered_hurricanes_Harvey[filtered_hurricanes_Harvey$Hit_again_years != 0, ]

# Group by FIPS and keep the row with the closest value to 0 in hit_again_years
filtered_hurricanes_Harvey <- filtered_hurricanes_Harvey %>%
  group_by(FIPS) %>%
  slice(which.min(abs(Hit_again_years))) %>%
  ungroup()


# merge into FINAL_DATA_Harvey 
FINAL_DATA_Harvey <- merge(FINAL_DATA_Harvey, filtered_hurricanes_Harvey, by = "FIPS", all.x = TRUE, suffixes = c("_final", "_filtered"))

FINAL_DATA_Harvey <- FINAL_DATA_Harvey %>% 
  select("FIPS":"not_hit", "Hit_again_years")


FINAL_DATA_Harvey$hit_again_5after <- ifelse(FINAL_DATA_Harvey$Hit_again_years >= 1 & FINAL_DATA_Harvey$Hit_again_years <= 5, 1, 0)

FINAL_DATA_Harvey$hit_again_5after <- replace(FINAL_DATA_Harvey$hit_again_5after, is.na(FINAL_DATA_Harvey$hit_again_5after), 0)


```



```{r}
FINAL_DATA_Harvey$NOT_Harvey2000 <- (FINAL_DATA_Harvey$Harvey==0)*(FINAL_DATA_Harvey$Year==2000)
FINAL_DATA_Harvey$NOT_Harvey2001 <- (FINAL_DATA_Harvey$Harvey==0)*(FINAL_DATA_Harvey$Year==2001)
FINAL_DATA_Harvey$NOT_Harvey2002 <- (FINAL_DATA_Harvey$Harvey==0)*(FINAL_DATA_Harvey$Year==2002)
FINAL_DATA_Harvey$NOT_Harvey2003 <- (FINAL_DATA_Harvey$Harvey==0)*(FINAL_DATA_Harvey$Year==2003)
FINAL_DATA_Harvey$NOT_Harvey2004 <- (FINAL_DATA_Harvey$Harvey==0)*(FINAL_DATA_Harvey$Year==2004)
FINAL_DATA_Harvey$NOT_Harvey2005 <- (FINAL_DATA_Harvey$Harvey==0)*(FINAL_DATA_Harvey$Year==2005)
FINAL_DATA_Harvey$NOT_Harvey2006 <- (FINAL_DATA_Harvey$Harvey==0)*(FINAL_DATA_Harvey$Year==2006)
FINAL_DATA_Harvey$NOT_Harvey2007 <- (FINAL_DATA_Harvey$Harvey==0)*(FINAL_DATA_Harvey$Year==2007)
FINAL_DATA_Harvey$NOT_Harvey2008 <- (FINAL_DATA_Harvey$Harvey==0)*(FINAL_DATA_Harvey$Year==2008)
FINAL_DATA_Harvey$NOT_Harvey2009 <- (FINAL_DATA_Harvey$Harvey==0)*(FINAL_DATA_Harvey$Year==2009)
FINAL_DATA_Harvey$NOT_Harvey2010 <- (FINAL_DATA_Harvey$Harvey==0)*(FINAL_DATA_Harvey$Year==2010)
FINAL_DATA_Harvey$NOT_Harvey2011 <- (FINAL_DATA_Harvey$Harvey==0)*(FINAL_DATA_Harvey$Year==2011)
FINAL_DATA_Harvey$NOT_Harvey2012 <- (FINAL_DATA_Harvey$Harvey==0)*(FINAL_DATA_Harvey$Year==2012)
FINAL_DATA_Harvey$NOT_Harvey2013 <- (FINAL_DATA_Harvey$Harvey==0)*(FINAL_DATA_Harvey$Year==2013)
FINAL_DATA_Harvey$NOT_Harvey2014 <- (FINAL_DATA_Harvey$Harvey==0)*(FINAL_DATA_Harvey$Year==2014)
FINAL_DATA_Harvey$NOT_Harvey2015 <- (FINAL_DATA_Harvey$Harvey==0)*(FINAL_DATA_Harvey$Year==2015)
FINAL_DATA_Harvey$NOT_Harvey2016 <- (FINAL_DATA_Harvey$Harvey==0)*(FINAL_DATA_Harvey$Year==2016)
FINAL_DATA_Harvey$NOT_Harvey2017 <- (FINAL_DATA_Harvey$Harvey==0)*(FINAL_DATA_Harvey$Year==2017)
FINAL_DATA_Harvey$NOT_Harvey2018 <- (FINAL_DATA_Harvey$Harvey==0)*(FINAL_DATA_Harvey$Year==2018)
FINAL_DATA_Harvey$NOT_Harvey2019 <- (FINAL_DATA_Harvey$Harvey==0)*(FINAL_DATA_Harvey$Year==2019)
FINAL_DATA_Harvey$NOT_Harvey2020 <- (FINAL_DATA_Harvey$Harvey==0)*(FINAL_DATA_Harvey$Year==2020)
FINAL_DATA_Harvey$NOT_Harvey2021 <- (FINAL_DATA_Harvey$Harvey==0)*(FINAL_DATA_Harvey$Year==2021)
FINAL_DATA_Harvey$NOT_Harvey2022 <- (FINAL_DATA_Harvey$Harvey==0)*(FINAL_DATA_Harvey$Year==2022)
FINAL_DATA_Harvey$NOT_Harvey2023 <- (FINAL_DATA_Harvey$Harvey==0)*(FINAL_DATA_Harvey$Year==2023)
FINAL_DATA_Harvey$Harvey2000 <- (FINAL_DATA_Harvey$Harvey==1)*(FINAL_DATA_Harvey$Year==2000)
FINAL_DATA_Harvey$Harvey2001 <- (FINAL_DATA_Harvey$Harvey==1)*(FINAL_DATA_Harvey$Year==2001)
FINAL_DATA_Harvey$Harvey2002 <- (FINAL_DATA_Harvey$Harvey==1)*(FINAL_DATA_Harvey$Year==2002)
FINAL_DATA_Harvey$Harvey2003 <- (FINAL_DATA_Harvey$Harvey==1)*(FINAL_DATA_Harvey$Year==2003)
FINAL_DATA_Harvey$Harvey2004 <- (FINAL_DATA_Harvey$Harvey==1)*(FINAL_DATA_Harvey$Year==2004)
FINAL_DATA_Harvey$Harvey2005 <- (FINAL_DATA_Harvey$Harvey==1)*(FINAL_DATA_Harvey$Year==2005)
FINAL_DATA_Harvey$Harvey2006 <- (FINAL_DATA_Harvey$Harvey==1)*(FINAL_DATA_Harvey$Year==2006)
FINAL_DATA_Harvey$Harvey2007 <- (FINAL_DATA_Harvey$Harvey==1)*(FINAL_DATA_Harvey$Year==2007)
FINAL_DATA_Harvey$Harvey2008 <- (FINAL_DATA_Harvey$Harvey==1)*(FINAL_DATA_Harvey$Year==2008)
FINAL_DATA_Harvey$Harvey2009 <- (FINAL_DATA_Harvey$Harvey==1)*(FINAL_DATA_Harvey$Year==2009)
FINAL_DATA_Harvey$Harvey2010 <- (FINAL_DATA_Harvey$Harvey==1)*(FINAL_DATA_Harvey$Year==2010)
FINAL_DATA_Harvey$Harvey2011 <- (FINAL_DATA_Harvey$Harvey==1)*(FINAL_DATA_Harvey$Year==2011)
FINAL_DATA_Harvey$Harvey2012 <- (FINAL_DATA_Harvey$Harvey==1)*(FINAL_DATA_Harvey$Year==2012)
FINAL_DATA_Harvey$Harvey2013 <- (FINAL_DATA_Harvey$Harvey==1)*(FINAL_DATA_Harvey$Year==2013)
FINAL_DATA_Harvey$Harvey2014 <- (FINAL_DATA_Harvey$Harvey==1)*(FINAL_DATA_Harvey$Year==2014)
FINAL_DATA_Harvey$Harvey2015 <- (FINAL_DATA_Harvey$Harvey==1)*(FINAL_DATA_Harvey$Year==2015)
FINAL_DATA_Harvey$Harvey2016 <- (FINAL_DATA_Harvey$Harvey==1)*(FINAL_DATA_Harvey$Year==2016)
FINAL_DATA_Harvey$Harvey2017 <- (FINAL_DATA_Harvey$Harvey==1)*(FINAL_DATA_Harvey$Year==2017)
FINAL_DATA_Harvey$Harvey2018 <- (FINAL_DATA_Harvey$Harvey==1)*(FINAL_DATA_Harvey$Year==2018)
FINAL_DATA_Harvey$Harvey2019 <- (FINAL_DATA_Harvey$Harvey==1)*(FINAL_DATA_Harvey$Year==2019)
FINAL_DATA_Harvey$Harvey2020 <- (FINAL_DATA_Harvey$Harvey==1)*(FINAL_DATA_Harvey$Year==2020)
FINAL_DATA_Harvey$Harvey2021 <- (FINAL_DATA_Harvey$Harvey==1)*(FINAL_DATA_Harvey$Year==2021)
FINAL_DATA_Harvey$Harvey2022 <- (FINAL_DATA_Harvey$Harvey==1)*(FINAL_DATA_Harvey$Year==2022)
FINAL_DATA_Harvey$Harvey2023 <- (FINAL_DATA_Harvey$Harvey==1)*(FINAL_DATA_Harvey$Year==2023)
```


## HURRICANE Hermine

```{r}
Hermine_subset <- official_hurr_data[official_hurr_data$HURR_NAME == "Hurricane Hermine", ]

# drop row if PROPERTY and CROPS damage are both 0
Hermine_subset <- subset(Hermine_subset, !(DAMAGE_PROPERTY_NUM == 0 & DAMAGE_CROPS_NUM == 0))

unique_fips_values <- unique(Hermine_subset$FIPS)
print(unique_fips_values)

Hermine_fips <- c(12129, 12123, 12037, 12065)


countyDistancescsv$Hermine <- ifelse(countyDistancescsv$FIPS %in% Hermine_fips, 1, 0)


countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "Hermine"), 2:(ncol(countyDistancescsv)-1))]


#Assuming 'countyDistancescsv' is your dataset
 countyDistancescsv$within100_Hermine <- apply(countyDistancescsv[, paste0("di", Hermine_fips)], 1, function(row) {
  if (any(row < 100)) {
    return(1)
  } else {
    return(0)
  }
})

countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "within100_Hermine"), 2:(ncol(countyDistancescsv)-1))]

Hermine_counties <- subset(countyDistancescsv, within100_Hermine == 1)

Hermine_counties <- Hermine_counties %>% 
  select("FIPS", "within100_Hermine", "Hermine")


joined_data_Hermine <- joined_data_1 %>%
  filter(HURR_NAME == "Hurricane Hermine")
  
Hermine_data <- left_join(Hermine_counties, joined_data_Hermine, by = "FIPS")

FINAL_DATA_Hermine <- inner_join(DATASET2, Hermine_data, by = "FIPS")

FINAL_DATA_Hermine <- FINAL_DATA_Hermine %>%
  mutate(hurr_hit = ifelse(Hermine == 1 & Year >= 2016, 1, 0))

FINAL_DATA_Hermine$Income <- as.numeric(FINAL_DATA_Hermine$Income)
FINAL_DATA_Hermine$Population <- as.numeric(FINAL_DATA_Hermine$Population)


# adding leads and lags

FINAL_DATA_Hermine <- FINAL_DATA_Hermine %>%
  mutate(
    lead4 = ifelse(Year == 2013, 1, 0),
    lead3 = ifelse(Year == 2014, 1, 0),
    lead2 = ifelse(Year == 2015, 1, 0),
    lead1 = ifelse(Year == 2016, 1, 0),
    lag0 = ifelse(Year == 2017, 1, 0),
    lag1 = ifelse(Year == 2018, 1, 0),
    lag2 = ifelse(Year == 2019, 1, 0),
    lag3 = ifelse(Year == 2020, 1, 0),
    lag4 = ifelse(Year == 2021, 1, 0),
    lag5 = ifelse(Year == 2022, 1, 0)
  )

FINAL_DATA_Hermine$DAMAGE_PROPERTY_NUM[is.na(FINAL_DATA_Hermine$DAMAGE_PROPERTY_NUM)] <- 0
FINAL_DATA_Hermine$DAMAGE_CROPS_NUM[is.na(FINAL_DATA_Hermine$DAMAGE_CROPS_NUM)] <- 0

hurr_damage_treshold <- 645000

# Create a new column indicating heavily hit or not
FINAL_DATA_Hermine$impact <- ifelse(FINAL_DATA_Hermine$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "Heavily Hit", "Not Heavily Hit")

FINAL_DATA_Hermine$impact <- ifelse(FINAL_DATA_Hermine$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "hit_hard", ifelse(FINAL_DATA_Hermine$DAMAGE_PROPERTY_NUM > 0, "hit_soft", "not_hit"))

# Create a new column "Hit_hard"
FINAL_DATA_Hermine$Hit_hard <- ifelse(FINAL_DATA_Hermine$impact == "hit_hard", 1, 0)

# Create a new column "hit_soft"
FINAL_DATA_Hermine$hit_soft <- ifelse(FINAL_DATA_Hermine$impact == "hit_soft", 1, 0)

FINAL_DATA_Hermine$not_hit <- ifelse(FINAL_DATA_Hermine$impact == "not_hit", 1, 0)

# Filter the hurricane data for the specified FIPS codes
filtered_hurricanes_Hermine <- official_hurr_data %>%
  filter(FIPS %in% Hermine_fips)

# Create a new variable 'Hit_again_years' indicating how many years before or after 2018 the county was hit again

filtered_hurricanes_Hermine$Hurr_Year <- as.numeric(filtered_hurricanes_Hermine$Hurr_Year)

filtered_hurricanes_Hermine <- filtered_hurricanes_Hermine %>%
  mutate(Hit_again_years = Hurr_Year - 2016)

filtered_hurricanes_Hermine <- filtered_hurricanes_Hermine[filtered_hurricanes_Hermine$Hit_again_years != 0, ]

# Group by FIPS and keep the row with the closest value to 0 in hit_again_years
filtered_hurricanes_Hermine <- filtered_hurricanes_Hermine %>%
  group_by(FIPS) %>%
  slice(which.min(abs(Hit_again_years))) %>%
  ungroup()


# merge into FINAL_DATA_Hermine 
FINAL_DATA_Hermine <- merge(FINAL_DATA_Hermine, filtered_hurricanes_Hermine, by = "FIPS", all.x = TRUE, suffixes = c("_final", "_filtered"))

FINAL_DATA_Hermine <- FINAL_DATA_Hermine %>% 
  select("FIPS":"not_hit", "Hit_again_years")


FINAL_DATA_Hermine$hit_again_5after <- ifelse(FINAL_DATA_Hermine$Hit_again_years >= 1 & FINAL_DATA_Hermine$Hit_again_years <= 5, 1, 0)

FINAL_DATA_Hermine$hit_again_5after <- replace(FINAL_DATA_Hermine$hit_again_5after, is.na(FINAL_DATA_Hermine$hit_again_5after), 0)


```

```{r}
FINAL_DATA_Hermine$NOT_Hermine2000 <- (FINAL_DATA_Hermine$Hermine==0)*(FINAL_DATA_Hermine$Year==2000)
FINAL_DATA_Hermine$NOT_Hermine2001 <- (FINAL_DATA_Hermine$Hermine==0)*(FINAL_DATA_Hermine$Year==2001)
FINAL_DATA_Hermine$NOT_Hermine2002 <- (FINAL_DATA_Hermine$Hermine==0)*(FINAL_DATA_Hermine$Year==2002)
FINAL_DATA_Hermine$NOT_Hermine2003 <- (FINAL_DATA_Hermine$Hermine==0)*(FINAL_DATA_Hermine$Year==2003)
FINAL_DATA_Hermine$NOT_Hermine2004 <- (FINAL_DATA_Hermine$Hermine==0)*(FINAL_DATA_Hermine$Year==2004)
FINAL_DATA_Hermine$NOT_Hermine2005 <- (FINAL_DATA_Hermine$Hermine==0)*(FINAL_DATA_Hermine$Year==2005)
FINAL_DATA_Hermine$NOT_Hermine2006 <- (FINAL_DATA_Hermine$Hermine==0)*(FINAL_DATA_Hermine$Year==2006)
FINAL_DATA_Hermine$NOT_Hermine2007 <- (FINAL_DATA_Hermine$Hermine==0)*(FINAL_DATA_Hermine$Year==2007)
FINAL_DATA_Hermine$NOT_Hermine2008 <- (FINAL_DATA_Hermine$Hermine==0)*(FINAL_DATA_Hermine$Year==2008)
FINAL_DATA_Hermine$NOT_Hermine2009 <- (FINAL_DATA_Hermine$Hermine==0)*(FINAL_DATA_Hermine$Year==2009)
FINAL_DATA_Hermine$NOT_Hermine2010 <- (FINAL_DATA_Hermine$Hermine==0)*(FINAL_DATA_Hermine$Year==2010)
FINAL_DATA_Hermine$NOT_Hermine2011 <- (FINAL_DATA_Hermine$Hermine==0)*(FINAL_DATA_Hermine$Year==2011)
FINAL_DATA_Hermine$NOT_Hermine2012 <- (FINAL_DATA_Hermine$Hermine==0)*(FINAL_DATA_Hermine$Year==2012)
FINAL_DATA_Hermine$NOT_Hermine2013 <- (FINAL_DATA_Hermine$Hermine==0)*(FINAL_DATA_Hermine$Year==2013)
FINAL_DATA_Hermine$NOT_Hermine2014 <- (FINAL_DATA_Hermine$Hermine==0)*(FINAL_DATA_Hermine$Year==2014)
FINAL_DATA_Hermine$NOT_Hermine2015 <- (FINAL_DATA_Hermine$Hermine==0)*(FINAL_DATA_Hermine$Year==2015)
FINAL_DATA_Hermine$NOT_Hermine2016 <- (FINAL_DATA_Hermine$Hermine==0)*(FINAL_DATA_Hermine$Year==2016)
FINAL_DATA_Hermine$NOT_Hermine2017 <- (FINAL_DATA_Hermine$Hermine==0)*(FINAL_DATA_Hermine$Year==2017)
FINAL_DATA_Hermine$NOT_Hermine2018 <- (FINAL_DATA_Hermine$Hermine==0)*(FINAL_DATA_Hermine$Year==2018)
FINAL_DATA_Hermine$NOT_Hermine2019 <- (FINAL_DATA_Hermine$Hermine==0)*(FINAL_DATA_Hermine$Year==2019)
FINAL_DATA_Hermine$NOT_Hermine2020 <- (FINAL_DATA_Hermine$Hermine==0)*(FINAL_DATA_Hermine$Year==2020)
FINAL_DATA_Hermine$NOT_Hermine2021 <- (FINAL_DATA_Hermine$Hermine==0)*(FINAL_DATA_Hermine$Year==2021)
FINAL_DATA_Hermine$NOT_Hermine2022 <- (FINAL_DATA_Hermine$Hermine==0)*(FINAL_DATA_Hermine$Year==2022)
FINAL_DATA_Hermine$NOT_Hermine2023 <- (FINAL_DATA_Hermine$Hermine==0)*(FINAL_DATA_Hermine$Year==2023)
FINAL_DATA_Hermine$Hermine2000 <- (FINAL_DATA_Hermine$Hermine==1)*(FINAL_DATA_Hermine$Year==2000)
FINAL_DATA_Hermine$Hermine2001 <- (FINAL_DATA_Hermine$Hermine==1)*(FINAL_DATA_Hermine$Year==2001)
FINAL_DATA_Hermine$Hermine2002 <- (FINAL_DATA_Hermine$Hermine==1)*(FINAL_DATA_Hermine$Year==2002)
FINAL_DATA_Hermine$Hermine2003 <- (FINAL_DATA_Hermine$Hermine==1)*(FINAL_DATA_Hermine$Year==2003)
FINAL_DATA_Hermine$Hermine2004 <- (FINAL_DATA_Hermine$Hermine==1)*(FINAL_DATA_Hermine$Year==2004)
FINAL_DATA_Hermine$Hermine2005 <- (FINAL_DATA_Hermine$Hermine==1)*(FINAL_DATA_Hermine$Year==2005)
FINAL_DATA_Hermine$Hermine2006 <- (FINAL_DATA_Hermine$Hermine==1)*(FINAL_DATA_Hermine$Year==2006)
FINAL_DATA_Hermine$Hermine2007 <- (FINAL_DATA_Hermine$Hermine==1)*(FINAL_DATA_Hermine$Year==2007)
FINAL_DATA_Hermine$Hermine2008 <- (FINAL_DATA_Hermine$Hermine==1)*(FINAL_DATA_Hermine$Year==2008)
FINAL_DATA_Hermine$Hermine2009 <- (FINAL_DATA_Hermine$Hermine==1)*(FINAL_DATA_Hermine$Year==2009)
FINAL_DATA_Hermine$Hermine2010 <- (FINAL_DATA_Hermine$Hermine==1)*(FINAL_DATA_Hermine$Year==2010)
FINAL_DATA_Hermine$Hermine2011 <- (FINAL_DATA_Hermine$Hermine==1)*(FINAL_DATA_Hermine$Year==2011)
FINAL_DATA_Hermine$Hermine2012 <- (FINAL_DATA_Hermine$Hermine==1)*(FINAL_DATA_Hermine$Year==2012)
FINAL_DATA_Hermine$Hermine2013 <- (FINAL_DATA_Hermine$Hermine==1)*(FINAL_DATA_Hermine$Year==2013)
FINAL_DATA_Hermine$Hermine2014 <- (FINAL_DATA_Hermine$Hermine==1)*(FINAL_DATA_Hermine$Year==2014)
FINAL_DATA_Hermine$Hermine2015 <- (FINAL_DATA_Hermine$Hermine==1)*(FINAL_DATA_Hermine$Year==2015)
FINAL_DATA_Hermine$Hermine2016 <- (FINAL_DATA_Hermine$Hermine==1)*(FINAL_DATA_Hermine$Year==2016)
FINAL_DATA_Hermine$Hermine2017 <- (FINAL_DATA_Hermine$Hermine==1)*(FINAL_DATA_Hermine$Year==2017)
FINAL_DATA_Hermine$Hermine2018 <- (FINAL_DATA_Hermine$Hermine==1)*(FINAL_DATA_Hermine$Year==2018)
FINAL_DATA_Hermine$Hermine2019 <- (FINAL_DATA_Hermine$Hermine==1)*(FINAL_DATA_Hermine$Year==2019)
FINAL_DATA_Hermine$Hermine2020 <- (FINAL_DATA_Hermine$Hermine==1)*(FINAL_DATA_Hermine$Year==2020)
FINAL_DATA_Hermine$Hermine2021 <- (FINAL_DATA_Hermine$Hermine==1)*(FINAL_DATA_Hermine$Year==2021)
FINAL_DATA_Hermine$Hermine2022 <- (FINAL_DATA_Hermine$Hermine==1)*(FINAL_DATA_Hermine$Year==2022)
FINAL_DATA_Hermine$Hermine2023 <- (FINAL_DATA_Hermine$Hermine==1)*(FINAL_DATA_Hermine$Year==2023)
```

## HURRICANE Ida

```{r}
Ida_subset <- official_hurr_data[official_hurr_data$HURR_NAME == "Hurricane Ida", ]

# drop row if PROPERTY and CROPS damage are both 0
Ida_subset <- subset(Ida_subset, !(DAMAGE_PROPERTY_NUM == 0 & DAMAGE_CROPS_NUM == 0))

unique_fips_values <- unique(Ida_subset$FIPS)
print(unique_fips_values)

Ida_fips <- c(22051, 22057, 22109, 22071, 22103, 22089, 22095, 22105, 22063, 22033, 22093, 22005, 22075, 22091, 22087, 22007, 22047, 22077, 22117, 22037, 28045, 28047, 28005, 28109, 28113, 28147, 28157)


countyDistancescsv$Ida <- ifelse(countyDistancescsv$FIPS %in% Ida_fips, 1, 0)


countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "Ida"), 2:(ncol(countyDistancescsv)-1))]


#Assuming 'countyDistancescsv' is your dataset
 countyDistancescsv$within100_Ida <- apply(countyDistancescsv[, paste0("di", Ida_fips)], 1, function(row) {
  if (any(row < 100)) {
    return(1)
  } else {
    return(0)
  }
})

countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "within100_Ida"), 2:(ncol(countyDistancescsv)-1))]

Ida_counties <- subset(countyDistancescsv, within100_Ida == 1)

Ida_counties <- Ida_counties %>% 
  select("FIPS", "within100_Ida", "Ida")


joined_data_Ida <- joined_data_1 %>%
  filter(HURR_NAME == "Hurricane Ida")
  
Ida_data <- left_join(Ida_counties, joined_data_Ida, by = "FIPS")

FINAL_DATA_Ida <- inner_join(DATASET2, Ida_data, by = "FIPS")

FINAL_DATA_Ida <- FINAL_DATA_Ida %>%
  mutate(hurr_hit = ifelse(Ida == 1 & Year >= 2021, 1, 0))

FINAL_DATA_Ida$Income <- as.numeric(FINAL_DATA_Ida$Income)
FINAL_DATA_Ida$Population <- as.numeric(FINAL_DATA_Ida$Population)


# adding leads and lags

FINAL_DATA_Ida <- FINAL_DATA_Ida %>%
  mutate(
    lead4 = ifelse(Year == 2013, 1, 0),
    lead3 = ifelse(Year == 2014, 1, 0),
    lead2 = ifelse(Year == 2015, 1, 0),
    lead1 = ifelse(Year == 2016, 1, 0),
    lag0 = ifelse(Year == 2017, 1, 0),
    lag1 = ifelse(Year == 2018, 1, 0),
    lag2 = ifelse(Year == 2019, 1, 0),
    lag3 = ifelse(Year == 2020, 1, 0),
    lag4 = ifelse(Year == 2021, 1, 0),
    lag5 = ifelse(Year == 2022, 1, 0)
  )

FINAL_DATA_Ida$DAMAGE_PROPERTY_NUM[is.na(FINAL_DATA_Ida$DAMAGE_PROPERTY_NUM)] <- 0
FINAL_DATA_Ida$DAMAGE_CROPS_NUM[is.na(FINAL_DATA_Ida$DAMAGE_CROPS_NUM)] <- 0

hurr_damage_treshold <- 645000

# Create a new column indicating heavily hit or not
FINAL_DATA_Ida$impact <- ifelse(FINAL_DATA_Ida$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "Heavily Hit", "Not Heavily Hit")

FINAL_DATA_Ida$impact <- ifelse(FINAL_DATA_Ida$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "hit_hard", ifelse(FINAL_DATA_Ida$DAMAGE_PROPERTY_NUM > 0, "hit_soft", "not_hit"))

# Create a new column "Hit_hard"
FINAL_DATA_Ida$Hit_hard <- ifelse(FINAL_DATA_Ida$impact == "hit_hard", 1, 0)

# Create a new column "hit_soft"
FINAL_DATA_Ida$hit_soft <- ifelse(FINAL_DATA_Ida$impact == "hit_soft", 1, 0)

FINAL_DATA_Ida$not_hit <- ifelse(FINAL_DATA_Ida$impact == "not_hit", 1, 0)

# Filter the hurricane data for the specified FIPS codes
filtered_hurricanes_Ida <- official_hurr_data %>%
  filter(FIPS %in% Ida_fips)

# Create a new variable 'Hit_again_years' indicating how many years before or after 2018 the county was hit again

filtered_hurricanes_Ida$Hurr_Year <- as.numeric(filtered_hurricanes_Ida$Hurr_Year)

filtered_hurricanes_Ida <- filtered_hurricanes_Ida %>%
  mutate(Hit_again_years = Hurr_Year - 2021)

filtered_hurricanes_Ida <- filtered_hurricanes_Ida[filtered_hurricanes_Ida$Hit_again_years != 0, ]

# Group by FIPS and keep the row with the closest value to 0 in hit_again_years
filtered_hurricanes_Ida <- filtered_hurricanes_Ida %>%
  group_by(FIPS) %>%
  slice(which.min(abs(Hit_again_years))) %>%
  ungroup()


# merge into FINAL_DATA_Ida 
FINAL_DATA_Ida <- merge(FINAL_DATA_Ida, filtered_hurricanes_Ida, by = "FIPS", all.x = TRUE, suffixes = c("_final", "_filtered"))

FINAL_DATA_Ida <- FINAL_DATA_Ida %>% 
  select("FIPS":"not_hit", "Hit_again_years")


FINAL_DATA_Ida$hit_again_5after <- ifelse(FINAL_DATA_Ida$Hit_again_years >= 1 & FINAL_DATA_Ida$Hit_again_years <= 5, 1, 0)

FINAL_DATA_Ida$hit_again_5after <- replace(FINAL_DATA_Ida$hit_again_5after, is.na(FINAL_DATA_Ida$hit_again_5after), 0)


```

```{r}
FINAL_DATA_Ida$NOT_Ida2000 <- (FINAL_DATA_Ida$Ida==0)*(FINAL_DATA_Ida$Year==2000)
FINAL_DATA_Ida$NOT_Ida2001 <- (FINAL_DATA_Ida$Ida==0)*(FINAL_DATA_Ida$Year==2001)
FINAL_DATA_Ida$NOT_Ida2002 <- (FINAL_DATA_Ida$Ida==0)*(FINAL_DATA_Ida$Year==2002)
FINAL_DATA_Ida$NOT_Ida2003 <- (FINAL_DATA_Ida$Ida==0)*(FINAL_DATA_Ida$Year==2003)
FINAL_DATA_Ida$NOT_Ida2004 <- (FINAL_DATA_Ida$Ida==0)*(FINAL_DATA_Ida$Year==2004)
FINAL_DATA_Ida$NOT_Ida2005 <- (FINAL_DATA_Ida$Ida==0)*(FINAL_DATA_Ida$Year==2005)
FINAL_DATA_Ida$NOT_Ida2006 <- (FINAL_DATA_Ida$Ida==0)*(FINAL_DATA_Ida$Year==2006)
FINAL_DATA_Ida$NOT_Ida2007 <- (FINAL_DATA_Ida$Ida==0)*(FINAL_DATA_Ida$Year==2007)
FINAL_DATA_Ida$NOT_Ida2008 <- (FINAL_DATA_Ida$Ida==0)*(FINAL_DATA_Ida$Year==2008)
FINAL_DATA_Ida$NOT_Ida2009 <- (FINAL_DATA_Ida$Ida==0)*(FINAL_DATA_Ida$Year==2009)
FINAL_DATA_Ida$NOT_Ida2010 <- (FINAL_DATA_Ida$Ida==0)*(FINAL_DATA_Ida$Year==2010)
FINAL_DATA_Ida$NOT_Ida2011 <- (FINAL_DATA_Ida$Ida==0)*(FINAL_DATA_Ida$Year==2011)
FINAL_DATA_Ida$NOT_Ida2012 <- (FINAL_DATA_Ida$Ida==0)*(FINAL_DATA_Ida$Year==2012)
FINAL_DATA_Ida$NOT_Ida2013 <- (FINAL_DATA_Ida$Ida==0)*(FINAL_DATA_Ida$Year==2013)
FINAL_DATA_Ida$NOT_Ida2014 <- (FINAL_DATA_Ida$Ida==0)*(FINAL_DATA_Ida$Year==2014)
FINAL_DATA_Ida$NOT_Ida2015 <- (FINAL_DATA_Ida$Ida==0)*(FINAL_DATA_Ida$Year==2015)
FINAL_DATA_Ida$NOT_Ida2016 <- (FINAL_DATA_Ida$Ida==0)*(FINAL_DATA_Ida$Year==2016)
FINAL_DATA_Ida$NOT_Ida2017 <- (FINAL_DATA_Ida$Ida==0)*(FINAL_DATA_Ida$Year==2017)
FINAL_DATA_Ida$NOT_Ida2018 <- (FINAL_DATA_Ida$Ida==0)*(FINAL_DATA_Ida$Year==2018)
FINAL_DATA_Ida$NOT_Ida2019 <- (FINAL_DATA_Ida$Ida==0)*(FINAL_DATA_Ida$Year==2019)
FINAL_DATA_Ida$NOT_Ida2020 <- (FINAL_DATA_Ida$Ida==0)*(FINAL_DATA_Ida$Year==2020)
FINAL_DATA_Ida$NOT_Ida2021 <- (FINAL_DATA_Ida$Ida==0)*(FINAL_DATA_Ida$Year==2021)
FINAL_DATA_Ida$NOT_Ida2022 <- (FINAL_DATA_Ida$Ida==0)*(FINAL_DATA_Ida$Year==2022)
FINAL_DATA_Ida$NOT_Ida2023 <- (FINAL_DATA_Ida$Ida==0)*(FINAL_DATA_Ida$Year==2023)
FINAL_DATA_Ida$Ida2000 <- (FINAL_DATA_Ida$Ida==1)*(FINAL_DATA_Ida$Year==2000)
FINAL_DATA_Ida$Ida2001 <- (FINAL_DATA_Ida$Ida==1)*(FINAL_DATA_Ida$Year==2001)
FINAL_DATA_Ida$Ida2002 <- (FINAL_DATA_Ida$Ida==1)*(FINAL_DATA_Ida$Year==2002)
FINAL_DATA_Ida$Ida2003 <- (FINAL_DATA_Ida$Ida==1)*(FINAL_DATA_Ida$Year==2003)
FINAL_DATA_Ida$Ida2004 <- (FINAL_DATA_Ida$Ida==1)*(FINAL_DATA_Ida$Year==2004)
FINAL_DATA_Ida$Ida2005 <- (FINAL_DATA_Ida$Ida==1)*(FINAL_DATA_Ida$Year==2005)
FINAL_DATA_Ida$Ida2006 <- (FINAL_DATA_Ida$Ida==1)*(FINAL_DATA_Ida$Year==2006)
FINAL_DATA_Ida$Ida2007 <- (FINAL_DATA_Ida$Ida==1)*(FINAL_DATA_Ida$Year==2007)
FINAL_DATA_Ida$Ida2008 <- (FINAL_DATA_Ida$Ida==1)*(FINAL_DATA_Ida$Year==2008)
FINAL_DATA_Ida$Ida2009 <- (FINAL_DATA_Ida$Ida==1)*(FINAL_DATA_Ida$Year==2009)
FINAL_DATA_Ida$Ida2010 <- (FINAL_DATA_Ida$Ida==1)*(FINAL_DATA_Ida$Year==2010)
FINAL_DATA_Ida$Ida2011 <- (FINAL_DATA_Ida$Ida==1)*(FINAL_DATA_Ida$Year==2011)
FINAL_DATA_Ida$Ida2012 <- (FINAL_DATA_Ida$Ida==1)*(FINAL_DATA_Ida$Year==2012)
FINAL_DATA_Ida$Ida2013 <- (FINAL_DATA_Ida$Ida==1)*(FINAL_DATA_Ida$Year==2013)
FINAL_DATA_Ida$Ida2014 <- (FINAL_DATA_Ida$Ida==1)*(FINAL_DATA_Ida$Year==2014)
FINAL_DATA_Ida$Ida2015 <- (FINAL_DATA_Ida$Ida==1)*(FINAL_DATA_Ida$Year==2015)
FINAL_DATA_Ida$Ida2016 <- (FINAL_DATA_Ida$Ida==1)*(FINAL_DATA_Ida$Year==2016)
FINAL_DATA_Ida$Ida2017 <- (FINAL_DATA_Ida$Ida==1)*(FINAL_DATA_Ida$Year==2017)
FINAL_DATA_Ida$Ida2018 <- (FINAL_DATA_Ida$Ida==1)*(FINAL_DATA_Ida$Year==2018)
FINAL_DATA_Ida$Ida2019 <- (FINAL_DATA_Ida$Ida==1)*(FINAL_DATA_Ida$Year==2019)
FINAL_DATA_Ida$Ida2020 <- (FINAL_DATA_Ida$Ida==1)*(FINAL_DATA_Ida$Year==2020)
FINAL_DATA_Ida$Ida2021 <- (FINAL_DATA_Ida$Ida==1)*(FINAL_DATA_Ida$Year==2021)
FINAL_DATA_Ida$Ida2022 <- (FINAL_DATA_Ida$Ida==1)*(FINAL_DATA_Ida$Year==2022)
FINAL_DATA_Ida$Ida2023 <- (FINAL_DATA_Ida$Ida==1)*(FINAL_DATA_Ida$Year==2023)
```


## HURRICANE Ike

```{r}
Ike_subset <- official_hurr_data[official_hurr_data$HURR_NAME == "Hurricane Ike", ]

# drop row if PROPERTY and CROPS damage are both 0
Ike_subset <- subset(Ike_subset, !(DAMAGE_PROPERTY_NUM == 0 & DAMAGE_CROPS_NUM == 0))

unique_fips_values <- unique(Ike_subset$FIPS)
print(unique_fips_values)

Ike_fips <- c(48201, 48167, 48039, 48339, 48157, 48291, 48225, 48245, 48373, 48361, 48199, 48241, 48457, 48407, 22023, 48471, 48455, 48321, 48347, 48073, 48405, 48403)


countyDistancescsv$Ike <- ifelse(countyDistancescsv$FIPS %in% Ike_fips, 1, 0)


countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "Ike"), 2:(ncol(countyDistancescsv)-1))]


#Assuming 'countyDistancescsv' is your dataset
 countyDistancescsv$within100_Ike <- apply(countyDistancescsv[, paste0("di", Ike_fips)], 1, function(row) {
  if (any(row < 100)) {
    return(1)
  } else {
    return(0)
  }
})

countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "within100_Ike"), 2:(ncol(countyDistancescsv)-1))]

Ike_counties <- subset(countyDistancescsv, within100_Ike == 1)

Ike_counties <- Ike_counties %>% 
  select("FIPS", "within100_Ike", "Ike")


joined_data_Ike <- joined_data_1 %>%
  filter(HURR_NAME == "Hurricane Ike")
  
Ike_data <- left_join(Ike_counties, joined_data_Ike, by = "FIPS")

FINAL_DATA_Ike <- inner_join(DATASET2, Ike_data, by = "FIPS")

FINAL_DATA_Ike <- FINAL_DATA_Ike %>%
  mutate(hurr_hit = ifelse(Ike == 1 & Year >= 2008, 1, 0))

FINAL_DATA_Ike$Income <- as.numeric(FINAL_DATA_Ike$Income)
FINAL_DATA_Ike$Population <- as.numeric(FINAL_DATA_Ike$Population)


# adding leads and lags

FINAL_DATA_Ike <- FINAL_DATA_Ike %>%
  mutate(
    lead4 = ifelse(Year == 2013, 1, 0),
    lead3 = ifelse(Year == 2014, 1, 0),
    lead2 = ifelse(Year == 2015, 1, 0),
    lead1 = ifelse(Year == 2016, 1, 0),
    lag0 = ifelse(Year == 2017, 1, 0),
    lag1 = ifelse(Year == 2018, 1, 0),
    lag2 = ifelse(Year == 2019, 1, 0),
    lag3 = ifelse(Year == 2020, 1, 0),
    lag4 = ifelse(Year == 2021, 1, 0),
    lag5 = ifelse(Year == 2022, 1, 0)
  )

FINAL_DATA_Ike$DAMAGE_PROPERTY_NUM[is.na(FINAL_DATA_Ike$DAMAGE_PROPERTY_NUM)] <- 0
FINAL_DATA_Ike$DAMAGE_CROPS_NUM[is.na(FINAL_DATA_Ike$DAMAGE_CROPS_NUM)] <- 0

hurr_damage_treshold <- 645000

# Create a new column indicating heavily hit or not
FINAL_DATA_Ike$impact <- ifelse(FINAL_DATA_Ike$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "Heavily Hit", "Not Heavily Hit")

FINAL_DATA_Ike$impact <- ifelse(FINAL_DATA_Ike$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "hit_hard", ifelse(FINAL_DATA_Ike$DAMAGE_PROPERTY_NUM > 0, "hit_soft", "not_hit"))

# Create a new column "Hit_hard"
FINAL_DATA_Ike$Hit_hard <- ifelse(FINAL_DATA_Ike$impact == "hit_hard", 1, 0)

# Create a new column "hit_soft"
FINAL_DATA_Ike$hit_soft <- ifelse(FINAL_DATA_Ike$impact == "hit_soft", 1, 0)

FINAL_DATA_Ike$not_hit <- ifelse(FINAL_DATA_Ike$impact == "not_hit", 1, 0)

# Filter the hurricane data for the specified FIPS codes
filtered_hurricanes_Ike <- official_hurr_data %>%
  filter(FIPS %in% Ike_fips)

# Create a new variable 'Hit_again_years' indicating how many years before or after 2018 the county was hit again

filtered_hurricanes_Ike$Hurr_Year <- as.numeric(filtered_hurricanes_Ike$Hurr_Year)

filtered_hurricanes_Ike <- filtered_hurricanes_Ike %>%
  mutate(Hit_again_years = Hurr_Year - 2008)

filtered_hurricanes_Ike <- filtered_hurricanes_Ike[filtered_hurricanes_Ike$Hit_again_years != 0, ]

# Group by FIPS and keep the row with the closest value to 0 in hit_again_years
filtered_hurricanes_Ike <- filtered_hurricanes_Ike %>%
  group_by(FIPS) %>%
  slice(which.min(abs(Hit_again_years))) %>%
  ungroup()


# merge into FINAL_DATA_Ike 
FINAL_DATA_Ike <- merge(FINAL_DATA_Ike, filtered_hurricanes_Ike, by = "FIPS", all.x = TRUE, suffixes = c("_final", "_filtered"))

FINAL_DATA_Ike <- FINAL_DATA_Ike %>% 
  select("FIPS":"not_hit", "Hit_again_years")


FINAL_DATA_Ike$hit_again_5after <- ifelse(FINAL_DATA_Ike$Hit_again_years >= 1 & FINAL_DATA_Ike$Hit_again_years <= 5, 1, 0)

FINAL_DATA_Ike$hit_again_5after <- replace(FINAL_DATA_Ike$hit_again_5after, is.na(FINAL_DATA_Ike$hit_again_5after), 0)


```


```{r}
FINAL_DATA_Ike$NOT_Ike2000 <- (FINAL_DATA_Ike$Ike==0)*(FINAL_DATA_Ike$Year==2000)
FINAL_DATA_Ike$NOT_Ike2001 <- (FINAL_DATA_Ike$Ike==0)*(FINAL_DATA_Ike$Year==2001)
FINAL_DATA_Ike$NOT_Ike2002 <- (FINAL_DATA_Ike$Ike==0)*(FINAL_DATA_Ike$Year==2002)
FINAL_DATA_Ike$NOT_Ike2003 <- (FINAL_DATA_Ike$Ike==0)*(FINAL_DATA_Ike$Year==2003)
FINAL_DATA_Ike$NOT_Ike2004 <- (FINAL_DATA_Ike$Ike==0)*(FINAL_DATA_Ike$Year==2004)
FINAL_DATA_Ike$NOT_Ike2005 <- (FINAL_DATA_Ike$Ike==0)*(FINAL_DATA_Ike$Year==2005)
FINAL_DATA_Ike$NOT_Ike2006 <- (FINAL_DATA_Ike$Ike==0)*(FINAL_DATA_Ike$Year==2006)
FINAL_DATA_Ike$NOT_Ike2007 <- (FINAL_DATA_Ike$Ike==0)*(FINAL_DATA_Ike$Year==2007)

FINAL_DATA_Ike$NOT_Ike2009 <- (FINAL_DATA_Ike$Ike==0)*(FINAL_DATA_Ike$Year==2009)
FINAL_DATA_Ike$NOT_Ike2010 <- (FINAL_DATA_Ike$Ike==0)*(FINAL_DATA_Ike$Year==2010)
FINAL_DATA_Ike$NOT_Ike2011 <- (FINAL_DATA_Ike$Ike==0)*(FINAL_DATA_Ike$Year==2011)
FINAL_DATA_Ike$NOT_Ike2012 <- (FINAL_DATA_Ike$Ike==0)*(FINAL_DATA_Ike$Year==2012)
FINAL_DATA_Ike$NOT_Ike2013 <- (FINAL_DATA_Ike$Ike==0)*(FINAL_DATA_Ike$Year==2013)
FINAL_DATA_Ike$NOT_Ike2014 <- (FINAL_DATA_Ike$Ike==0)*(FINAL_DATA_Ike$Year==2014)
FINAL_DATA_Ike$NOT_Ike2015 <- (FINAL_DATA_Ike$Ike==0)*(FINAL_DATA_Ike$Year==2015)
FINAL_DATA_Ike$NOT_Ike2016 <- (FINAL_DATA_Ike$Ike==0)*(FINAL_DATA_Ike$Year==2016)
FINAL_DATA_Ike$NOT_Ike2017 <- (FINAL_DATA_Ike$Ike==0)*(FINAL_DATA_Ike$Year==2017)
FINAL_DATA_Ike$NOT_Ike2018 <- (FINAL_DATA_Ike$Ike==0)*(FINAL_DATA_Ike$Year==2018)
FINAL_DATA_Ike$NOT_Ike2019 <- (FINAL_DATA_Ike$Ike==0)*(FINAL_DATA_Ike$Year==2019)
FINAL_DATA_Ike$NOT_Ike2020 <- (FINAL_DATA_Ike$Ike==0)*(FINAL_DATA_Ike$Year==2020)
FINAL_DATA_Ike$NOT_Ike2021 <- (FINAL_DATA_Ike$Ike==0)*(FINAL_DATA_Ike$Year==2021)
FINAL_DATA_Ike$NOT_Ike2022 <- (FINAL_DATA_Ike$Ike==0)*(FINAL_DATA_Ike$Year==2022)
FINAL_DATA_Ike$NOT_Ike2023 <- (FINAL_DATA_Ike$Ike==0)*(FINAL_DATA_Ike$Year==2023)
FINAL_DATA_Ike$Ike2000 <- (FINAL_DATA_Ike$Ike==1)*(FINAL_DATA_Ike$Year==2000)
FINAL_DATA_Ike$Ike2001 <- (FINAL_DATA_Ike$Ike==1)*(FINAL_DATA_Ike$Year==2001)
FINAL_DATA_Ike$Ike2002 <- (FINAL_DATA_Ike$Ike==1)*(FINAL_DATA_Ike$Year==2002)
FINAL_DATA_Ike$Ike2003 <- (FINAL_DATA_Ike$Ike==1)*(FINAL_DATA_Ike$Year==2003)
FINAL_DATA_Ike$Ike2004 <- (FINAL_DATA_Ike$Ike==1)*(FINAL_DATA_Ike$Year==2004)
FINAL_DATA_Ike$Ike2005 <- (FINAL_DATA_Ike$Ike==1)*(FINAL_DATA_Ike$Year==2005)
FINAL_DATA_Ike$Ike2006 <- (FINAL_DATA_Ike$Ike==1)*(FINAL_DATA_Ike$Year==2006)
FINAL_DATA_Ike$Ike2007 <- (FINAL_DATA_Ike$Ike==1)*(FINAL_DATA_Ike$Year==2007)
FINAL_DATA_Ike$Ike2008 <- (FINAL_DATA_Ike$Ike==1)*(FINAL_DATA_Ike$Year==2008)
FINAL_DATA_Ike$Ike2009 <- (FINAL_DATA_Ike$Ike==1)*(FINAL_DATA_Ike$Year==2009)
FINAL_DATA_Ike$Ike2010 <- (FINAL_DATA_Ike$Ike==1)*(FINAL_DATA_Ike$Year==2010)
FINAL_DATA_Ike$Ike2011 <- (FINAL_DATA_Ike$Ike==1)*(FINAL_DATA_Ike$Year==2011)
FINAL_DATA_Ike$Ike2012 <- (FINAL_DATA_Ike$Ike==1)*(FINAL_DATA_Ike$Year==2012)
FINAL_DATA_Ike$Ike2013 <- (FINAL_DATA_Ike$Ike==1)*(FINAL_DATA_Ike$Year==2013)
FINAL_DATA_Ike$Ike2014 <- (FINAL_DATA_Ike$Ike==1)*(FINAL_DATA_Ike$Year==2014)
FINAL_DATA_Ike$Ike2015 <- (FINAL_DATA_Ike$Ike==1)*(FINAL_DATA_Ike$Year==2015)
FINAL_DATA_Ike$Ike2016 <- (FINAL_DATA_Ike$Ike==1)*(FINAL_DATA_Ike$Year==2016)
FINAL_DATA_Ike$Ike2017 <- (FINAL_DATA_Ike$Ike==1)*(FINAL_DATA_Ike$Year==2017)
FINAL_DATA_Ike$Ike2018 <- (FINAL_DATA_Ike$Ike==1)*(FINAL_DATA_Ike$Year==2018)
FINAL_DATA_Ike$Ike2019 <- (FINAL_DATA_Ike$Ike==1)*(FINAL_DATA_Ike$Year==2019)
FINAL_DATA_Ike$Ike2020 <- (FINAL_DATA_Ike$Ike==1)*(FINAL_DATA_Ike$Year==2020)
FINAL_DATA_Ike$Ike2021 <- (FINAL_DATA_Ike$Ike==1)*(FINAL_DATA_Ike$Year==2021)
FINAL_DATA_Ike$Ike2022 <- (FINAL_DATA_Ike$Ike==1)*(FINAL_DATA_Ike$Year==2022)
FINAL_DATA_Ike$Ike2023 <- (FINAL_DATA_Ike$Ike==1)*(FINAL_DATA_Ike$Year==2023)
```


## HURRICANE Irene

```{r}
Irene_subset <- official_hurr_data[official_hurr_data$HURR_NAME == "Hurricane Irene", ]

# drop row if PROPERTY and CROPS damage are both 0
Irene_subset <- subset(Irene_subset, !(DAMAGE_PROPERTY_NUM == 0 & DAMAGE_CROPS_NUM == 0))

unique_fips_values <- unique(Irene_subset$FIPS)
print(unique_fips_values)

Irene_fips <- c(37031, 37055, 37095, 37177, 37013, 37049, 37137, 37053, 37029, 37139)


countyDistancescsv$Irene <- ifelse(countyDistancescsv$FIPS %in% Irene_fips, 1, 0)


countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "Irene"), 2:(ncol(countyDistancescsv)-1))]


#Assuming 'countyDistancescsv' is your dataset
 countyDistancescsv$within100_Irene <- apply(countyDistancescsv[, paste0("di", Irene_fips)], 1, function(row) {
  if (any(row < 100)) {
    return(1)
  } else {
    return(0)
  }
})

countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "within100_Irene"), 2:(ncol(countyDistancescsv)-1))]

Irene_counties <- subset(countyDistancescsv, within100_Irene == 1)

Irene_counties <- Irene_counties %>% 
  select("FIPS", "within100_Irene", "Irene")


joined_data_Irene <- joined_data_1 %>%
  filter(HURR_NAME == "Hurricane Irene")
  
Irene_data <- left_join(Irene_counties, joined_data_Irene, by = "FIPS")

FINAL_DATA_Irene <- inner_join(DATASET2, Irene_data, by = "FIPS")

FINAL_DATA_Irene <- FINAL_DATA_Irene %>%
  mutate(hurr_hit = ifelse(Irene == 1 & Year >= 2011, 1, 0))

FINAL_DATA_Irene$Income <- as.numeric(FINAL_DATA_Irene$Income)
FINAL_DATA_Irene$Population <- as.numeric(FINAL_DATA_Irene$Population)


# adding leads and lags

FINAL_DATA_Irene <- FINAL_DATA_Irene %>%
  mutate(
    lead4 = ifelse(Year == 2013, 1, 0),
    lead3 = ifelse(Year == 2014, 1, 0),
    lead2 = ifelse(Year == 2015, 1, 0),
    lead1 = ifelse(Year == 2016, 1, 0),
    lag0 = ifelse(Year == 2017, 1, 0),
    lag1 = ifelse(Year == 2018, 1, 0),
    lag2 = ifelse(Year == 2019, 1, 0),
    lag3 = ifelse(Year == 2020, 1, 0),
    lag4 = ifelse(Year == 2021, 1, 0),
    lag5 = ifelse(Year == 2022, 1, 0)
  )

FINAL_DATA_Irene$DAMAGE_PROPERTY_NUM[is.na(FINAL_DATA_Irene$DAMAGE_PROPERTY_NUM)] <- 0
FINAL_DATA_Irene$DAMAGE_CROPS_NUM[is.na(FINAL_DATA_Irene$DAMAGE_CROPS_NUM)] <- 0

hurr_damage_treshold <- 645000

# Create a new column indicating heavily hit or not
FINAL_DATA_Irene$impact <- ifelse(FINAL_DATA_Irene$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "Heavily Hit", "Not Heavily Hit")

FINAL_DATA_Irene$impact <- ifelse(FINAL_DATA_Irene$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "hit_hard", ifelse(FINAL_DATA_Irene$DAMAGE_PROPERTY_NUM > 0, "hit_soft", "not_hit"))

# Create a new column "Hit_hard"
FINAL_DATA_Irene$Hit_hard <- ifelse(FINAL_DATA_Irene$impact == "hit_hard", 1, 0)

# Create a new column "hit_soft"
FINAL_DATA_Irene$hit_soft <- ifelse(FINAL_DATA_Irene$impact == "hit_soft", 1, 0)

FINAL_DATA_Irene$not_hit <- ifelse(FINAL_DATA_Irene$impact == "not_hit", 1, 0)

# Filter the hurricane data for the specified FIPS codes
filtered_hurricanes_Irene <- official_hurr_data %>%
  filter(FIPS %in% Irene_fips)

# Create a new variable 'Hit_again_years' indicating how many years before or after 2018 the county was hit again

filtered_hurricanes_Irene$Hurr_Year <- as.numeric(filtered_hurricanes_Irene$Hurr_Year)

filtered_hurricanes_Irene <- filtered_hurricanes_Irene %>%
  mutate(Hit_again_years = Hurr_Year - 2011)

filtered_hurricanes_Irene <- filtered_hurricanes_Irene[filtered_hurricanes_Irene$Hit_again_years != 0, ]

# Group by FIPS and keep the row with the closest value to 0 in hit_again_years
filtered_hurricanes_Irene <- filtered_hurricanes_Irene %>%
  group_by(FIPS) %>%
  slice(which.min(abs(Hit_again_years))) %>%
  ungroup()


# merge into FINAL_DATA_Irene 
FINAL_DATA_Irene <- merge(FINAL_DATA_Irene, filtered_hurricanes_Irene, by = "FIPS", all.x = TRUE, suffixes = c("_final", "_filtered"))

FINAL_DATA_Irene <- FINAL_DATA_Irene %>% 
  select("FIPS":"not_hit", "Hit_again_years")


FINAL_DATA_Irene$hit_again_5after <- ifelse(FINAL_DATA_Irene$Hit_again_years >= 1 & FINAL_DATA_Irene$Hit_again_years <= 5, 1, 0)

FINAL_DATA_Irene$hit_again_5after <- replace(FINAL_DATA_Irene$hit_again_5after, is.na(FINAL_DATA_Irene$hit_again_5after), 0)


```



```{r}
FINAL_DATA_Irene$NOT_Irene2000 <- (FINAL_DATA_Irene$Irene==0)*(FINAL_DATA_Irene$Year==2000)
FINAL_DATA_Irene$NOT_Irene2001 <- (FINAL_DATA_Irene$Irene==0)*(FINAL_DATA_Irene$Year==2001)
FINAL_DATA_Irene$NOT_Irene2002 <- (FINAL_DATA_Irene$Irene==0)*(FINAL_DATA_Irene$Year==2002)
FINAL_DATA_Irene$NOT_Irene2003 <- (FINAL_DATA_Irene$Irene==0)*(FINAL_DATA_Irene$Year==2003)
FINAL_DATA_Irene$NOT_Irene2004 <- (FINAL_DATA_Irene$Irene==0)*(FINAL_DATA_Irene$Year==2004)
FINAL_DATA_Irene$NOT_Irene2005 <- (FINAL_DATA_Irene$Irene==0)*(FINAL_DATA_Irene$Year==2005)
FINAL_DATA_Irene$NOT_Irene2006 <- (FINAL_DATA_Irene$Irene==0)*(FINAL_DATA_Irene$Year==2006)
FINAL_DATA_Irene$NOT_Irene2007 <- (FINAL_DATA_Irene$Irene==0)*(FINAL_DATA_Irene$Year==2007)
FINAL_DATA_Irene$NOT_Irene2008 <- (FINAL_DATA_Irene$Irene==0)*(FINAL_DATA_Irene$Year==2008)
FINAL_DATA_Irene$NOT_Irene2009 <- (FINAL_DATA_Irene$Irene==0)*(FINAL_DATA_Irene$Year==2009)
FINAL_DATA_Irene$NOT_Irene2010 <- (FINAL_DATA_Irene$Irene==0)*(FINAL_DATA_Irene$Year==2010)
FINAL_DATA_Irene$NOT_Irene2011 <- (FINAL_DATA_Irene$Irene==0)*(FINAL_DATA_Irene$Year==2011)
FINAL_DATA_Irene$NOT_Irene2012 <- (FINAL_DATA_Irene$Irene==0)*(FINAL_DATA_Irene$Year==2012)
FINAL_DATA_Irene$NOT_Irene2013 <- (FINAL_DATA_Irene$Irene==0)*(FINAL_DATA_Irene$Year==2013)
FINAL_DATA_Irene$NOT_Irene2014 <- (FINAL_DATA_Irene$Irene==0)*(FINAL_DATA_Irene$Year==2014)
FINAL_DATA_Irene$NOT_Irene2015 <- (FINAL_DATA_Irene$Irene==0)*(FINAL_DATA_Irene$Year==2015)
FINAL_DATA_Irene$NOT_Irene2016 <- (FINAL_DATA_Irene$Irene==0)*(FINAL_DATA_Irene$Year==2016)
FINAL_DATA_Irene$NOT_Irene2017 <- (FINAL_DATA_Irene$Irene==0)*(FINAL_DATA_Irene$Year==2017)
FINAL_DATA_Irene$NOT_Irene2018 <- (FINAL_DATA_Irene$Irene==0)*(FINAL_DATA_Irene$Year==2018)
FINAL_DATA_Irene$NOT_Irene2019 <- (FINAL_DATA_Irene$Irene==0)*(FINAL_DATA_Irene$Year==2019)
FINAL_DATA_Irene$NOT_Irene2020 <- (FINAL_DATA_Irene$Irene==0)*(FINAL_DATA_Irene$Year==2020)
FINAL_DATA_Irene$NOT_Irene2021 <- (FINAL_DATA_Irene$Irene==0)*(FINAL_DATA_Irene$Year==2021)
FINAL_DATA_Irene$NOT_Irene2022 <- (FINAL_DATA_Irene$Irene==0)*(FINAL_DATA_Irene$Year==2022)
FINAL_DATA_Irene$NOT_Irene2023 <- (FINAL_DATA_Irene$Irene==0)*(FINAL_DATA_Irene$Year==2023)
FINAL_DATA_Irene$Irene2000 <- (FINAL_DATA_Irene$Irene==1)*(FINAL_DATA_Irene$Year==2000)
FINAL_DATA_Irene$Irene2001 <- (FINAL_DATA_Irene$Irene==1)*(FINAL_DATA_Irene$Year==2001)
FINAL_DATA_Irene$Irene2002 <- (FINAL_DATA_Irene$Irene==1)*(FINAL_DATA_Irene$Year==2002)
FINAL_DATA_Irene$Irene2003 <- (FINAL_DATA_Irene$Irene==1)*(FINAL_DATA_Irene$Year==2003)
FINAL_DATA_Irene$Irene2004 <- (FINAL_DATA_Irene$Irene==1)*(FINAL_DATA_Irene$Year==2004)
FINAL_DATA_Irene$Irene2005 <- (FINAL_DATA_Irene$Irene==1)*(FINAL_DATA_Irene$Year==2005)
FINAL_DATA_Irene$Irene2006 <- (FINAL_DATA_Irene$Irene==1)*(FINAL_DATA_Irene$Year==2006)
FINAL_DATA_Irene$Irene2007 <- (FINAL_DATA_Irene$Irene==1)*(FINAL_DATA_Irene$Year==2007)
FINAL_DATA_Irene$Irene2008 <- (FINAL_DATA_Irene$Irene==1)*(FINAL_DATA_Irene$Year==2008)
FINAL_DATA_Irene$Irene2009 <- (FINAL_DATA_Irene$Irene==1)*(FINAL_DATA_Irene$Year==2009)
FINAL_DATA_Irene$Irene2010 <- (FINAL_DATA_Irene$Irene==1)*(FINAL_DATA_Irene$Year==2010)
FINAL_DATA_Irene$Irene2011 <- (FINAL_DATA_Irene$Irene==1)*(FINAL_DATA_Irene$Year==2011)
FINAL_DATA_Irene$Irene2012 <- (FINAL_DATA_Irene$Irene==1)*(FINAL_DATA_Irene$Year==2012)
FINAL_DATA_Irene$Irene2013 <- (FINAL_DATA_Irene$Irene==1)*(FINAL_DATA_Irene$Year==2013)
FINAL_DATA_Irene$Irene2014 <- (FINAL_DATA_Irene$Irene==1)*(FINAL_DATA_Irene$Year==2014)
FINAL_DATA_Irene$Irene2015 <- (FINAL_DATA_Irene$Irene==1)*(FINAL_DATA_Irene$Year==2015)
FINAL_DATA_Irene$Irene2016 <- (FINAL_DATA_Irene$Irene==1)*(FINAL_DATA_Irene$Year==2016)
FINAL_DATA_Irene$Irene2017 <- (FINAL_DATA_Irene$Irene==1)*(FINAL_DATA_Irene$Year==2017)
FINAL_DATA_Irene$Irene2018 <- (FINAL_DATA_Irene$Irene==1)*(FINAL_DATA_Irene$Year==2018)
FINAL_DATA_Irene$Irene2019 <- (FINAL_DATA_Irene$Irene==1)*(FINAL_DATA_Irene$Year==2019)
FINAL_DATA_Irene$Irene2020 <- (FINAL_DATA_Irene$Irene==1)*(FINAL_DATA_Irene$Year==2020)
FINAL_DATA_Irene$Irene2021 <- (FINAL_DATA_Irene$Irene==1)*(FINAL_DATA_Irene$Year==2021)
FINAL_DATA_Irene$Irene2022 <- (FINAL_DATA_Irene$Irene==1)*(FINAL_DATA_Irene$Year==2022)
FINAL_DATA_Irene$Irene2023 <- (FINAL_DATA_Irene$Irene==1)*(FINAL_DATA_Irene$Year==2023)
```


## HURRICANE Ivan

```{r}
Ivan_subset <- official_hurr_data[official_hurr_data$HURR_NAME == "Hurricane Ivan", ]

# drop row if PROPERTY and CROPS damage are both 0
Ivan_subset <- subset(Ivan_subset, !(DAMAGE_PROPERTY_NUM == 0 & DAMAGE_CROPS_NUM == 0))

unique_fips_values <- unique(Ivan_subset$FIPS)
print(unique_fips_values)

Ivan_fips <- c(12033, 1097, 12045, 12005, 12131, 22075, 28059, 12063, 12013, 12133, 28047, 22087, 22051, 28045, 12059, 12073, 22057, 22071, 22103, 28039, 28109, 12037, 12129, 12065, 12077, 28023, 28025, 28031, 28035, 28061, 28067, 28069, 28073, 28075, 28087, 28091, 28099, 28101)


countyDistancescsv$Ivan <- ifelse(countyDistancescsv$FIPS %in% Ivan_fips, 1, 0)


countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "Ivan"), 2:(ncol(countyDistancescsv)-1))]


#Assuming 'countyDistancescsv' is your dataset
 countyDistancescsv$within100_Ivan <- apply(countyDistancescsv[, paste0("di", Ivan_fips)], 1, function(row) {
  if (any(row < 100)) {
    return(1)
  } else {
    return(0)
  }
})

countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "within100_Ivan"), 2:(ncol(countyDistancescsv)-1))]

Ivan_counties <- subset(countyDistancescsv, within100_Ivan == 1)

Ivan_counties <- Ivan_counties %>% 
  select("FIPS", "within100_Ivan", "Ivan")


joined_data_Ivan <- joined_data_1 %>%
  filter(HURR_NAME == "Hurricane Ivan")
  
Ivan_data <- left_join(Ivan_counties, joined_data_Ivan, by = "FIPS")

FINAL_DATA_Ivan <- inner_join(DATASET2, Ivan_data, by = "FIPS")

FINAL_DATA_Ivan <- FINAL_DATA_Ivan %>%
  mutate(hurr_hit = ifelse(Ivan == 1 & Year >= 2004, 1, 0))

FINAL_DATA_Ivan$Income <- as.numeric(FINAL_DATA_Ivan$Income)
FINAL_DATA_Ivan$Population <- as.numeric(FINAL_DATA_Ivan$Population)


# adding leads and lags

FINAL_DATA_Ivan <- FINAL_DATA_Ivan %>%
  mutate(
    lead4 = ifelse(Year == 2013, 1, 0),
    lead3 = ifelse(Year == 2014, 1, 0),
    lead2 = ifelse(Year == 2015, 1, 0),
    lead1 = ifelse(Year == 2016, 1, 0),
    lag0 = ifelse(Year == 2017, 1, 0),
    lag1 = ifelse(Year == 2018, 1, 0),
    lag2 = ifelse(Year == 2019, 1, 0),
    lag3 = ifelse(Year == 2020, 1, 0),
    lag4 = ifelse(Year == 2021, 1, 0),
    lag5 = ifelse(Year == 2022, 1, 0)
  )

FINAL_DATA_Ivan$DAMAGE_PROPERTY_NUM[is.na(FINAL_DATA_Ivan$DAMAGE_PROPERTY_NUM)] <- 0
FINAL_DATA_Ivan$DAMAGE_CROPS_NUM[is.na(FINAL_DATA_Ivan$DAMAGE_CROPS_NUM)] <- 0

hurr_damage_treshold <- 645000

# Create a new column indicating heavily hit or not
FINAL_DATA_Ivan$impact <- ifelse(FINAL_DATA_Ivan$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "Heavily Hit", "Not Heavily Hit")

FINAL_DATA_Ivan$impact <- ifelse(FINAL_DATA_Ivan$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "hit_hard", ifelse(FINAL_DATA_Ivan$DAMAGE_PROPERTY_NUM > 0, "hit_soft", "not_hit"))

# Create a new column "Hit_hard"
FINAL_DATA_Ivan$Hit_hard <- ifelse(FINAL_DATA_Ivan$impact == "hit_hard", 1, 0)

# Create a new column "hit_soft"
FINAL_DATA_Ivan$hit_soft <- ifelse(FINAL_DATA_Ivan$impact == "hit_soft", 1, 0)

FINAL_DATA_Ivan$not_hit <- ifelse(FINAL_DATA_Ivan$impact == "not_hit", 1, 0)

# Filter the hurricane data for the specified FIPS codes
filtered_hurricanes_Ivan <- official_hurr_data %>%
  filter(FIPS %in% Ivan_fips)

# Create a new variable 'Hit_again_years' indicating how many years before or after 2018 the county was hit again

filtered_hurricanes_Ivan$Hurr_Year <- as.numeric(filtered_hurricanes_Ivan$Hurr_Year)

filtered_hurricanes_Ivan <- filtered_hurricanes_Ivan %>%
  mutate(Hit_again_years = Hurr_Year - 2004)

filtered_hurricanes_Ivan <- filtered_hurricanes_Ivan[filtered_hurricanes_Ivan$Hit_again_years != 0, ]

# Group by FIPS and keep the row with the closest value to 0 in hit_again_years
filtered_hurricanes_Ivan <- filtered_hurricanes_Ivan %>%
  group_by(FIPS) %>%
  slice(which.min(abs(Hit_again_years))) %>%
  ungroup()


# merge into FINAL_DATA_Ivan 
FINAL_DATA_Ivan <- merge(FINAL_DATA_Ivan, filtered_hurricanes_Ivan, by = "FIPS", all.x = TRUE, suffixes = c("_final", "_filtered"))

FINAL_DATA_Ivan <- FINAL_DATA_Ivan %>% 
  select("FIPS":"not_hit", "Hit_again_years")


FINAL_DATA_Ivan$hit_again_5after <- ifelse(FINAL_DATA_Ivan$Hit_again_years >= 1 & FINAL_DATA_Ivan$Hit_again_years <= 5, 1, 0)

FINAL_DATA_Ivan$hit_again_5after <- replace(FINAL_DATA_Ivan$hit_again_5after, is.na(FINAL_DATA_Ivan$hit_again_5after), 0)


```

```{r}
FINAL_DATA_Ivan$NOT_Ivan2000 <- (FINAL_DATA_Ivan$Ivan==0)*(FINAL_DATA_Ivan$Year==2000)
FINAL_DATA_Ivan$NOT_Ivan2001 <- (FINAL_DATA_Ivan$Ivan==0)*(FINAL_DATA_Ivan$Year==2001)
FINAL_DATA_Ivan$NOT_Ivan2002 <- (FINAL_DATA_Ivan$Ivan==0)*(FINAL_DATA_Ivan$Year==2002)
FINAL_DATA_Ivan$NOT_Ivan2003 <- (FINAL_DATA_Ivan$Ivan==0)*(FINAL_DATA_Ivan$Year==2003)
FINAL_DATA_Ivan$NOT_Ivan2004 <- (FINAL_DATA_Ivan$Ivan==0)*(FINAL_DATA_Ivan$Year==2004)
FINAL_DATA_Ivan$NOT_Ivan2005 <- (FINAL_DATA_Ivan$Ivan==0)*(FINAL_DATA_Ivan$Year==2005)
FINAL_DATA_Ivan$NOT_Ivan2006 <- (FINAL_DATA_Ivan$Ivan==0)*(FINAL_DATA_Ivan$Year==2006)
FINAL_DATA_Ivan$NOT_Ivan2007 <- (FINAL_DATA_Ivan$Ivan==0)*(FINAL_DATA_Ivan$Year==2007)
FINAL_DATA_Ivan$NOT_Ivan2008 <- (FINAL_DATA_Ivan$Ivan==0)*(FINAL_DATA_Ivan$Year==2008)
FINAL_DATA_Ivan$NOT_Ivan2009 <- (FINAL_DATA_Ivan$Ivan==0)*(FINAL_DATA_Ivan$Year==2009)
FINAL_DATA_Ivan$NOT_Ivan2010 <- (FINAL_DATA_Ivan$Ivan==0)*(FINAL_DATA_Ivan$Year==2010)
FINAL_DATA_Ivan$NOT_Ivan2011 <- (FINAL_DATA_Ivan$Ivan==0)*(FINAL_DATA_Ivan$Year==2011)
FINAL_DATA_Ivan$NOT_Ivan2012 <- (FINAL_DATA_Ivan$Ivan==0)*(FINAL_DATA_Ivan$Year==2012)
FINAL_DATA_Ivan$NOT_Ivan2013 <- (FINAL_DATA_Ivan$Ivan==0)*(FINAL_DATA_Ivan$Year==2013)
FINAL_DATA_Ivan$NOT_Ivan2014 <- (FINAL_DATA_Ivan$Ivan==0)*(FINAL_DATA_Ivan$Year==2014)
FINAL_DATA_Ivan$NOT_Ivan2015 <- (FINAL_DATA_Ivan$Ivan==0)*(FINAL_DATA_Ivan$Year==2015)
FINAL_DATA_Ivan$NOT_Ivan2016 <- (FINAL_DATA_Ivan$Ivan==0)*(FINAL_DATA_Ivan$Year==2016)
FINAL_DATA_Ivan$NOT_Ivan2017 <- (FINAL_DATA_Ivan$Ivan==0)*(FINAL_DATA_Ivan$Year==2017)
FINAL_DATA_Ivan$NOT_Ivan2018 <- (FINAL_DATA_Ivan$Ivan==0)*(FINAL_DATA_Ivan$Year==2018)
FINAL_DATA_Ivan$NOT_Ivan2019 <- (FINAL_DATA_Ivan$Ivan==0)*(FINAL_DATA_Ivan$Year==2019)
FINAL_DATA_Ivan$NOT_Ivan2020 <- (FINAL_DATA_Ivan$Ivan==0)*(FINAL_DATA_Ivan$Year==2020)
FINAL_DATA_Ivan$NOT_Ivan2021 <- (FINAL_DATA_Ivan$Ivan==0)*(FINAL_DATA_Ivan$Year==2021)
FINAL_DATA_Ivan$NOT_Ivan2022 <- (FINAL_DATA_Ivan$Ivan==0)*(FINAL_DATA_Ivan$Year==2022)
FINAL_DATA_Ivan$NOT_Ivan2023 <- (FINAL_DATA_Ivan$Ivan==0)*(FINAL_DATA_Ivan$Year==2023)
FINAL_DATA_Ivan$Ivan2000 <- (FINAL_DATA_Ivan$Ivan==1)*(FINAL_DATA_Ivan$Year==2000)
FINAL_DATA_Ivan$Ivan2001 <- (FINAL_DATA_Ivan$Ivan==1)*(FINAL_DATA_Ivan$Year==2001)
FINAL_DATA_Ivan$Ivan2002 <- (FINAL_DATA_Ivan$Ivan==1)*(FINAL_DATA_Ivan$Year==2002)
FINAL_DATA_Ivan$Ivan2003 <- (FINAL_DATA_Ivan$Ivan==1)*(FINAL_DATA_Ivan$Year==2003)
FINAL_DATA_Ivan$Ivan2004 <- (FINAL_DATA_Ivan$Ivan==1)*(FINAL_DATA_Ivan$Year==2004)
FINAL_DATA_Ivan$Ivan2005 <- (FINAL_DATA_Ivan$Ivan==1)*(FINAL_DATA_Ivan$Year==2005)
FINAL_DATA_Ivan$Ivan2006 <- (FINAL_DATA_Ivan$Ivan==1)*(FINAL_DATA_Ivan$Year==2006)
FINAL_DATA_Ivan$Ivan2007 <- (FINAL_DATA_Ivan$Ivan==1)*(FINAL_DATA_Ivan$Year==2007)
FINAL_DATA_Ivan$Ivan2008 <- (FINAL_DATA_Ivan$Ivan==1)*(FINAL_DATA_Ivan$Year==2008)
FINAL_DATA_Ivan$Ivan2009 <- (FINAL_DATA_Ivan$Ivan==1)*(FINAL_DATA_Ivan$Year==2009)
FINAL_DATA_Ivan$Ivan2010 <- (FINAL_DATA_Ivan$Ivan==1)*(FINAL_DATA_Ivan$Year==2010)
FINAL_DATA_Ivan$Ivan2011 <- (FINAL_DATA_Ivan$Ivan==1)*(FINAL_DATA_Ivan$Year==2011)
FINAL_DATA_Ivan$Ivan2012 <- (FINAL_DATA_Ivan$Ivan==1)*(FINAL_DATA_Ivan$Year==2012)
FINAL_DATA_Ivan$Ivan2013 <- (FINAL_DATA_Ivan$Ivan==1)*(FINAL_DATA_Ivan$Year==2013)
FINAL_DATA_Ivan$Ivan2014 <- (FINAL_DATA_Ivan$Ivan==1)*(FINAL_DATA_Ivan$Year==2014)
FINAL_DATA_Ivan$Ivan2015 <- (FINAL_DATA_Ivan$Ivan==1)*(FINAL_DATA_Ivan$Year==2015)
FINAL_DATA_Ivan$Ivan2016 <- (FINAL_DATA_Ivan$Ivan==1)*(FINAL_DATA_Ivan$Year==2016)
FINAL_DATA_Ivan$Ivan2017 <- (FINAL_DATA_Ivan$Ivan==1)*(FINAL_DATA_Ivan$Year==2017)
FINAL_DATA_Ivan$Ivan2018 <- (FINAL_DATA_Ivan$Ivan==1)*(FINAL_DATA_Ivan$Year==2018)
FINAL_DATA_Ivan$Ivan2019 <- (FINAL_DATA_Ivan$Ivan==1)*(FINAL_DATA_Ivan$Year==2019)
FINAL_DATA_Ivan$Ivan2020 <- (FINAL_DATA_Ivan$Ivan==1)*(FINAL_DATA_Ivan$Year==2020)
FINAL_DATA_Ivan$Ivan2021 <- (FINAL_DATA_Ivan$Ivan==1)*(FINAL_DATA_Ivan$Year==2021)
FINAL_DATA_Ivan$Ivan2022 <- (FINAL_DATA_Ivan$Ivan==1)*(FINAL_DATA_Ivan$Year==2022)
FINAL_DATA_Ivan$Ivan2023 <- (FINAL_DATA_Ivan$Ivan==1)*(FINAL_DATA_Ivan$Year==2023)
```

## HURRICANE Lili

```{r}
Lili_subset <- official_hurr_data[official_hurr_data$HURR_NAME == "Hurricane Lili", ]

# drop row if PROPERTY and CROPS damage are both 0
Lili_subset <- subset(Lili_subset, !(DAMAGE_PROPERTY_NUM == 0 & DAMAGE_CROPS_NUM == 0))

unique_fips_values <- unique(Lili_subset$FIPS)
print(unique_fips_values)

Lili_fips <- c(22055, 22113, 22001, 22079, 22051, 22045, 22101, 22097, 22039, 22033, 22037, 22057, 22075, 22087, 22109, 22099, 22005, 22007, 22047, 22063, 22071, 22077, 22089, 22091, 22093, 22095, 22103, 22105, 22117, 22009, 22003, 22019, 22041, 22067, 22011, 22023, 1097, 1003)


countyDistancescsv$Lili <- ifelse(countyDistancescsv$FIPS %in% Lili_fips, 1, 0)


countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "Lili"), 2:(ncol(countyDistancescsv)-1))]


#Assuming 'countyDistancescsv' is your dataset
 countyDistancescsv$within100_Lili <- apply(countyDistancescsv[, paste0("di", Lili_fips)], 1, function(row) {
  if (any(row < 100)) {
    return(1)
  } else {
    return(0)
  }
})

countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "within100_Lili"), 2:(ncol(countyDistancescsv)-1))]

Lili_counties <- subset(countyDistancescsv, within100_Lili == 1)

Lili_counties <- Lili_counties %>% 
  select("FIPS", "within100_Lili", "Lili")


joined_data_Lili <- joined_data_1 %>%
  filter(HURR_NAME == "Hurricane Lili")
  
Lili_data <- left_join(Lili_counties, joined_data_Lili, by = "FIPS")

FINAL_DATA_Lili <- inner_join(DATASET2, Lili_data, by = "FIPS")

FINAL_DATA_Lili <- FINAL_DATA_Lili %>%
  mutate(hurr_hit = ifelse(Lili == 1 & Year >= 2002, 1, 0))

FINAL_DATA_Lili$Income <- as.numeric(FINAL_DATA_Lili$Income)
FINAL_DATA_Lili$Population <- as.numeric(FINAL_DATA_Lili$Population)


# adding leads and lags

FINAL_DATA_Lili <- FINAL_DATA_Lili %>%
  mutate(
    lead4 = ifelse(Year == 2013, 1, 0),
    lead3 = ifelse(Year == 2014, 1, 0),
    lead2 = ifelse(Year == 2015, 1, 0),
    lead1 = ifelse(Year == 2016, 1, 0),
    lag0 = ifelse(Year == 2017, 1, 0),
    lag1 = ifelse(Year == 2018, 1, 0),
    lag2 = ifelse(Year == 2019, 1, 0),
    lag3 = ifelse(Year == 2020, 1, 0),
    lag4 = ifelse(Year == 2021, 1, 0),
    lag5 = ifelse(Year == 2022, 1, 0)
  )

FINAL_DATA_Lili$DAMAGE_PROPERTY_NUM[is.na(FINAL_DATA_Lili$DAMAGE_PROPERTY_NUM)] <- 0
FINAL_DATA_Lili$DAMAGE_CROPS_NUM[is.na(FINAL_DATA_Lili$DAMAGE_CROPS_NUM)] <- 0

hurr_damage_treshold <- 645000

# Create a new column indicating heavily hit or not
FINAL_DATA_Lili$impact <- ifelse(FINAL_DATA_Lili$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "Heavily Hit", "Not Heavily Hit")

FINAL_DATA_Lili$impact <- ifelse(FINAL_DATA_Lili$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "hit_hard", ifelse(FINAL_DATA_Lili$DAMAGE_PROPERTY_NUM > 0, "hit_soft", "not_hit"))

# Create a new column "Hit_hard"
FINAL_DATA_Lili$Hit_hard <- ifelse(FINAL_DATA_Lili$impact == "hit_hard", 1, 0)

# Create a new column "hit_soft"
FINAL_DATA_Lili$hit_soft <- ifelse(FINAL_DATA_Lili$impact == "hit_soft", 1, 0)

FINAL_DATA_Lili$not_hit <- ifelse(FINAL_DATA_Lili$impact == "not_hit", 1, 0)

# Filter the hurricane data for the specified FIPS codes
filtered_hurricanes_Lili <- official_hurr_data %>%
  filter(FIPS %in% Lili_fips)

# Create a new variable 'Hit_again_years' indicating how many years before or after 2018 the county was hit again

filtered_hurricanes_Lili$Hurr_Year <- as.numeric(filtered_hurricanes_Lili$Hurr_Year)

filtered_hurricanes_Lili <- filtered_hurricanes_Lili %>%
  mutate(Hit_again_years = Hurr_Year - 2002)

filtered_hurricanes_Lili <- filtered_hurricanes_Lili[filtered_hurricanes_Lili$Hit_again_years != 0, ]

# Group by FIPS and keep the row with the closest value to 0 in hit_again_years
filtered_hurricanes_Lili <- filtered_hurricanes_Lili %>%
  group_by(FIPS) %>%
  slice(which.min(abs(Hit_again_years))) %>%
  ungroup()


# merge into FINAL_DATA_Lili 
FINAL_DATA_Lili <- merge(FINAL_DATA_Lili, filtered_hurricanes_Lili, by = "FIPS", all.x = TRUE, suffixes = c("_final", "_filtered"))

FINAL_DATA_Lili <- FINAL_DATA_Lili %>% 
  select("FIPS":"not_hit", "Hit_again_years")


FINAL_DATA_Lili$hit_again_5after <- ifelse(FINAL_DATA_Lili$Hit_again_years >= 1 & FINAL_DATA_Lili$Hit_again_years <= 5, 1, 0)

FINAL_DATA_Lili$hit_again_5after <- replace(FINAL_DATA_Lili$hit_again_5after, is.na(FINAL_DATA_Lili$hit_again_5after), 0)


```


```{r}
FINAL_DATA_Lili$NOT_Lili2000 <- (FINAL_DATA_Lili$Lili==0)*(FINAL_DATA_Lili$Year==2000)
FINAL_DATA_Lili$NOT_Lili2001 <- (FINAL_DATA_Lili$Lili==0)*(FINAL_DATA_Lili$Year==2001)
FINAL_DATA_Lili$NOT_Lili2002 <- (FINAL_DATA_Lili$Lili==0)*(FINAL_DATA_Lili$Year==2002)
FINAL_DATA_Lili$NOT_Lili2003 <- (FINAL_DATA_Lili$Lili==0)*(FINAL_DATA_Lili$Year==2003)
FINAL_DATA_Lili$NOT_Lili2004 <- (FINAL_DATA_Lili$Lili==0)*(FINAL_DATA_Lili$Year==2004)
FINAL_DATA_Lili$NOT_Lili2005 <- (FINAL_DATA_Lili$Lili==0)*(FINAL_DATA_Lili$Year==2005)
FINAL_DATA_Lili$NOT_Lili2006 <- (FINAL_DATA_Lili$Lili==0)*(FINAL_DATA_Lili$Year==2006)
FINAL_DATA_Lili$NOT_Lili2007 <- (FINAL_DATA_Lili$Lili==0)*(FINAL_DATA_Lili$Year==2007)
FINAL_DATA_Lili$NOT_Lili2008 <- (FINAL_DATA_Lili$Lili==0)*(FINAL_DATA_Lili$Year==2008)
FINAL_DATA_Lili$NOT_Lili2009 <- (FINAL_DATA_Lili$Lili==0)*(FINAL_DATA_Lili$Year==2009)
FINAL_DATA_Lili$NOT_Lili2010 <- (FINAL_DATA_Lili$Lili==0)*(FINAL_DATA_Lili$Year==2010)
FINAL_DATA_Lili$NOT_Lili2011 <- (FINAL_DATA_Lili$Lili==0)*(FINAL_DATA_Lili$Year==2011)
FINAL_DATA_Lili$NOT_Lili2012 <- (FINAL_DATA_Lili$Lili==0)*(FINAL_DATA_Lili$Year==2012)
FINAL_DATA_Lili$NOT_Lili2013 <- (FINAL_DATA_Lili$Lili==0)*(FINAL_DATA_Lili$Year==2013)
FINAL_DATA_Lili$NOT_Lili2014 <- (FINAL_DATA_Lili$Lili==0)*(FINAL_DATA_Lili$Year==2014)
FINAL_DATA_Lili$NOT_Lili2015 <- (FINAL_DATA_Lili$Lili==0)*(FINAL_DATA_Lili$Year==2015)
FINAL_DATA_Lili$NOT_Lili2016 <- (FINAL_DATA_Lili$Lili==0)*(FINAL_DATA_Lili$Year==2016)
FINAL_DATA_Lili$NOT_Lili2017 <- (FINAL_DATA_Lili$Lili==0)*(FINAL_DATA_Lili$Year==2017)
FINAL_DATA_Lili$NOT_Lili2018 <- (FINAL_DATA_Lili$Lili==0)*(FINAL_DATA_Lili$Year==2018)
FINAL_DATA_Lili$NOT_Lili2019 <- (FINAL_DATA_Lili$Lili==0)*(FINAL_DATA_Lili$Year==2019)
FINAL_DATA_Lili$NOT_Lili2020 <- (FINAL_DATA_Lili$Lili==0)*(FINAL_DATA_Lili$Year==2020)
FINAL_DATA_Lili$NOT_Lili2021 <- (FINAL_DATA_Lili$Lili==0)*(FINAL_DATA_Lili$Year==2021)
FINAL_DATA_Lili$NOT_Lili2022 <- (FINAL_DATA_Lili$Lili==0)*(FINAL_DATA_Lili$Year==2022)
FINAL_DATA_Lili$NOT_Lili2023 <- (FINAL_DATA_Lili$Lili==0)*(FINAL_DATA_Lili$Year==2023)
FINAL_DATA_Lili$Lili2000 <- (FINAL_DATA_Lili$Lili==1)*(FINAL_DATA_Lili$Year==2000)
FINAL_DATA_Lili$Lili2001 <- (FINAL_DATA_Lili$Lili==1)*(FINAL_DATA_Lili$Year==2001)
FINAL_DATA_Lili$Lili2002 <- (FINAL_DATA_Lili$Lili==1)*(FINAL_DATA_Lili$Year==2002)
FINAL_DATA_Lili$Lili2003 <- (FINAL_DATA_Lili$Lili==1)*(FINAL_DATA_Lili$Year==2003)
FINAL_DATA_Lili$Lili2004 <- (FINAL_DATA_Lili$Lili==1)*(FINAL_DATA_Lili$Year==2004)
FINAL_DATA_Lili$Lili2005 <- (FINAL_DATA_Lili$Lili==1)*(FINAL_DATA_Lili$Year==2005)
FINAL_DATA_Lili$Lili2006 <- (FINAL_DATA_Lili$Lili==1)*(FINAL_DATA_Lili$Year==2006)
FINAL_DATA_Lili$Lili2007 <- (FINAL_DATA_Lili$Lili==1)*(FINAL_DATA_Lili$Year==2007)
FINAL_DATA_Lili$Lili2008 <- (FINAL_DATA_Lili$Lili==1)*(FINAL_DATA_Lili$Year==2008)
FINAL_DATA_Lili$Lili2009 <- (FINAL_DATA_Lili$Lili==1)*(FINAL_DATA_Lili$Year==2009)
FINAL_DATA_Lili$Lili2010 <- (FINAL_DATA_Lili$Lili==1)*(FINAL_DATA_Lili$Year==2010)
FINAL_DATA_Lili$Lili2011 <- (FINAL_DATA_Lili$Lili==1)*(FINAL_DATA_Lili$Year==2011)
FINAL_DATA_Lili$Lili2012 <- (FINAL_DATA_Lili$Lili==1)*(FINAL_DATA_Lili$Year==2012)
FINAL_DATA_Lili$Lili2013 <- (FINAL_DATA_Lili$Lili==1)*(FINAL_DATA_Lili$Year==2013)
FINAL_DATA_Lili$Lili2014 <- (FINAL_DATA_Lili$Lili==1)*(FINAL_DATA_Lili$Year==2014)
FINAL_DATA_Lili$Lili2015 <- (FINAL_DATA_Lili$Lili==1)*(FINAL_DATA_Lili$Year==2015)
FINAL_DATA_Lili$Lili2016 <- (FINAL_DATA_Lili$Lili==1)*(FINAL_DATA_Lili$Year==2016)
FINAL_DATA_Lili$Lili2017 <- (FINAL_DATA_Lili$Lili==1)*(FINAL_DATA_Lili$Year==2017)
FINAL_DATA_Lili$Lili2018 <- (FINAL_DATA_Lili$Lili==1)*(FINAL_DATA_Lili$Year==2018)
FINAL_DATA_Lili$Lili2019 <- (FINAL_DATA_Lili$Lili==1)*(FINAL_DATA_Lili$Year==2019)
FINAL_DATA_Lili$Lili2020 <- (FINAL_DATA_Lili$Lili==1)*(FINAL_DATA_Lili$Year==2020)
FINAL_DATA_Lili$Lili2021 <- (FINAL_DATA_Lili$Lili==1)*(FINAL_DATA_Lili$Year==2021)
FINAL_DATA_Lili$Lili2022 <- (FINAL_DATA_Lili$Lili==1)*(FINAL_DATA_Lili$Year==2022)
FINAL_DATA_Lili$Lili2023 <- (FINAL_DATA_Lili$Lili==1)*(FINAL_DATA_Lili$Year==2023)
```


## HURRICANE Matthew

```{r}
Matthew_subset <- official_hurr_data[official_hurr_data$HURR_NAME == "Hurricane Matthew", ]

# drop row if PROPERTY and CROPS damage are both 0
Matthew_subset <- subset(Matthew_subset, !(DAMAGE_PROPERTY_NUM == 0 & DAMAGE_CROPS_NUM == 0))

unique_fips_values <- unique(Matthew_subset$FIPS)
print(unique_fips_values)

Matthew_fips <- c(12127, 45051, 12009, 45043, 12061, 45089)


countyDistancescsv$Matthew <- ifelse(countyDistancescsv$FIPS %in% Matthew_fips, 1, 0)


countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "Matthew"), 2:(ncol(countyDistancescsv)-1))]


#Assuming 'countyDistancescsv' is your dataset
 countyDistancescsv$within100_Matthew <- apply(countyDistancescsv[, paste0("di", Matthew_fips)], 1, function(row) {
  if (any(row < 100)) {
    return(1)
  } else {
    return(0)
  }
})

countyDistancescsv <- countyDistancescsv[, c(1, which(names(countyDistancescsv) == "within100_Matthew"), 2:(ncol(countyDistancescsv)-1))]

Matthew_counties <- subset(countyDistancescsv, within100_Matthew == 1)

Matthew_counties <- Matthew_counties %>% 
  select("FIPS", "within100_Matthew", "Matthew")


joined_data_Matthew <- joined_data_1 %>%
  filter(HURR_NAME == "Hurricane Matthew")
  
Matthew_data <- left_join(Matthew_counties, joined_data_Matthew, by = "FIPS")

FINAL_DATA_Matthew <- inner_join(DATASET2, Matthew_data, by = "FIPS")

FINAL_DATA_Matthew <- FINAL_DATA_Matthew %>%
  mutate(hurr_hit = ifelse(Matthew == 1 & Year >= 2016, 1, 0))

FINAL_DATA_Matthew$Income <- as.numeric(FINAL_DATA_Matthew$Income)
FINAL_DATA_Matthew$Population <- as.numeric(FINAL_DATA_Matthew$Population)


# adding leads and lags

FINAL_DATA_Matthew <- FINAL_DATA_Matthew %>%
  mutate(
    lead4 = ifelse(Year == 2013, 1, 0),
    lead3 = ifelse(Year == 2014, 1, 0),
    lead2 = ifelse(Year == 2015, 1, 0),
    lead1 = ifelse(Year == 2016, 1, 0),
    lag0 = ifelse(Year == 2017, 1, 0),
    lag1 = ifelse(Year == 2018, 1, 0),
    lag2 = ifelse(Year == 2019, 1, 0),
    lag3 = ifelse(Year == 2020, 1, 0),
    lag4 = ifelse(Year == 2021, 1, 0),
    lag5 = ifelse(Year == 2022, 1, 0)
  )

FINAL_DATA_Matthew$DAMAGE_PROPERTY_NUM[is.na(FINAL_DATA_Matthew$DAMAGE_PROPERTY_NUM)] <- 0
FINAL_DATA_Matthew$DAMAGE_CROPS_NUM[is.na(FINAL_DATA_Matthew$DAMAGE_CROPS_NUM)] <- 0

hurr_damage_treshold <- 645000

# Create a new column indicating heavily hit or not
FINAL_DATA_Matthew$impact <- ifelse(FINAL_DATA_Matthew$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "Heavily Hit", "Not Heavily Hit")

FINAL_DATA_Matthew$impact <- ifelse(FINAL_DATA_Matthew$DAMAGE_PROPERTY_NUM > hurr_damage_treshold, "hit_hard", ifelse(FINAL_DATA_Matthew$DAMAGE_PROPERTY_NUM > 0, "hit_soft", "not_hit"))

# Create a new column "Hit_hard"
FINAL_DATA_Matthew$Hit_hard <- ifelse(FINAL_DATA_Matthew$impact == "hit_hard", 1, 0)

# Create a new column "hit_soft"
FINAL_DATA_Matthew$hit_soft <- ifelse(FINAL_DATA_Matthew$impact == "hit_soft", 1, 0)

FINAL_DATA_Matthew$not_hit <- ifelse(FINAL_DATA_Matthew$impact == "not_hit", 1, 0)

# Filter the hurricane data for the specified FIPS codes
filtered_hurricanes_Matthew <- official_hurr_data %>%
  filter(FIPS %in% Matthew_fips)

# Create a new variable 'Hit_again_years' indicating how many years before or after 2018 the county was hit again

filtered_hurricanes_Matthew$Hurr_Year <- as.numeric(filtered_hurricanes_Matthew$Hurr_Year)

filtered_hurricanes_Matthew <- filtered_hurricanes_Matthew %>%
  mutate(Hit_again_years = Hurr_Year - 2016)

filtered_hurricanes_Matthew <- filtered_hurricanes_Matthew[filtered_hurricanes_Matthew$Hit_again_years != 0, ]

# Group by FIPS and keep the row with the closest value to 0 in hit_again_years
filtered_hurricanes_Matthew <- filtered_hurricanes_Matthew %>%
  group_by(FIPS) %>%
  slice(which.min(abs(Hit_again_years))) %>%
  ungroup()


# merge into FINAL_DATA_Matthew 
FINAL_DATA_Matthew <- merge(FINAL_DATA_Matthew, filtered_hurricanes_Matthew, by = "FIPS", all.x = TRUE, suffixes = c("_final", "_filtered"))

FINAL_DATA_Matthew <- FINAL_DATA_Matthew %>% 
  select("FIPS":"not_hit", "Hit_again_years")


FINAL_DATA_Matthew$hit_again_5after <- ifelse(FINAL_DATA_Matthew$Hit_again_years >= 1 & FINAL_DATA_Matthew$Hit_again_years <= 5, 1, 0)

FINAL_DATA_Matthew$hit_again_5after <- replace(FINAL_DATA_Matthew$hit_again_5after, is.na(FINAL_DATA_Matthew$hit_again_5after), 0)


```

```{r}
FINAL_DATA_Matthew$NOT_Matthew2000 <- (FINAL_DATA_Matthew$Matthew==0)*(FINAL_DATA_Matthew$Year==2000)
FINAL_DATA_Matthew$NOT_Matthew2001 <- (FINAL_DATA_Matthew$Matthew==0)*(FINAL_DATA_Matthew$Year==2001)
FINAL_DATA_Matthew$NOT_Matthew2002 <- (FINAL_DATA_Matthew$Matthew==0)*(FINAL_DATA_Matthew$Year==2002)
FINAL_DATA_Matthew$NOT_Matthew2003 <- (FINAL_DATA_Matthew$Matthew==0)*(FINAL_DATA_Matthew$Year==2003)
FINAL_DATA_Matthew$NOT_Matthew2004 <- (FINAL_DATA_Matthew$Matthew==0)*(FINAL_DATA_Matthew$Year==2004)
FINAL_DATA_Matthew$NOT_Matthew2005 <- (FINAL_DATA_Matthew$Matthew==0)*(FINAL_DATA_Matthew$Year==2005)
FINAL_DATA_Matthew$NOT_Matthew2006 <- (FINAL_DATA_Matthew$Matthew==0)*(FINAL_DATA_Matthew$Year==2006)
FINAL_DATA_Matthew$NOT_Matthew2007 <- (FINAL_DATA_Matthew$Matthew==0)*(FINAL_DATA_Matthew$Year==2007)
FINAL_DATA_Matthew$NOT_Matthew2008 <- (FINAL_DATA_Matthew$Matthew==0)*(FINAL_DATA_Matthew$Year==2008)
FINAL_DATA_Matthew$NOT_Matthew2009 <- (FINAL_DATA_Matthew$Matthew==0)*(FINAL_DATA_Matthew$Year==2009)
FINAL_DATA_Matthew$NOT_Matthew2010 <- (FINAL_DATA_Matthew$Matthew==0)*(FINAL_DATA_Matthew$Year==2010)
FINAL_DATA_Matthew$NOT_Matthew2011 <- (FINAL_DATA_Matthew$Matthew==0)*(FINAL_DATA_Matthew$Year==2011)
FINAL_DATA_Matthew$NOT_Matthew2012 <- (FINAL_DATA_Matthew$Matthew==0)*(FINAL_DATA_Matthew$Year==2012)
FINAL_DATA_Matthew$NOT_Matthew2013 <- (FINAL_DATA_Matthew$Matthew==0)*(FINAL_DATA_Matthew$Year==2013)
FINAL_DATA_Matthew$NOT_Matthew2014 <- (FINAL_DATA_Matthew$Matthew==0)*(FINAL_DATA_Matthew$Year==2014)
FINAL_DATA_Matthew$NOT_Matthew2015 <- (FINAL_DATA_Matthew$Matthew==0)*(FINAL_DATA_Matthew$Year==2015)
FINAL_DATA_Matthew$NOT_Matthew2016 <- (FINAL_DATA_Matthew$Matthew==0)*(FINAL_DATA_Matthew$Year==2016)
FINAL_DATA_Matthew$NOT_Matthew2017 <- (FINAL_DATA_Matthew$Matthew==0)*(FINAL_DATA_Matthew$Year==2017)
FINAL_DATA_Matthew$NOT_Matthew2018 <- (FINAL_DATA_Matthew$Matthew==0)*(FINAL_DATA_Matthew$Year==2018)
FINAL_DATA_Matthew$NOT_Matthew2019 <- (FINAL_DATA_Matthew$Matthew==0)*(FINAL_DATA_Matthew$Year==2019)
FINAL_DATA_Matthew$NOT_Matthew2020 <- (FINAL_DATA_Matthew$Matthew==0)*(FINAL_DATA_Matthew$Year==2020)
FINAL_DATA_Matthew$NOT_Matthew2021 <- (FINAL_DATA_Matthew$Matthew==0)*(FINAL_DATA_Matthew$Year==2021)
FINAL_DATA_Matthew$NOT_Matthew2022 <- (FINAL_DATA_Matthew$Matthew==0)*(FINAL_DATA_Matthew$Year==2022)
FINAL_DATA_Matthew$NOT_Matthew2023 <- (FINAL_DATA_Matthew$Matthew==0)*(FINAL_DATA_Matthew$Year==2023)
FINAL_DATA_Matthew$Matthew2000 <- (FINAL_DATA_Matthew$Matthew==1)*(FINAL_DATA_Matthew$Year==2000)
FINAL_DATA_Matthew$Matthew2001 <- (FINAL_DATA_Matthew$Matthew==1)*(FINAL_DATA_Matthew$Year==2001)
FINAL_DATA_Matthew$Matthew2002 <- (FINAL_DATA_Matthew$Matthew==1)*(FINAL_DATA_Matthew$Year==2002)
FINAL_DATA_Matthew$Matthew2003 <- (FINAL_DATA_Matthew$Matthew==1)*(FINAL_DATA_Matthew$Year==2003)
FINAL_DATA_Matthew$Matthew2004 <- (FINAL_DATA_Matthew$Matthew==1)*(FINAL_DATA_Matthew$Year==2004)
FINAL_DATA_Matthew$Matthew2005 <- (FINAL_DATA_Matthew$Matthew==1)*(FINAL_DATA_Matthew$Year==2005)
FINAL_DATA_Matthew$Matthew2006 <- (FINAL_DATA_Matthew$Matthew==1)*(FINAL_DATA_Matthew$Year==2006)
FINAL_DATA_Matthew$Matthew2007 <- (FINAL_DATA_Matthew$Matthew==1)*(FINAL_DATA_Matthew$Year==2007)
FINAL_DATA_Matthew$Matthew2008 <- (FINAL_DATA_Matthew$Matthew==1)*(FINAL_DATA_Matthew$Year==2008)
FINAL_DATA_Matthew$Matthew2009 <- (FINAL_DATA_Matthew$Matthew==1)*(FINAL_DATA_Matthew$Year==2009)
FINAL_DATA_Matthew$Matthew2010 <- (FINAL_DATA_Matthew$Matthew==1)*(FINAL_DATA_Matthew$Year==2010)
FINAL_DATA_Matthew$Matthew2011 <- (FINAL_DATA_Matthew$Matthew==1)*(FINAL_DATA_Matthew$Year==2011)
FINAL_DATA_Matthew$Matthew2012 <- (FINAL_DATA_Matthew$Matthew==1)*(FINAL_DATA_Matthew$Year==2012)
FINAL_DATA_Matthew$Matthew2013 <- (FINAL_DATA_Matthew$Matthew==1)*(FINAL_DATA_Matthew$Year==2013)
FINAL_DATA_Matthew$Matthew2014 <- (FINAL_DATA_Matthew$Matthew==1)*(FINAL_DATA_Matthew$Year==2014)
FINAL_DATA_Matthew$Matthew2015 <- (FINAL_DATA_Matthew$Matthew==1)*(FINAL_DATA_Matthew$Year==2015)
FINAL_DATA_Matthew$Matthew2016 <- (FINAL_DATA_Matthew$Matthew==1)*(FINAL_DATA_Matthew$Year==2016)
FINAL_DATA_Matthew$Matthew2017 <- (FINAL_DATA_Matthew$Matthew==1)*(FINAL_DATA_Matthew$Year==2017)
FINAL_DATA_Matthew$Matthew2018 <- (FINAL_DATA_Matthew$Matthew==1)*(FINAL_DATA_Matthew$Year==2018)
FINAL_DATA_Matthew$Matthew2019 <- (FINAL_DATA_Matthew$Matthew==1)*(FINAL_DATA_Matthew$Year==2019)
FINAL_DATA_Matthew$Matthew2020 <- (FINAL_DATA_Matthew$Matthew==1)*(FINAL_DATA_Matthew$Year==2020)
FINAL_DATA_Matthew$Matthew2021 <- (FINAL_DATA_Matthew$Matthew==1)*(FINAL_DATA_Matthew$Year==2021)
FINAL_DATA_Matthew$Matthew2022 <- (FINAL_DATA_Matthew$Matthew==1)*(FINAL_DATA_Matthew$Year==2022)
FINAL_DATA_Matthew$Matthew2023 <- (FINAL_DATA_Matthew$Matthew==1)*(FINAL_DATA_Matthew$Year==2023)
```



### Stacking all Hurricane Datasets into 1


```{r}
# hurr matthew dataset for stack - only select variables until hit_again_5after and rename Matthew and within100_Matthew with "hurricane_hit" and "within_100_hit" + add another variable called "hurr_name" and make sure to have the name of the hurr in there


FINAL_DATA_Matthew_stack <- FINAL_DATA_Matthew %>%
  select("FIPS":"Matthew2023", 
         hurricane_hit = Matthew, 
         within_100_hit = within100_Matthew,
         NOT_hit2000=NOT_Matthew2000,
NOT_hit2001=NOT_Matthew2001,
NOT_hit2002=NOT_Matthew2002,
NOT_hit2003=NOT_Matthew2003,
NOT_hit2004=NOT_Matthew2004,
NOT_hit2005=NOT_Matthew2005,
NOT_hit2006=NOT_Matthew2006,
NOT_hit2007=NOT_Matthew2007,
NOT_hit2008=NOT_Matthew2008,
NOT_hit2009=NOT_Matthew2009,
NOT_hit2010=NOT_Matthew2010,
NOT_hit2011=NOT_Matthew2011,
NOT_hit2012=NOT_Matthew2012,
NOT_hit2013=NOT_Matthew2013,
NOT_hit2014=NOT_Matthew2014,
NOT_hit2015=NOT_Matthew2015,
NOT_hit2016=NOT_Matthew2016,
NOT_hit2017=NOT_Matthew2017,
NOT_hit2018=NOT_Matthew2018,
NOT_hit2019=NOT_Matthew2019,
NOT_hit2020=NOT_Matthew2020,
NOT_hit2021=NOT_Matthew2021,
NOT_hit2022=NOT_Matthew2022,
NOT_hit2023=NOT_Matthew2023,
Hit2000=Matthew2000,
Hit2001=Matthew2001,
Hit2002=Matthew2002,
Hit2003=Matthew2003,
Hit2004=Matthew2004,
Hit2005=Matthew2005,
Hit2006=Matthew2006,
Hit2007=Matthew2007,
Hit2008=Matthew2008,
Hit2009=Matthew2009,
Hit2010=Matthew2010,
Hit2011=Matthew2011,
Hit2012=Matthew2012,
Hit2013=Matthew2013,
Hit2014=Matthew2014,
Hit2015=Matthew2015,
Hit2016=Matthew2016,
Hit2017=Matthew2017,
Hit2018=Matthew2018,
Hit2019=Matthew2019,
Hit2020=Matthew2020,
Hit2021=Matthew2021,
Hit2022=Matthew2022,
Hit2023=Matthew2023) 

FINAL_DATA_Matthew_stack <- FINAL_DATA_Matthew_stack %>% 
mutate(hurr_name = "Matthew")

FINAL_DATA_Michael_stack <- FINAL_DATA_Michael %>%
  select("FIPS":"Michael2023", 
         hurricane_hit = Michael, 
         within_100_hit = within100_michael,
         NOT_hit2000=NOT_Michael2000,
NOT_hit2001=NOT_Michael2001,
NOT_hit2002=NOT_Michael2002,
NOT_hit2003=NOT_Michael2003,
NOT_hit2004=NOT_Michael2004,
NOT_hit2005=NOT_Michael2005,
NOT_hit2006=NOT_Michael2006,
NOT_hit2007=NOT_Michael2007,
NOT_hit2008=NOT_Michael2008,
NOT_hit2009=NOT_Michael2009,
NOT_hit2010=NOT_Michael2010,
NOT_hit2011=NOT_Michael2011,
NOT_hit2012=NOT_Michael2012,
NOT_hit2013=NOT_Michael2013,
NOT_hit2014=NOT_Michael2014,
NOT_hit2015=NOT_Michael2015,
NOT_hit2016=NOT_Michael2016,
NOT_hit2017=NOT_Michael2017,
NOT_hit2018=NOT_Michael2018,
NOT_hit2019=NOT_Michael2019,
NOT_hit2020=NOT_Michael2020,
NOT_hit2021=NOT_Michael2021,
NOT_hit2022=NOT_Michael2022,
NOT_hit2023=NOT_Michael2023,
Hit2000=Michael2000,
Hit2001=Michael2001,
Hit2002=Michael2002,
Hit2003=Michael2003,
Hit2004=Michael2004,
Hit2005=Michael2005,
Hit2006=Michael2006,
Hit2007=Michael2007,
Hit2008=Michael2008,
Hit2009=Michael2009,
Hit2010=Michael2010,
Hit2011=Michael2011,
Hit2012=Michael2012,
Hit2013=Michael2013,
Hit2014=Michael2014,
Hit2015=Michael2015,
Hit2016=Michael2016,
Hit2017=Michael2017,
Hit2018=Michael2018,
Hit2019=Michael2019,
Hit2020=Michael2020,
Hit2021=Michael2021,
Hit2022=Michael2022,
Hit2023=Michael2023) 

FINAL_DATA_Michael_stack <- FINAL_DATA_Michael_stack %>% 
mutate(hurr_name = "Michael")

FINAL_DATA_Gustav_stack <- FINAL_DATA_Gustav %>%
  select("FIPS":"Gustav2023", 
         hurricane_hit = Gustav, 
         within_100_hit = within100_Gustav,
         NOT_hit2000=NOT_Gustav2000,
NOT_hit2001=NOT_Gustav2001,
NOT_hit2002=NOT_Gustav2002,
NOT_hit2003=NOT_Gustav2003,
NOT_hit2004=NOT_Gustav2004,
NOT_hit2005=NOT_Gustav2005,
NOT_hit2006=NOT_Gustav2006,
NOT_hit2007=NOT_Gustav2007,
NOT_hit2008=NOT_Gustav2008,
NOT_hit2009=NOT_Gustav2009,
NOT_hit2010=NOT_Gustav2010,
NOT_hit2011=NOT_Gustav2011,
NOT_hit2012=NOT_Gustav2012,
NOT_hit2013=NOT_Gustav2013,
NOT_hit2014=NOT_Gustav2014,
NOT_hit2015=NOT_Gustav2015,
NOT_hit2016=NOT_Gustav2016,
NOT_hit2017=NOT_Gustav2017,
NOT_hit2018=NOT_Gustav2018,
NOT_hit2019=NOT_Gustav2019,
NOT_hit2020=NOT_Gustav2020,
NOT_hit2021=NOT_Gustav2021,
NOT_hit2022=NOT_Gustav2022,
NOT_hit2023=NOT_Gustav2023,
Hit2000=Gustav2000,
Hit2001=Gustav2001,
Hit2002=Gustav2002,
Hit2003=Gustav2003,
Hit2004=Gustav2004,
Hit2005=Gustav2005,
Hit2006=Gustav2006,
Hit2007=Gustav2007,
Hit2008=Gustav2008,
Hit2009=Gustav2009,
Hit2010=Gustav2010,
Hit2011=Gustav2011,
Hit2012=Gustav2012,
Hit2013=Gustav2013,
Hit2014=Gustav2014,
Hit2015=Gustav2015,
Hit2016=Gustav2016,
Hit2017=Gustav2017,
Hit2018=Gustav2018,
Hit2019=Gustav2019,
Hit2020=Gustav2020,
Hit2021=Gustav2021,
Hit2022=Gustav2022,
Hit2023=Gustav2023) 

FINAL_DATA_Gustav_stack <- FINAL_DATA_Gustav_stack %>% 
mutate(hurr_name = "Gustav")

FINAL_DATA_Lili_stack <- FINAL_DATA_Lili %>%
  select("FIPS":"Lili2023", 
         hurricane_hit = Lili, 
         within_100_hit = within100_Lili,
         NOT_hit2000=NOT_Lili2000,
NOT_hit2001=NOT_Lili2001,
NOT_hit2002=NOT_Lili2002,
NOT_hit2003=NOT_Lili2003,
NOT_hit2004=NOT_Lili2004,
NOT_hit2005=NOT_Lili2005,
NOT_hit2006=NOT_Lili2006,
NOT_hit2007=NOT_Lili2007,
NOT_hit2008=NOT_Lili2008,
NOT_hit2009=NOT_Lili2009,
NOT_hit2010=NOT_Lili2010,
NOT_hit2011=NOT_Lili2011,
NOT_hit2012=NOT_Lili2012,
NOT_hit2013=NOT_Lili2013,
NOT_hit2014=NOT_Lili2014,
NOT_hit2015=NOT_Lili2015,
NOT_hit2016=NOT_Lili2016,
NOT_hit2017=NOT_Lili2017,
NOT_hit2018=NOT_Lili2018,
NOT_hit2019=NOT_Lili2019,
NOT_hit2020=NOT_Lili2020,
NOT_hit2021=NOT_Lili2021,
NOT_hit2022=NOT_Lili2022,
NOT_hit2023=NOT_Lili2023,
Hit2000=Lili2000,
Hit2001=Lili2001,
Hit2002=Lili2002,
Hit2003=Lili2003,
Hit2004=Lili2004,
Hit2005=Lili2005,
Hit2006=Lili2006,
Hit2007=Lili2007,
Hit2008=Lili2008,
Hit2009=Lili2009,
Hit2010=Lili2010,
Hit2011=Lili2011,
Hit2012=Lili2012,
Hit2013=Lili2013,
Hit2014=Lili2014,
Hit2015=Lili2015,
Hit2016=Lili2016,
Hit2017=Lili2017,
Hit2018=Lili2018,
Hit2019=Lili2019,
Hit2020=Lili2020,
Hit2021=Lili2021,
Hit2022=Lili2022,
Hit2023=Lili2023) 

FINAL_DATA_Lili_stack <- FINAL_DATA_Lili_stack %>% 
mutate(hurr_name = "Lili")



FINAL_DATA_Irma_stack <- FINAL_DATA_irma %>%
  select("FIPS":"Irma2023", 
         hurricane_hit = Irma, 
         within_100_hit = within100_irma,
         NOT_hit2000=NOT_Irma2000,
NOT_hit2001=NOT_Irma2001,
NOT_hit2002=NOT_Irma2002,
NOT_hit2003=NOT_Irma2003,
NOT_hit2004=NOT_Irma2004,
NOT_hit2005=NOT_Irma2005,
NOT_hit2006=NOT_Irma2006,
NOT_hit2007=NOT_Irma2007,
NOT_hit2008=NOT_Irma2008,
NOT_hit2009=NOT_Irma2009,
NOT_hit2010=NOT_Irma2010,
NOT_hit2011=NOT_Irma2011,
NOT_hit2012=NOT_Irma2012,
NOT_hit2013=NOT_Irma2013,
NOT_hit2014=NOT_Irma2014,
NOT_hit2015=NOT_Irma2015,
NOT_hit2016=NOT_Irma2016,
NOT_hit2017=NOT_Irma2017,
NOT_hit2018=NOT_Irma2018,
NOT_hit2019=NOT_Irma2019,
NOT_hit2020=NOT_Irma2020,
NOT_hit2021=NOT_Irma2021,
NOT_hit2022=NOT_Irma2022,
NOT_hit2023=NOT_Irma2023,
Hit2000=Irma2000,
Hit2001=Irma2001,
Hit2002=Irma2002,
Hit2003=Irma2003,
Hit2004=Irma2004,
Hit2005=Irma2005,
Hit2006=Irma2006,
Hit2007=Irma2007,
Hit2008=Irma2008,
Hit2009=Irma2009,
Hit2010=Irma2010,
Hit2011=Irma2011,
Hit2012=Irma2012,
Hit2013=Irma2013,
Hit2014=Irma2014,
Hit2015=Irma2015,
Hit2016=Irma2016,
Hit2017=Irma2017,
Hit2018=Irma2018,
Hit2019=Irma2019,
Hit2020=Irma2020,
Hit2021=Irma2021,
Hit2022=Irma2022,
Hit2023=Irma2023) 

FINAL_DATA_Irma_stack <- FINAL_DATA_Irma_stack %>% 
mutate(hurr_name = "Irma")

FINAL_DATA_Isaac_stack <- FINAL_DATA_Isaac2 %>%
  select("FIPS":"Isaac2023", 
         hurricane_hit = Isaac, 
         within_100_hit = within100_Isaac,
         NOT_hit2000=NOT_Isaac2000,
NOT_hit2001=NOT_Isaac2001,
NOT_hit2002=NOT_Isaac2002,
NOT_hit2003=NOT_Isaac2003,
NOT_hit2004=NOT_Isaac2004,
NOT_hit2005=NOT_Isaac2005,
NOT_hit2006=NOT_Isaac2006,
NOT_hit2007=NOT_Isaac2007,
NOT_hit2008=NOT_Isaac2008,
NOT_hit2009=NOT_Isaac2009,
NOT_hit2010=NOT_Isaac2010,
NOT_hit2011=NOT_Isaac2011,
NOT_hit2012=NOT_Isaac2012,
NOT_hit2013=NOT_Isaac2013,
NOT_hit2014=NOT_Isaac2014,
NOT_hit2015=NOT_Isaac2015,
NOT_hit2016=NOT_Isaac2016,
NOT_hit2017=NOT_Isaac2017,
NOT_hit2018=NOT_Isaac2018,
NOT_hit2019=NOT_Isaac2019,
NOT_hit2020=NOT_Isaac2020,
NOT_hit2021=NOT_Isaac2021,
NOT_hit2022=NOT_Isaac2022,
NOT_hit2023=NOT_Isaac2023,
Hit2000=Isaac2000,
Hit2001=Isaac2001,
Hit2002=Isaac2002,
Hit2003=Isaac2003,
Hit2004=Isaac2004,
Hit2005=Isaac2005,
Hit2006=Isaac2006,
Hit2007=Isaac2007,
Hit2008=Isaac2008,
Hit2009=Isaac2009,
Hit2010=Isaac2010,
Hit2011=Isaac2011,
Hit2012=Isaac2012,
Hit2013=Isaac2013,
Hit2014=Isaac2014,
Hit2015=Isaac2015,
Hit2016=Isaac2016,
Hit2017=Isaac2017,
Hit2018=Isaac2018,
Hit2019=Isaac2019,
Hit2020=Isaac2020,
Hit2021=Isaac2021,
Hit2022=Isaac2022,
Hit2023=Isaac2023) 

FINAL_DATA_Isaac_stack <- FINAL_DATA_Isaac_stack %>% 
mutate(hurr_name = "Isaac")

FINAL_DATA_Ike_stack <- FINAL_DATA_Ike %>%
  select("FIPS":"Ike2023", 
         hurricane_hit = Ike, 
         within_100_hit = within100_Ike,
         NOT_hit2000=NOT_Ike2000,
NOT_hit2001=NOT_Ike2001,
NOT_hit2002=NOT_Ike2002,
NOT_hit2003=NOT_Ike2003,
NOT_hit2004=NOT_Ike2004,
NOT_hit2005=NOT_Ike2005,
NOT_hit2006=NOT_Ike2006,
NOT_hit2007=NOT_Ike2007,
NOT_hit2008=NOT_Ike2008,
NOT_hit2009=NOT_Ike2009,
NOT_hit2010=NOT_Ike2010,
NOT_hit2011=NOT_Ike2011,
NOT_hit2012=NOT_Ike2012,
NOT_hit2013=NOT_Ike2013,
NOT_hit2014=NOT_Ike2014,
NOT_hit2015=NOT_Ike2015,
NOT_hit2016=NOT_Ike2016,
NOT_hit2017=NOT_Ike2017,
NOT_hit2018=NOT_Ike2018,
NOT_hit2019=NOT_Ike2019,
NOT_hit2020=NOT_Ike2020,
NOT_hit2021=NOT_Ike2021,
NOT_hit2022=NOT_Ike2022,
NOT_hit2023=NOT_Ike2023,
Hit2000=Ike2000,
Hit2001=Ike2001,
Hit2002=Ike2002,
Hit2003=Ike2003,
Hit2004=Ike2004,
Hit2005=Ike2005,
Hit2006=Ike2006,
Hit2007=Ike2007,
Hit2008=Ike2008,
Hit2009=Ike2009,
Hit2010=Ike2010,
Hit2011=Ike2011,
Hit2012=Ike2012,
Hit2013=Ike2013,
Hit2014=Ike2014,
Hit2015=Ike2015,
Hit2016=Ike2016,
Hit2017=Ike2017,
Hit2018=Ike2018,
Hit2019=Ike2019,
Hit2020=Ike2020,
Hit2021=Ike2021,
Hit2022=Ike2022,
Hit2023=Ike2023) 

FINAL_DATA_Ike_stack <- FINAL_DATA_Ike_stack %>% 
mutate(hurr_name = "Ike")


FINAL_DATA_Ivan_stack <- FINAL_DATA_Ivan %>%
  select("FIPS":"Ivan2023", 
         hurricane_hit = Ivan, 
         within_100_hit = within100_Ivan,
         NOT_hit2000=NOT_Ivan2000,
NOT_hit2001=NOT_Ivan2001,
NOT_hit2002=NOT_Ivan2002,
NOT_hit2003=NOT_Ivan2003,
NOT_hit2004=NOT_Ivan2004,
NOT_hit2005=NOT_Ivan2005,
NOT_hit2006=NOT_Ivan2006,
NOT_hit2007=NOT_Ivan2007,
NOT_hit2008=NOT_Ivan2008,
NOT_hit2009=NOT_Ivan2009,
NOT_hit2010=NOT_Ivan2010,
NOT_hit2011=NOT_Ivan2011,
NOT_hit2012=NOT_Ivan2012,
NOT_hit2013=NOT_Ivan2013,
NOT_hit2014=NOT_Ivan2014,
NOT_hit2015=NOT_Ivan2015,
NOT_hit2016=NOT_Ivan2016,
NOT_hit2017=NOT_Ivan2017,
NOT_hit2018=NOT_Ivan2018,
NOT_hit2019=NOT_Ivan2019,
NOT_hit2020=NOT_Ivan2020,
NOT_hit2021=NOT_Ivan2021,
NOT_hit2022=NOT_Ivan2022,
NOT_hit2023=NOT_Ivan2023,
Hit2000=Ivan2000,
Hit2001=Ivan2001,
Hit2002=Ivan2002,
Hit2003=Ivan2003,
Hit2004=Ivan2004,
Hit2005=Ivan2005,
Hit2006=Ivan2006,
Hit2007=Ivan2007,
Hit2008=Ivan2008,
Hit2009=Ivan2009,
Hit2010=Ivan2010,
Hit2011=Ivan2011,
Hit2012=Ivan2012,
Hit2013=Ivan2013,
Hit2014=Ivan2014,
Hit2015=Ivan2015,
Hit2016=Ivan2016,
Hit2017=Ivan2017,
Hit2018=Ivan2018,
Hit2019=Ivan2019,
Hit2020=Ivan2020,
Hit2021=Ivan2021,
Hit2022=Ivan2022,
Hit2023=Ivan2023) 

FINAL_DATA_Ivan_stack <- FINAL_DATA_Ivan_stack %>% 
mutate(hurr_name = "Ivan")
```

```{}
stacked_data_test <- rbind(FINAL_DATA_Matthew_stack, FINAL_DATA_Michael_stack, FINAL_DATA_Gustav_stack, FINAL_DATA_Irma_stack, FINAL_DATA_Isaac_stack, FINAL_DATA_Ike_stack, FINAL_DATA_Ivan_stack, FINAL_DATA_Lili_stack)
```

```{r}
# removing hurricanes affected by recession in 2007

# for Lili, removing data after 2007
FINAL_DATA_Lili_stack <- FINAL_DATA_Lili_stack %>% 
  filter(Year <= 2007)

stacked_data_test_1 <- rbind(FINAL_DATA_Matthew_stack, FINAL_DATA_Michael_stack, FINAL_DATA_Irma_stack, FINAL_DATA_Isaac_stack, FINAL_DATA_Lili_stack)

stacked_data_test <- read_excel("stacked_data_test (1).xlsx", 
    skip = 1)

stacked_data_test$Average_HomeValue <- as.numeric(stacked_data_test$Average_HomeValue)
stacked_data_test$Income <- as.numeric(stacked_data_test$Income)
stacked_data_test$Population <- as.numeric(stacked_data_test$Population)

```



### Stacked Data regressions

# OLS

```{r}
# try running a few regressions on stacked data
# OLS Regression
ols_model <- lm(log(Average_HomeValue) ~ hurr_hit +
                 hit_again_5after  + log(Population) + log(Income),
               data = stacked_data_test, weight = Population)


summary(ols_model)


coefficients <- coef(ols_model)


(1-(exp(coefficients['hurr_hit'])))*100
(1-(exp(coefficients['hit_again_5after'])))*100
```


```{r}
ols_model_leads <- lm(log(Average_HomeValue) ~ lead4 + lead3 + lead2 + lead1 + lag1 + lag2 + lag3 + lag4 + lag5+ hit_again_5after  + log(Population) + log(Income), data = stacked_data_test, weights = Population)


summary(ols_model_leads)
```

```{r}
# need a lead4_not_hit + lead3_not_hit + lead2_not_hit + lead1_not_hit + lag0_not_hit + lag1_not_hit + lag2_not_hit + lag3_not_hit + lag4_not_hit + lag5_not_hit + lead4_hit + lead3_hit + lead2_hit + lead1_hit + lag0_hit + lag1_hit + lag2_hit + lag3_hit + lag4_hit + lag5_hit

stacked_data_test$lead4_not_hit <- (stacked_data_test$hurricane_hit==0)*(stacked_data_test$lead4==1)
stacked_data_test$lead3_not_hit <- (stacked_data_test$hurricane_hit==0)*(stacked_data_test$lead3==1)
stacked_data_test$lead2_not_hit <- (stacked_data_test$hurricane_hit==0)*(stacked_data_test$lead2==1)
stacked_data_test$lead1_not_hit <- (stacked_data_test$hurricane_hit==0)*(stacked_data_test$lead1==1)
stacked_data_test$lag0_not_hit <- (stacked_data_test$hurricane_hit==0)*(stacked_data_test$lag0==1)
stacked_data_test$lag1_not_hit <- (stacked_data_test$hurricane_hit==0)*(stacked_data_test$lag1==1)
stacked_data_test$lag2_not_hit <- (stacked_data_test$hurricane_hit==0)*(stacked_data_test$lag2==1)
stacked_data_test$lag3_not_hit <- (stacked_data_test$hurricane_hit==0)*(stacked_data_test$lag3==1)
stacked_data_test$lag4_not_hit <- (stacked_data_test$hurricane_hit==0)*(stacked_data_test$lag4==1)
stacked_data_test$lag5_not_hit <- (stacked_data_test$hurricane_hit==0)*(stacked_data_test$lag5==1)

stacked_data_test$lead4_hit <- (stacked_data_test$hurricane_hit==1)*(stacked_data_test$lead4==1)
stacked_data_test$lead3_hit <- (stacked_data_test$hurricane_hit==1)*(stacked_data_test$lead3==1)
stacked_data_test$lead2_hit <- (stacked_data_test$hurricane_hit==1)*(stacked_data_test$lead2==1)
stacked_data_test$lead1_hit <- (stacked_data_test$hurricane_hit==1)*(stacked_data_test$lead1==1)
stacked_data_test$lag0_hit <- (stacked_data_test$hurricane_hit==1)*(stacked_data_test$lag0==1)
stacked_data_test$lag1_hit <- (stacked_data_test$hurricane_hit==1)*(stacked_data_test$lag1==1)
stacked_data_test$lag2_hit <- (stacked_data_test$hurricane_hit==1)*(stacked_data_test$lag2==1)
stacked_data_test$lag3_hit <- (stacked_data_test$hurricane_hit==1)*(stacked_data_test$lag3==1)
stacked_data_test$lag4_hit <- (stacked_data_test$hurricane_hit==1)*(stacked_data_test$lag4==1)
stacked_data_test$lag5_hit <- (stacked_data_test$hurricane_hit==1)*(stacked_data_test$lag5==1)



#write_csv(stacked_data_test, "stacked_data_test.csv")

# after working in EXCEL - looked at maps and created two new variables: Coast and Inland
# importing new dataset so that we can account for differences between coastal counties hit and not hit, as well as comparing non-coastal with each other

#stacked_data_test <- read_excel("stacked_data_test.xlsx", skip = 1)

stacked_data_test <- read_excel("stacked_data_test (1).xlsx", 
    skip = 1)


# if NA, that means that the county is not coastal, nor is close to the coast. So, create a new variable called "Inland" that IF NA, that is 1, if not, 0
stacked_data_test$Inland <- ifelse(is.na(stacked_data_test$Coast) | is.na(stacked_data_test$Close_coast), 1, 0)


# if Coast or Clost_coast are NAs, put 0 on them. 

stacked_data_test$Coast <- ifelse(is.na(stacked_data_test$Coast), 0, stacked_data_test$Coast)
stacked_data_test$Inland <- ifelse(is.na(stacked_data_test$Inland), 0, stacked_data_test$Inland)
stacked_data_test$Close_coast <- ifelse(is.na(stacked_data_test$Close_coast), 0, stacked_data_test$Close_coast)


stacked_data_test$Average_HomeValue <- as.numeric(stacked_data_test$Average_HomeValue)
stacked_data_test$Income <- as.numeric(stacked_data_test$Income)
stacked_data_test$Population <- as.numeric(stacked_data_test$Population)


# add a variable called "Coastal_or_close" that is a 0 Inland is 1, if Inland is 0, put a 1

stacked_data_test$Coastal_or_close <- ifelse(stacked_data_test$Inland == 1, 0, 1)


# checking for NAs
nas_count <- sum(is.na(stacked_data_test$Close_coast))
nas_count <- sum(is.na(stacked_data_test$Inland))
nas_count <- sum(is.na(stacked_data_test$Coast))

```

```{r}
ols_model_leads <- lm(log(Average_HomeValue) ~ Hit_hard + hit_again_5after + log(Population) + log(Income) + Coast + Inland + Inland + lead4_not_hit+lead3_not_hit+lead2_not_hit+lead1_not_hit+lag1_not_hit+lag2_not_hit+lag3_not_hit+lag4_not_hit+lag5_not_hit+lead4_hit+lead3_hit+lead2_hit+lead1_hit+lag0_hit+lag1_hit+lag2_hit+lag3_hit+lag4_hit+lag5_hit, data = stacked_data_test, weights = Population)


summary(ols_model_leads)
```

### Defining treshold for hurricane damage (Hit_hard)

```{r}
# Assuming your dataset is named hurricane_data and the property damage column is PROPERTY_DAMAGE_NUM
# Replace these names with your actual dataset and column names

# Summary statistics
summary(stacked_data_test$total_damage)

treshold <- stacked_data_test %>% 
  filter(total_damage > 0)


# Mean
mean(treshold$total_damage)

# Median
median(treshold$total_damage)

# Interquartile Range (IQR)
iqr_damage <- IQR(treshold$total_damage)

# Standard Deviation
std_dev_damage <- sd(treshold$total_damage)

# Display the results
cat("Summary Statistics:\n", summary_stats, "\n")
cat("\nMean:", mean_damage, "\n")
cat("Median:", median_damage, "\n")
cat("Q1 (25th percentile):", q1, "\n")
cat("Interquartile Range (IQR):", iqr_damage, "\n")
cat("Standard Deviation:", std_dev_damage, "\n")

median(treshold$DAMAGE_PROPERTY_NUM_final)
median(treshold$DAMAGE_CROPS_NUM_final)
```


```{r}

property_treshold <- 1190000
crops_treshold <- 1

# Create a new column indicating heavily hit or not

stacked_data_test$impact <- ifelse(stacked_data_test$DAMAGE_PROPERTY_NUM_final > property_treshold, "hit_hard_property", ifelse(stacked_data_test$DAMAGE_PROPERTY_NUM_final >= 1, "hit_soft_property", "not_hit_property"))

stacked_data_test$impact_crops <- ifelse(stacked_data_test$DAMAGE_CROPS_NUM_final > crops_treshold, "hit_hard_crops", ifelse(stacked_data_test$DAMAGE_CROPS_NUM_final >= 1, "hit_soft_crops", "not_hit_crops"))



# Create a new column "Hit_hard"
stacked_data_test$Hit_hard <- ifelse(stacked_data_test$impact == "hit_hard", 1, 0)

# Create a new column "hit_soft"
stacked_data_test$hit_soft <- ifelse(stacked_data_test$impact == "hit_soft", 1, 0)

stacked_data_test$not_hit <- ifelse(stacked_data_test$impact == "not_hit", 1, 0)


# Create a new column "Hit_hard"
stacked_data_test$Hit_hard_property <- ifelse(stacked_data_test$impact == "hit_hard_property", 1, 0)

# Create a new column "hit_soft"
stacked_data_test$hit_soft_property <- ifelse(stacked_data_test$impact == "hit_soft_property", 1, 0)

stacked_data_test$not_hit_property <- ifelse(stacked_data_test$impact == "not_hit_property", 1, 0)



# Create a new column "Hit_hard"
stacked_data_test$Hit_hard_crops <- ifelse(stacked_data_test$impact == "hit_hard_crops", 1, 0)

# Create a new column "hit_soft"
stacked_data_test$hit_soft_crops <- ifelse(stacked_data_test$impact == "hit_soft_crops", 1, 0)

stacked_data_test$not_hit_crops <- ifelse(stacked_data_test$impact == "not_hit_crops", 1, 0)


```


### Offical Models - AIC and BIC

```{r}

stacked_data_test_all <- stacked_data_test

ols_stacked_data_test_all <- lm(log(Average_HomeValue) ~ Hit_hard_property + hit_soft_property +hit_again_5after + log(Population) + log(Income) + lead4_not_hit+lead3_not_hit+lead2_not_hit+lead1_not_hit+lag1_not_hit+lag2_not_hit+lag3_not_hit+lag4_not_hit+lag5_not_hit+lead4_hit+lead3_hit+lead2_hit+lead1_hit+lag0_hit+lag1_hit+lag2_hit+lag3_hit+lag4_hit+lag5_hit, data = stacked_data_test_all, weights = Income)


stacked_data_test_all2 <- stacked_data_test

ols_stacked_data_test_all2 <- lm(log(Average_HomeValue) ~ Hit_hard_property + hit_soft_property +hit_again_5after + log(Population) + log(Income) + lead4_not_hit+lead3_not_hit+lead2_not_hit+lead1_not_hit+lag1_not_hit+lag2_not_hit+lag3_not_hit+lag4_not_hit+lag5_not_hit+lead4_hit+lead3_hit+lead2_hit+lead1_hit+lag0_hit+lag1_hit+lag2_hit+lag3_hit+lag4_hit+lag5_hit, data = stacked_data_test_all2, weights = Population)



stacked_data_test_coast <- stacked_data_test %>% 
  filter(Coast == 1
         )

ols_stacked_data_test_coast <- lm(log(Average_HomeValue) ~ Hit_hard_property + hit_soft_property +hit_again_5after + log(Population) + log(Income) + lead4_not_hit+lead3_not_hit+lead2_not_hit+lead1_not_hit+lag1_not_hit+lag2_not_hit+lag3_not_hit+lag4_not_hit+lag5_not_hit+lead4_hit+lead3_hit+lead2_hit+lead1_hit+lag0_hit+lag1_hit+lag2_hit+lag3_hit+lag4_hit+lag5_hit, data = stacked_data_test_coast, weights = Income)

stacked_data_test_coast2 <- stacked_data_test %>% 
  filter(Coast == 1
         )

ols_stacked_data_test_coast2 <- lm(log(Average_HomeValue) ~ Hit_hard_property + hit_soft_property +hit_again_5after + log(Population) + log(Income) + lead4_not_hit+lead3_not_hit+lead2_not_hit+lead1_not_hit+lag1_not_hit+lag2_not_hit+lag3_not_hit+lag4_not_hit+lag5_not_hit+lead4_hit+lead3_hit+lead2_hit+lead1_hit+lag0_hit+lag1_hit+lag2_hit+lag3_hit+lag4_hit+lag5_hit, data = stacked_data_test_coast2, weights = Population)





stacked_data_test_coastorclose <- stacked_data_test %>% 
  filter(Coastal_or_close == 1
         )

ols_stacked_data_test_coastorclose <- lm(log(Average_HomeValue) ~ Hit_hard_property + hit_soft_property +hit_again_5after + log(Population) + log(Income) + lead4_not_hit+lead3_not_hit+lead2_not_hit+lead1_not_hit+lag1_not_hit+lag2_not_hit+lag3_not_hit+lag4_not_hit+lag5_not_hit+lead4_hit+lead3_hit+lead2_hit+lead1_hit+lag0_hit+lag1_hit+lag2_hit+lag3_hit+lag4_hit+lag5_hit, data = stacked_data_test_coastorclose, weights = Income)


stacked_data_test_coastorclose2 <- stacked_data_test %>% 
  filter(Coastal_or_close == 1
         )

ols_stacked_data_test_coastorclose2 <- lm(log(Average_HomeValue) ~ Hit_hard_property + hit_soft_property +hit_again_5after + log(Population) + log(Income) + lead4_not_hit+lead3_not_hit+lead2_not_hit+lead1_not_hit+lag1_not_hit+lag2_not_hit+lag3_not_hit+lag4_not_hit+lag5_not_hit+lead4_hit+lead3_hit+lead2_hit+lead1_hit+lag0_hit+lag1_hit+lag2_hit+lag3_hit+lag4_hit+lag5_hit, data = stacked_data_test_coastorclose2, weights = Population)






stacked_data_test_coast <- stacked_data_test %>% 
  filter(Close_coast == 1
         )

ols_stacked_data_test_close <- lm(log(Average_HomeValue) ~ Hit_hard_property + hit_soft_property +hit_again_5after + log(Population) + log(Income) + lead4_not_hit+lead3_not_hit+lead2_not_hit+lead1_not_hit+lag1_not_hit+lag2_not_hit+lag3_not_hit+lag4_not_hit+lag5_not_hit+lead4_hit+lead3_hit+lead2_hit+lead1_hit+lag0_hit+lag1_hit+lag2_hit+lag3_hit+lag4_hit+lag5_hit, data = stacked_data_test_coast, weights = Income)

stacked_data_test_coast2 <- stacked_data_test %>% 
  filter(Close_coast == 1
         )

ols_stacked_data_test_close2 <- lm(log(Average_HomeValue) ~ Hit_hard_property + hit_soft_property +hit_again_5after + log(Population) + log(Income) + lead4_not_hit+lead3_not_hit+lead2_not_hit+lead1_not_hit+lag1_not_hit+lag2_not_hit+lag3_not_hit+lag4_not_hit+lag5_not_hit+lead4_hit+lead3_hit+lead2_hit+lead1_hit+lag0_hit+lag1_hit+lag2_hit+lag3_hit+lag4_hit+lag5_hit, data = stacked_data_test_coast2, weights = Population)

```

```{r}
ols_stacked_data_test_all
ols_stacked_data_test_all2
ols_stacked_data_test_coast
ols_stacked_data_test_coast2
ols_stacked_data_test_coastorclose
ols_stacked_data_test_coastorclose2
ols_stacked_data_test_close
ols_stacked_data_test_close2



# Create a data frame to store AIC and BIC values
aic_bic_df <- data.frame(Model = character(),
                         AIC = numeric(),
                         BIC = numeric())

# Loop through the models
for (model_name in c( "ols_stacked_data_test_all","ols_stacked_data_test_all2","ols_stacked_data_test_coast",
                      "ols_stacked_data_test_coast2",
                      "ols_stacked_data_test_coastorclose",
                      "ols_stacked_data_test_coastorclose2",
                      "ols_stacked_data_test_close",
                      "ols_stacked_data_test_close2")) {
    
    # Get the model object
    model <- get(model_name)
    
    # Calculate AIC and BIC
    aic <- AIC(model)
    bic <- BIC(model)
    
    # Append to the data frame
    aic_bic_df <- rbind(aic_bic_df, data.frame(Model = model_name, AIC = aic, BIC = bic))
}

print(aic_bic_df)

```




Interpretations

Intercept: Counties never hit by a hurricane, with 0 populatino, and 0 median income, are expected to have, on average, log(5.260253)

Hit_Hard: Counties hit hard by a hurricane, with 0 population, 0 median income, are expected to have, on average, an average home value that is 0.1% lower than counties not hit at all

Hit_soft: Counties hit hard by a hurricane, with 0 population, 0 median income, are expected to have, on average, an average home value that is 0.26% lower than counties not hit at all

hit_again_5after: Counties hit by a hurricane in the 5 years after a major hurricane strike,with 0 population, 0 median income, are expected to have, on average, an average home value that is 0.12% higher than counties that never got hit by a hurricane. So, we expect counties that get hit more often to have higher real estate prices than counties that don't get hit as often.

log(Population): Holding all else constant, a one percent increase in population is expected to increase the average home value 0.031%, on average. 

log(Income): Holding all else constant, a one percent increase in Income is expected to increase the average home value by 0.60%, on average. 

LAGS:

In order to find the difference in difference between coastal counties that were hit, with coastal counties within 100 miles that were not hit, we need to subtract the coefficient for counties not hit with the coefficient for counties hit, and then subtract the base year for counties hit (lag0) to account for any differences that were already present between the two. By doing this calculation and multiplying them by 100 we get the percentage difference in difference between the two. 

lag1_hit: The difference in difference between coastal counties that were hit, and coastal counties that were not hit a year after the hurricane strike is 1.11%. That tells us that the average home value for coastal counties that were hit, compared to coastal counties that were not hit was 1.1% higher a year after the hurricane strike, on average. 

lag5_hit: The difference in difference between coastal counties that were hit, and coastal counties that were not hit 5 years after the hurricane strike is 6.36%. That tells us that the average home value for coastal counties that were hit, compared to coastal counties that were not hit was 5.35% higher 5 years after the hurricane strike, on average. 

```{r}
# fixed effects

library(plm)
fixed_effects_model <- plm(log(Average_HomeValue) ~ log(Population) + log(Income) + hit_again_5after + Hit_hard_property + hit_soft_property + hurr_hit,
                           data = stacked_data_test_coast, model = "within",
                           index = c("unique_id"))

summary(fixed_effects_model)
```


```{r specific_chunk_name, echo=TRUE}
# Print a table comparing the three models
library(stargazer)
stargazer(
  ols_stacked_data_test_coast,
  ols_stacked_data_test_coast2,
  title = "Regression Model Comparison",
  align = TRUE, # Align coefficients
  dep.var.caption = "Dependent Variable", # Caption for dependent variable
  dep.var.labels.include = FALSE, # Do not include dependent variable labels
  type = "text" # Output type (you can change it to LaTeX, HTML, etc.)
)
```


```{r specific_chunk_name, echo=TRUE}
stargazer(
  ols_stacked_data_test_coast,
  ols_stacked_data_test_coast2,
  title = "Regression Model Comparison",
  type = "latex",
  digits = 3,
  star.cutoffs = c(0.1, 0.05, 0.01)
)
```


# graphs with stacked data

```{r}

# variable relationships

# Create the scatter plot
ggplot(stacked_data_test, aes(x = log(Income), y = log(Average_HomeValue))) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "blue") +  # Add a linear regression line

  labs(x = "log(Income)", y = "log(Average Home Value)", title = "Relationship between log(Income) and log(Average Home Value)")+
  theme_classic()

ggplot(stacked_data_test, aes(x = log(Population), y = log(Average_HomeValue))) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "blue") +  # Add a linear regression line

  labs(y = "log(Average Home Value)", x = "log(Population)", title = "Relationship between log(Population) and log(Average Home Value)")+
  theme_classic()


# Create a data frame with fitted values and residuals
residuals_df <- data.frame(
  Fitted_Values = fitted(ols_stacked_data_test_coast),
  Residuals = residuals(ols_stacked_data_test_coast)
)

# Create the plot of fitted values vs residuals
ggplot(residuals_df, aes(x = Fitted_Values, y = Residuals)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "blue") +  # Add a linear regression line

  labs(x = "Fitted Values", y = "Residuals", title = "Fitted Values vs Residuals Plot") +
  theme_classic()


```



```{r}
## creating a variable "Time_from_hurr", if lead4_nothit or lead4_hit == 1, 4, 

stacked_data_test_graph <- stacked_data_test %>%
  mutate(Time_from_hurr = case_when(
    lead4_not_hit == 1 | lead4_hit == 1 ~ - 4,
    lead3_not_hit == 1 | lead3_hit == 1 ~ - 3,
    lead2_not_hit == 1 | lead2_hit == 1 ~ - 2,
    lead1_not_hit == 1 | lead1_hit == 1 ~ - 1,
    lag0_not_hit == 1 | lag0_hit == 1 ~ 0,
    lag1_not_hit == 1 | lag1_hit == 1 ~ 1,
    lag2_not_hit == 1 | lag2_hit == 1 ~ 2,
    lag3_not_hit == 1 | lag3_hit == 1 ~ 3,
    lag4_not_hit == 1 | lag4_hit == 1 ~ 4,
    lag5_not_hit == 1 | lag5_hit == 1 ~ 5,
    TRUE ~ NA_real_
  ))


```



```{r}
ols_model_leads <- lm(log(Average_HomeValue) ~ hit_again_5after + log(Population) + log(Income)+ hurr_name, data = stacked_data_test, weights = Population)

summary(ols_model_leads)
```


### making some graphs

```{r}
# make sure if a county was hit, that is not included in the "within_100" version
# creating new variable called "within_100_irma_updated"

FINAL_DATA_irma$within_100_updated <- ifelse(FINAL_DATA_irma$Irma == 1, 0, 1)


FINAL_DATA_irma <- FINAL_DATA_irma %>%
   mutate(Counties_Hit_by_Irma = ifelse(Irma == 1, 1, 0),
          Counties_within_100_miles_of_Hit = ifelse(within_100_updated == 1, 1, 0))



ggplot() +
  geom_point(data = subset(FINAL_DATA_irma, Counties_Hit_by_Irma == 1),
             aes(x = Year, y = Average_HomeValue, color = "Counties Hit by Irma"), size = 0.2, alpha = 0.4) +
  geom_point(data = subset(FINAL_DATA_irma, Counties_within_100_miles_of_Hit == 1),
             aes(x = Year, y = Average_HomeValue, color = "Counties within 100 miles of Hit"), size = 0.2, alpha = 0.1) +
  geom_vline(xintercept = 2017, linetype = "dashed", color = "red") +
  geom_smooth(data = subset(FINAL_DATA_irma, Counties_Hit_by_Irma == 1 & Year < 2017),
              aes(x = Year, y = Average_HomeValue, color = "Counties Hit by Irma"), method = "lm", se = FALSE, size = 1.2) +
  geom_smooth(data = subset(FINAL_DATA_irma, Counties_within_100_miles_of_Hit == 1 & Year < 2017),
              aes(x = Year, y = Average_HomeValue, color = "Counties within 100 miles of Hit"), method = "lm", se = FALSE, size = 1.2) +
  geom_smooth(data = subset(FINAL_DATA_irma, Counties_Hit_by_Irma == 1 & Year >= 2017),
              aes(x = Year, y = Average_HomeValue, color = "Counties Hit by Irma"), method = "lm", se = FALSE, size = 1.2) +
  geom_smooth(data = subset(FINAL_DATA_irma, Counties_within_100_miles_of_Hit == 1 & Year >= 2017),
              aes(x = Year, y = Average_HomeValue, color = "Counties within 100 miles of Hit"), method = "lm", se = FALSE, size = 1.2) +
  scale_color_manual(values = c("Counties Hit by Irma" = "dark blue", "Counties within 100 miles of Hit" = "darkorange", 
                                "smooth_Counties Hit by Irma" = "steelblue", "smooth_Counties within 100 miles of Hit" = "darkorange")) +
  labs(title = "Average Home Value Differences After Hurricane Irma (2017)",
       x = "Year", y = "Average Home Value") +
  theme_classic()



```

```{r}
# make sure if a county was hit, that is not included in the "within_100" version
# creating new variable called "within_100_irma_updated"

FINAL_DATA_Isaac2$within_100_updated <- ifelse(FINAL_DATA_Isaac2$Isaac == 1, 0, 1)

FINAL_DATA_Isaac <- FINAL_DATA_Isaac2 %>%
   mutate(Counties_Hit_by_Isaac = ifelse(Isaac == 1, 1, 0),
          Counties_within_100_miles_of_Hit = ifelse(within_100_updated == 1, 1, 0))



ggplot() +
  geom_point(data = subset(FINAL_DATA_Isaac, Counties_Hit_by_Isaac == 1),
             aes(x = Year, y = Average_HomeValue, color = "Counties Hit by Isaac"), size = 0.2, alpha = 0.4) +
  geom_point(data = subset(FINAL_DATA_Isaac, Counties_within_100_miles_of_Hit == 1),
             aes(x = Year, y = Average_HomeValue, color = "Counties within 100 miles of Hit"), size = 0.2, alpha = 0.1) +
  geom_vline(xintercept = 2012, linetype = "dashed", color = "red") +
  geom_smooth(data = subset(FINAL_DATA_Isaac, Counties_Hit_by_Isaac == 1 & Year < 2012),
              aes(x = Year, y = Average_HomeValue, color = "Counties Hit by Isaac"), method = "lm", se = FALSE, size = 1.2) +
  geom_smooth(data = subset(FINAL_DATA_Isaac, Counties_within_100_miles_of_Hit == 1 & Year < 2012),
              aes(x = Year, y = Average_HomeValue, color = "Counties within 100 miles of Hit"), method = "lm", se = FALSE, size = 1.2) +
  geom_smooth(data = subset(FINAL_DATA_Isaac, Counties_Hit_by_Isaac == 1 & Year >= 2012),
              aes(x = Year, y = Average_HomeValue, color = "Counties Hit by Isaac"), method = "lm", se = FALSE, size = 1.2) +
  geom_smooth(data = subset(FINAL_DATA_Isaac, Counties_within_100_miles_of_Hit == 1 & Year >= 2012),
              aes(x = Year, y = Average_HomeValue, color = "Counties within 100 miles of Hit"), method = "lm", se = FALSE, size = 1.2) +
  scale_color_manual(values = c("Counties Hit by Isaac" = "dark blue", "Counties within 100 miles of Hit" = "darkorange", 
                                "smooth_Counties Hit by Isaac" = "steelblue", "smooth_Counties within 100 miles of Hit" = "darkorange")) +
  labs(title = "Average Home Value Differences After Hurricane Isaac (2012)",
       x = "Year", y = "Average Home Value") +
  theme_classic()
```


```{r}
# make sure if a county was hit, that is not included in the "within_100" version
# creating new variable called "within_100_irma_updated"

FINAL_DATA_Michael$within_100_updated <- ifelse(FINAL_DATA_Michael$Michael == 1, 0, 1)

FINAL_DATA_Michael <- FINAL_DATA_Michael %>%
   mutate(Counties_Hit_by_Michael = ifelse(Michael == 1, 1, 0),
          Counties_within_100_miles_of_Hit = ifelse(within_100_updated == 1, 1, 0))



ggplot() +
  geom_point(data = subset(FINAL_DATA_Michael, Counties_Hit_by_Michael == 1),
             aes(x = Year, y = Average_HomeValue, color = "Counties Hit by Michael"), size = 0.2, alpha = 0.4) +
  geom_point(data = subset(FINAL_DATA_Michael, Counties_within_100_miles_of_Hit == 1),
             aes(x = Year, y = Average_HomeValue, color = "Counties within 100 miles of Hit"), size = 0.2, alpha = 0.1) +
  geom_vline(xintercept = 2018, linetype = "dashed", color = "red") +
  geom_smooth(data = subset(FINAL_DATA_Michael, Counties_Hit_by_Michael == 1 & Year < 2018),
              aes(x = Year, y = Average_HomeValue, color = "Counties Hit by Michael"), method = "lm", se = FALSE, size = 1.2) +
  geom_smooth(data = subset(FINAL_DATA_Michael, Counties_within_100_miles_of_Hit == 1 & Year < 2018),
              aes(x = Year, y = Average_HomeValue, color = "Counties within 100 miles of Hit"), method = "lm", se = FALSE, size = 1.2) +
  geom_smooth(data = subset(FINAL_DATA_Michael, Counties_Hit_by_Michael == 1 & Year >= 2018),
              aes(x = Year, y = Average_HomeValue, color = "Counties Hit by Michael"), method = "lm", se = FALSE, size = 1.2) +
  geom_smooth(data = subset(FINAL_DATA_Michael, Counties_within_100_miles_of_Hit == 1 & Year >= 2018),
              aes(x = Year, y = Average_HomeValue, color = "Counties within 100 miles of Hit"), method = "lm", se = FALSE, size = 1.2) +
  scale_color_manual(values = c("Counties Hit by Michael" = "dark blue", "Counties within 100 miles of Hit" = "darkorange", 
                                "smooth_Counties Hit by Michael" = "steelblue", "smooth_Counties within 100 miles of Hit" = "darkorange")) +
  labs(title = "Average Home Value Differences After Hurricane Michael (2018)",
       x = "Year", y = "Average Home Value") +
  theme_classic()

FINAL_DATA_Michael$within_100_updated <- ifelse(FINAL_DATA_Michael$Michael == 1, 0, 1)
```

```{r}
FINAL_DATA_Matthew$within_100_updated <- ifelse(FINAL_DATA_Matthew$Matthew == 1, 0, 1)

FINAL_DATA_Matthew <- FINAL_DATA_Matthew %>%
   mutate(Counties_Hit_by_Matthew = ifelse(Matthew == 1, 1, 0),
          Counties_within_100_miles_of_Hit = ifelse(within_100_updated == 1, 1, 0))



ggplot() +
  geom_point(data = subset(FINAL_DATA_Matthew, Counties_Hit_by_Matthew == 1),
             aes(x = Year, y = Average_HomeValue, color = "Counties Hit by Matthew"), size = 0.2, alpha = 0.4) +
  geom_point(data = subset(FINAL_DATA_Matthew, Counties_within_100_miles_of_Hit == 1),
             aes(x = Year, y = Average_HomeValue, color = "Counties within 100 miles of Hit"), size = 0.2, alpha = 0.1) +
  geom_vline(xintercept = 2016, linetype = "dashed", color = "red") +
  geom_smooth(data = subset(FINAL_DATA_Matthew, Counties_Hit_by_Matthew == 1 & Year < 2016),
              aes(x = Year, y = Average_HomeValue, color = "Counties Hit by Matthew"), method = "lm", se = FALSE, size = 1.2) +
  geom_smooth(data = subset(FINAL_DATA_Matthew, Counties_within_100_miles_of_Hit == 1 & Year < 2016),
              aes(x = Year, y = Average_HomeValue, color = "Counties within 100 miles of Hit"), method = "lm", se = FALSE, size = 1.2) +
  geom_smooth(data = subset(FINAL_DATA_Matthew, Counties_Hit_by_Matthew == 1 & Year >= 2016),
              aes(x = Year, y = Average_HomeValue, color = "Counties Hit by Matthew"), method = "lm", se = FALSE, size = 1.2) +
  geom_smooth(data = subset(FINAL_DATA_Matthew, Counties_within_100_miles_of_Hit == 1 & Year >= 2016),
              aes(x = Year, y = Average_HomeValue, color = "Counties within 100 miles of Hit"), method = "lm", se = FALSE, size = 1.2) +
  scale_color_manual(values = c("Counties Hit by Matthew" = "dark blue", "Counties within 100 miles of Hit" = "darkorange", 
                                "smooth_Counties Hit by Matthew" = "steelblue", "smooth_Counties within 100 miles of Hit" = "darkorange")) +
  labs(title = "Average Home Value Differences After Hurricane Matthew (2016)",
       x = "Year", y = "Average Home Value") +
  theme_classic()
```

```{r}
FINAL_DATA_Lili$within_100_updated <- ifelse(FINAL_DATA_Lili$Lili == 1, 0, 1)

FINAL_DATA_Lili <- FINAL_DATA_Lili %>%
   mutate(Counties_Hit_by_Lili = ifelse(Lili == 1, 1, 0),
          Counties_within_100_miles_of_Hit = ifelse(within_100_updated == 1, 1, 0))

FINAL_DATA_Lili <- FINAL_DATA_Lili %>% 
  filter(Year <= 2007)

ggplot() +
  geom_point(data = subset(FINAL_DATA_Lili, Counties_Hit_by_Lili == 1),
             aes(x = Year, y = Average_HomeValue, color = "Counties Hit by Lili"), size = 0.2, alpha = 0.4) +
  geom_point(data = subset(FINAL_DATA_Lili, Counties_within_100_miles_of_Hit == 1),
             aes(x = Year, y = Average_HomeValue, color = "Counties within 100 miles of Hit"), size = 0.2, alpha = 0.1) +
  geom_vline(xintercept = 2002, linetype = "dashed", color = "red") +
  geom_smooth(data = subset(FINAL_DATA_Lili, Counties_Hit_by_Lili == 1 & Year < 2002),
              aes(x = Year, y = Average_HomeValue, color = "Counties Hit by Lili"), method = "lm", se = FALSE, size = 1.2) +
  geom_smooth(data = subset(FINAL_DATA_Lili, Counties_within_100_miles_of_Hit == 1 & Year < 2002),
              aes(x = Year, y = Average_HomeValue, color = "Counties within 100 miles of Hit"), method = "lm", se = FALSE, size = 1.2) +
  geom_smooth(data = subset(FINAL_DATA_Lili, Counties_Hit_by_Lili == 1 & Year >= 2002),
              aes(x = Year, y = Average_HomeValue, color = "Counties Hit by Lili"), method = "lm", se = FALSE, size = 1.2) +
  geom_smooth(data = subset(FINAL_DATA_Lili, Counties_within_100_miles_of_Hit == 1 & Year >= 2002),
              aes(x = Year, y = Average_HomeValue, color = "Counties within 100 miles of Hit"), method = "lm", se = FALSE, size = 1.2) +
  scale_color_manual(values = c("Counties Hit by Lili" = "dark blue", "Counties within 100 miles of Hit" = "darkorange", 
                                "smooth_Counties Hit by Lili" = "steelblue", "smooth_Counties within 100 miles of Hit" = "darkorange")) +
  labs(title = "Average Home Value Differences After Hurricane Lili (2002)",
       x = "Year", y = "Average Home Value") +
  theme_classic()
```




```{r}
ggplot() +
  geom_point(data = subset(FINAL_DATA_Michael, Michael == 1),
             aes(x = Year, y = Average_HomeValue, color = "Michael"), size = 0.5) +
  geom_point(data = subset(FINAL_DATA_Michael, within_100_updated == 1),
             aes(x = Year, y = Average_HomeValue, color = "within_100_updated"), size = 0.5) +
  geom_vline(xintercept = 2018, linetype = "dashed", color = "red") +
  geom_smooth(data = subset(FINAL_DATA_Michael, Michael == 1 & Year < 2018),
              aes(x = Year, y = Average_HomeValue), color = "blue", method = "lm", se = FALSE) +
  geom_smooth(data = subset(FINAL_DATA_Michael, within_100_updated == 1 & Year < 2018),
              aes(x = Year, y = Average_HomeValue), color = "red", method = "lm", se = FALSE) +
  geom_smooth(data = subset(FINAL_DATA_Michael, Michael == 1 & Year >= 2018),
              aes(x = Year, y = Average_HomeValue), color = "blue", method = "lm", se = FALSE) +
  geom_smooth(data = subset(FINAL_DATA_Michael, within_100_updated == 1 & Year >= 2018),
              aes(x = Year, y = Average_HomeValue), color = "red", method = "lm", se = FALSE) +
  scale_color_manual(values = c("Michael" = "dark blue", "within_100_updated" = "light blue")) +
  labs(title = "Average Home Value Differences After Hurricane Michael",
       x = "Year", y = "Average Home Value") +
  theme_classic()




```
```{r}
# make sure if a county was hit, that is not included in the "within_100" version
# creating new variable called "within_100_irma_updated"

FINAL_DATA_Ivan$within_100_updated <- ifelse(FINAL_DATA_Ivan$Ivan == 1, 0, 1)


ggplot() +
  geom_point(data = subset(FINAL_DATA_Ivan, Ivan == 1),
             aes(x = Year, y = Average_HomeValue, color = "Ivan"), size = 0.5) +
  geom_point(data = subset(FINAL_DATA_Ivan, within_100_updated == 1),
             aes(x = Year, y = Average_HomeValue, color = "within_100_updated"), size = 0.5) +
  geom_vline(xintercept = 2004, linetype = "dashed", color = "red") +
  geom_smooth(data = subset(FINAL_DATA_Ivan, Ivan == 1 & Year < 2004),
              aes(x = Year, y = Average_HomeValue), color = "blue", method = "lm", se = FALSE) +
  geom_smooth(data = subset(FINAL_DATA_Ivan, within_100_updated == 1 & Year < 2004),
              aes(x = Year, y = Average_HomeValue), color = "red", method = "lm", se = FALSE) +
  geom_smooth(data = subset(FINAL_DATA_Ivan, Ivan == 1 & Year >= 2004),
              aes(x = Year, y = Average_HomeValue), color = "blue", method = "lm", se = FALSE) +
  geom_smooth(data = subset(FINAL_DATA_Ivan, within_100_updated == 1 & Year >= 2004),
              aes(x = Year, y = Average_HomeValue), color = "red", method = "lm", se = FALSE) +
  scale_color_manual(values = c("Ivan" = "dark blue", "within_100_updated" = "light blue")) +
  labs(title = "Average Home Value Differences After Hurricane Ivan",
       x = "Year", y = "Average Home Value") +
  theme_minimal()
```

```{r}


FINAL_DATA_Lili$within_100_updated <- ifelse(FINAL_DATA_Lili$Lili == 1, 0, 1)

FINAL_DATA_Lili <- FINAL_DATA_Lili %>% 
  filter(Year <= 2007)

ggplot() +
  geom_point(data = subset(FINAL_DATA_Lili, Lili == 1),
             aes(x = Year, y = Average_HomeValue, color = "Lili"), size = 0.5) +
  geom_point(data = subset(FINAL_DATA_Lili, within_100_updated == 1),
             aes(x = Year, y = Average_HomeValue, color = "within_100_updated"), size = 0.5) +
  geom_vline(xintercept = 2002, linetype = "dashed", color = "red") +
  geom_smooth(data = subset(FINAL_DATA_Lili, Lili == 1 & Year < 2002),
              aes(x = Year, y = Average_HomeValue), color = "blue", method = "lm", se = FALSE) +
  geom_smooth(data = subset(FINAL_DATA_Lili, within_100_updated == 1 & Year < 2002),
              aes(x = Year, y = Average_HomeValue), color = "red", method = "lm", se = FALSE) +
  geom_smooth(data = subset(FINAL_DATA_Lili, Lili == 1 & Year >= 2002),
              aes(x = Year, y = Average_HomeValue), color = "blue", method = "lm", se = FALSE) +
  geom_smooth(data = subset(FINAL_DATA_Lili, within_100_updated == 1 & Year >= 2002),
              aes(x = Year, y = Average_HomeValue), color = "red", method = "lm", se = FALSE) +
  scale_color_manual(values = c("Lili" = "dark blue", "within_100_updated" = "light blue")) +
  labs(title = "Average Home Value Differences After Hurricane Lili",
       x = "Year", y = "Average Home Value") +
  theme_minimal()
```

```{r}
FINAL_DATA_Ike$within_100_updated <- ifelse(FINAL_DATA_Ike$Ike == 1, 0, 1)


ggplot() +
  geom_point(data = subset(FINAL_DATA_Ike, Ike == 1),
             aes(x = Year, y = Average_HomeValue, color = "Ike"), size = 0.5) +
  geom_point(data = subset(FINAL_DATA_Ike, within_100_updated == 1),
             aes(x = Year, y = Average_HomeValue, color = "within_100_updated"), size = 0.5) +
  geom_vline(xintercept = 2008, linetype = "dashed", color = "red") +
  geom_smooth(data = subset(FINAL_DATA_Ike, Ike == 1 & Year < 2008),
              aes(x = Year, y = Average_HomeValue), color = "blue", method = "lm", se = FALSE) +
  geom_smooth(data = subset(FINAL_DATA_Ike, within_100_updated == 1 & Year < 2008),
              aes(x = Year, y = Average_HomeValue), color = "red", method = "lm", se = FALSE) +
  geom_smooth(data = subset(FINAL_DATA_Ike, Ike == 1 & Year >= 2008),
              aes(x = Year, y = Average_HomeValue), color = "blue", method = "lm", se = FALSE) +
  geom_smooth(data = subset(FINAL_DATA_Ike, within_100_updated == 1 & Year >= 2008),
              aes(x = Year, y = Average_HomeValue), color = "red", method = "lm", se = FALSE) +
  scale_color_manual(values = c("Ike" = "dark blue", "within_100_updated" = "light blue")) +
  labs(title = "Average Home Value Differences After Hurricane Ike",
       x = "Year", y = "Average Home Value") +
  theme_minimal()
```


```{r}
FINAL_DATA_Matthew$within_100_updated <- ifelse(FINAL_DATA_Matthew$Matthew == 1, 0, 1)


ggplot() +
  geom_point(data = subset(FINAL_DATA_Matthew, Matthew == 1),
             aes(x = Year, y = Average_HomeValue, color = "Matthew"), size = 0.5) +
  geom_point(data = subset(FINAL_DATA_Matthew, within_100_updated == 1),
             aes(x = Year, y = Average_HomeValue, color = "within_100_updated"), size = 0.5) +
  geom_vline(xintercept = 2016, linetype = "dashed", color = "red") +
  geom_smooth(data = subset(FINAL_DATA_Matthew, Matthew == 1 & Year < 2016),
              aes(x = Year, y = Average_HomeValue), color = "blue", method = "lm", se = FALSE) +
  geom_smooth(data = subset(FINAL_DATA_Matthew, within_100_updated == 1 & Year < 2016),
              aes(x = Year, y = Average_HomeValue), color = "red", method = "lm", se = FALSE) +
  geom_smooth(data = subset(FINAL_DATA_Matthew, Matthew == 1 & Year >= 2016),
              aes(x = Year, y = Average_HomeValue), color = "blue", method = "lm", se = FALSE) +
  geom_smooth(data = subset(FINAL_DATA_Matthew, within_100_updated == 1 & Year >= 2016),
              aes(x = Year, y = Average_HomeValue), color = "red", method = "lm", se = FALSE) +
  scale_color_manual(values = c("Matthew" = "dark blue", "within_100_updated" = "light blue")) +
  labs(title = "Average Home Value Differences After Hurricane Matthew",
       x = "Year", y = "Average Home Value") +
  theme_minimal()
```



```{r}
### I MIGHT NEED TO ADD STORM SURGE DAMAGE WHICH IS CAUSED BY HURRICANES - CAN FIND IT IN NATURAL DISASTERS WEBSITE

# - looking into it, storm surge data does not seeem to matter as much, in Florida, Hurricane damage amounted to 53 B in total, while storm surge damage amounted to only 1B. Not enough impact to make a difference in my opinion
# only one that was more was Texas, with 14B with hurricanes, and 6B with storm surge, but again, not even close to being similar. But could be worth looking into



## what I could do is maybe create a dummy variable that turns 1 if the hurricane was over a certain treshold and call it "strong hurricane" and 0 if it's below and see if there are any differences by doing so.
```


### MAPS

-   use leaflet package - look at rico's CP

```{r}
library(leaflet)
library(maps)
library(dplyr)
library(htmltools)
library(tidycensus)
library(rmapshaper)
```

```{r}
# Median household income
countyGIS <- get_acs(geography = "county", 
              variables = "B01001_001",
              geometry = TRUE,
              keep_geo_vars = TRUE)

# State data (for displaying state borders on map)
stateGIS <- get_acs(geography = "state",
              variables = "B01001_001",
              geometry = TRUE,
              keep_geo_vars = FALSE)


## Simplify GIS data to make file sizes smaller. This essentially removes some details along coastlines and very-not-straight borders. 
stateGIS <- ms_simplify(stateGIS, keep = 0.01)
countyGIS <- ms_simplify(countyGIS, keep = 0.01)


countyGIS <- countyGIS %>% 
                select(FIPS = GEOID, 
                       stFIPS = STATEFP, 
                       coFIPS = COUNTYFP, 
                       coNAME = NAME.x, 
                       pop = estimate, 
                       geometry)

## For mapping, let's drop the following: 
##   Puerto Rico (ST FIPS 72) (no election data)
##   Alaska (ST FIPS 02) (voting data isn't reported by county...we could also map the legislative districts, but we're not going to since we'd rather have smaller maps without those extra details)
##   Hawaii (ST FIPS 15) (so our map can zoom in on continental 48 states)
countyGIS <- countyGIS %>% filter(stFIPS != "72" & stFIPS != "02" & stFIPS != "15")
stateGIS <- stateGIS %>% filter(GEOID != "72" & GEOID != "02" & GEOID != "15")


## join 2-character state abbreviation and create name = "county, St" for labeling maps (e.g., Outagamie, WI) 
fipsToSTcode <- fips_codes %>% select(stFIPS = state_code, stNAME = state) %>% unique()

countyGIS <- inner_join(countyGIS,fipsToSTcode,by="stFIPS")

countyGIS <- countyGIS %>% mutate(name = paste0(coNAME,", ", stNAME)) # county name, state name (outagamie, WI)



countyGIS$FIPS <- as.character(countyGIS$FIPS)

# Now Joining COUNTYGIS data with my dataset (DATASET2)

countyGIS$FIPS <-  as.numeric(countyGIS$FIPS)

DATASET_4_maps <- left_join(countyGIS,DATASET2,by="FIPS")
```

## stacked data map


```{r}
stacked_data_test$DEATHS_final <- as.numeric(stacked_data_test$DEATHS_final)
stacked_data_test$INJURIES_final <- as.numeric(stacked_data_test$INJURIES_final)
stacked_data_test$FIPS <- as.character(stacked_data_test$FIPS)

countyGIS$FIPS <-  as.character(countyGIS$FIPS)

#write.csv(stacked_data_test, "stacked_data_test.csv")

DATASET_4_maps_stacked <- left_join(countyGIS,stacked_data_test,by="FIPS")


result <- DATASET_4_maps_stacked %>%
  filter(hurr_name == "Irma") %>% 
  group_by(FIPS) %>%
  summarise(
    name = last(name),
    Income = mean(Income),
    hurr_name = last(hurr_name),
    Population = mean(Population),
    Average_HomeValue = mean(Average_HomeValue),
    AREA = last(AREA),
    RISK_SCORE = last(RISK_SCORE),
    DAMAGE_PROPERTY_NUM = sum(DAMAGE_PROPERTY_NUM_final),
    DAMAGE_CROPS_NUM = sum(DAMAGE_CROPS_NUM_final),
    DEATHS = sum(DEATHS_final),
    INJURIES = sum(INJURIES_final),
    Hit = ifelse(any(hurricane_hit == 1), 1, 0),
    within100 = ifelse(any(within_100_hit == 1), 1, 0)
  )


```


```{r}
#write.csv(result, "result.csv")

# filter out irma fips that I don't want in the map
fips_to_remove <- c(38043, 37039, 13313, 13295, 13291, 13257, 13241, 13227, 13223, 13213, 13187, 13147, 13139, 13137, 13135, 13129, 13123, 13121, 13119, 13117, 13115, 13111, 13085, 13067, 13057, 13055, 13047, 13015, 13013, 13011, 1019, 1015, 1029, 13233, 13143, 13045, 13097, 1017, 13285, 13199, 13077, 13113, 13063, 13089, 13247, 13217, 13297, 13219, 13059, 13195, 13281, 37043, 13311, 45073, 13105, 13317, 13221, 13219, 13133, 13265, 13317, 13159, 13211, 13255, 13285, 1111, 13149, 13151, 13157, 48373, 48457, 13145, 13215, 13197, 13263, 13269, 13193, 13079, 13293, 13231, 13171, 13079, 13153, 13289, 13021, 13169, 13237, 13009, 13319, 13303, 13141, 13301, 13035, 13207, 13225)

result$Hit[result$FIPS %in% fips_to_remove] <- 0
result$within100[result$FIPS %in% fips_to_remove] <- 0

result <- result %>%
  filter(!(FIPS %in% fips_to_remove))

# add to within100

fipstoadd <- c(12055, 12099, 48373, 48457, 48241, 48351, 28109, 28131, 18039, 1053, 1039, 1061)
result$within100[result$FIPS %in% fipstoadd] <- 1


CustomGIS <- result %>%
  mutate(
    coloring = case_when(
      Hit == 1 ~ "red",
      within100 == 1 ~ "yellow",
      TRUE ~ "ffffff00"
    )
  )


CustomPopupLabels_stacked <- lapply(1:nrow(CustomGIS), function(i) {
  if (!is.na(CustomGIS$Hit[i]) && !is.na(CustomGIS$within100[i]) &&
      (CustomGIS$Hit[i] == 1 | CustomGIS$within100[i] == 1)) {
    paste0(
      "<br><strong>", CustomGIS$name[i], " (", CustomGIS$FIPS[i], ")</strong>",
      "<br><font color='Black'>",
      "Average Home Value: ", scales::dollar(CustomGIS$Average_HomeValue[i], big.mark = ",", digits = 4),
      "<br>Damage to Property: ", scales::dollar(CustomGIS$DAMAGE_PROPERTY_NUM[i] / 1e6, big.mark = ",", digits = 4),
      " million",
      "<br>Damage to Crops: ", scales::dollar(CustomGIS$DAMAGE_CROPS_NUM[i] / 1e6, big.mark = ",", digits = 4),
      " million",
      "<br>Deaths: ", CustomGIS$DEATHS[i],
      "<br>Injuries: ", CustomGIS$INJURIES[i],
      "<br>Median Income: ", scales::dollar(CustomGIS$Income[i], big.mark = ",", digits = 4),
      "<br>Population: ", scales::comma(CustomGIS$Population[i], big.mark = ",", digits = 4),
      "</font>"
    )
  } else {
    NULL
  }
}) %>% lapply(htmltools::HTML)

#pal <- colorBin("RdBu", result_Isaac$Isaac,bins = c(0,1), reverse=TRUE)

leaflet(CustomGIS, options = leafletOptions(crsClass = "L.CRS.EPSG3857"), width="100%") %>%
  addTiles() %>%
  addPolygons(weight = 0.5, color = "gray", opacity = 0.7,
    fillColor = ~coloring, fillOpacity = 1, smoothFactor = .5,
    label = CustomPopupLabels_stacked,
    labelOptions = labelOptions(direction = "auto")) %>%
    addPolygons(data = countyGIS,fill = FALSE,color="white",weight = 1) 


```



```{r}
popupLabels <- paste0("<strong>",DATASET_4_maps$name," (",DATASET_4_maps$FIPS,")</strong>",               # generating the text for label using our data
                   # "<br><font color= 'Black'",
                    #format(countyGIS$pctWinner,digits=4, trim=TRUE),                  # formatting the text with html
                    "</font>",
                    "<br>Hurricane Frequency %: ", format(DATASET_4_maps$HRCN_AFREQ,big.mark=",", trim=TRUE, digits = 4)
                    ) %>% 
              lapply(htmltools::HTML)
```

```{r}
DATASET_4_maps$HRCN_AFREQ <- DATASET_4_maps$HRCN_AFREQ*100

pal <- colorBin("RdBu", DATASET_4_maps$HRCN_AFREQ,bins = c(0,20,30,40,45,49,51,55,60,70,80, 100), reverse=TRUE)

leaflet(DATASET_4_maps, options = leafletOptions(crsClass = "L.CRS.EPSG3857"), width="100%") %>%
  addPolygons(weight = 0.5, color = "gray", opacity = 0.7,
    fillColor = ~pal(HRCN_AFREQ), fillOpacity = 1, smoothFactor = .5,
    label = popupLabels, # using the labels created above
    labelOptions = labelOptions(direction = "auto")) %>%
    addPolygons(data = stateGIS,fill = FALSE,color="white",weight = 1) %>%
    addLegend(pal = pal,values = ~DATASET_4_maps$HRCN_AFREQ, opacity = 0.7, title = "Hurricane Frequency",position = "bottomleft")


```

## maps of counties hit by Isabel

```{r}
DATASET_4_maps_isabel <- left_join(countyGIS,FINAL_DATA_Isabel,by="FIPS")

result <- DATASET_4_maps_isabel %>%
  group_by(FIPS) %>%
  summarise(
    name = last(name),
    Income = last(Income),
    Population = last(Population),
    Average_HomeValue = last(Average_HomeValue),
    AREA = last(AREA),
    RISK_SCORE = last(RISK_SCORE),
    DAMAGE_PROPERTY_NUM = last(DAMAGE_PROPERTY_NUM_final),
    DAMAGE_CROPS_NUM = last(DAMAGE_CROPS_NUM_final),
    DEATHS = last(DEATHS_final),
    INJURIES = last(INJURIES_final),
    Isabel = ifelse(any(Isabel == 1), 1, 0),
    within100_Isabel = ifelse(any(within100_Isabel == 1), 1, 0)
  )

```

```{r}

CustomGIS <- result %>%
  mutate(
    coloring = case_when(
      Isabel == 1 ~ "red",
      within100_Isabel == 1 ~ "yellow",
      TRUE ~ "gray"
    )
  )


CustomPopupLabels <- paste0("<strong>",CustomGIS$name," (",CustomGIS$FIPS,")</strong>",               # generating the text for label using our data
                   # "<br><font color= 'Black'",
                    #format(countyGIS$pctWinner,digits=4, trim=TRUE),                  # formatting the text with html
                    "</font>",
                    "<br> Average Home Value: ", format(CustomGIS$Average_HomeValue,big.mark=",", trim=TRUE, digits = 4)
                    ) %>% 
              lapply(htmltools::HTML)





pal <- colorBin("RdBu", result$Isabel,bins = c(0,1), reverse=TRUE)

leaflet(CustomGIS, options = leafletOptions(crsClass = "L.CRS.EPSG3857"), width="100%") %>%
  addPolygons(weight = 0.5, color = "gray", opacity = 0.7,
    fillColor = ~coloring, fillOpacity = 1, smoothFactor = .5,
    label = CustomPopupLabels, # using the labels created above
    labelOptions = labelOptions(direction = "auto")) %>%
    addPolygons(data = countyGIS,fill = FALSE,color="white",weight = 1)


```

## maps of counties hit by Irma

```{r}
DATASET_4_maps_irma <- left_join(countyGIS,FINAL_DATA_irma,by="FIPS")

result_irma <- DATASET_4_maps_irma %>%
  group_by(FIPS) %>%
  summarise(
    name = last(name),
    Income = last(Income),
    Population = last(Population),
    Average_HomeValue = mean(Average_HomeValue),
    AREA = last(AREA),
    RISK_SCORE = last(RISK_SCORE),
    DAMAGE_PROPERTY_NUM = last(DAMAGE_PROPERTY_NUM),
    DAMAGE_CROPS_NUM = last(DAMAGE_CROPS_NUM),
    DEATHS = last(DEATHS),
    INJURIES = last(INJURIES),
    Irma = ifelse(any(Irma == 1), 1, 0),
    within100_irma = ifelse(any(within100_irma == 1), 1, 0)
  )

```

```{r}
CustomPopupLabels_irma <- paste0("<strong>",CustomGIS$name," (",CustomGIS$FIPS,")</strong>",               # generating the text for label using our data
                   # "<br><font color= 'Black'",
                    #format(countyGIS$pctWinner,digits=4, trim=TRUE),                  # formatting the text with html
                    "</font>",
                    "<br> Average Home Value: ", format(CustomGIS$Average_HomeValue,big.mark=",", trim=TRUE, digits = 4)
                    ) %>% 
              lapply(htmltools::HTML)
```

```{r}

CustomGIS_irma <- result_irma %>%
  mutate(
    coloring = case_when(
      Irma == 1 ~ "red",
      within100_irma == 1 ~ "yellow",
      TRUE ~ "gray"
    )
  )

pal <- colorBin("RdBu", result_irma$Irma,bins = c(0,1), reverse=TRUE)

leaflet(CustomGIS_irma, options = leafletOptions(crsClass = "L.CRS.EPSG3857"), width="100%") %>%
  addPolygons(weight = 0.5, color = "gray", opacity = 0.7,
    fillColor = ~coloring, fillOpacity = 1, smoothFactor = .5,
    label = CustomPopupLabels_irma, # using the labels created above
    labelOptions = labelOptions(direction = "auto")) %>%
    addPolygons(data = countyGIS,fill = FALSE,color="white",weight = 1)


```

## maps of counties hit by Isaac

```{r}
DATASET_4_maps_isaac <- left_join(countyGIS,FINAL_DATA_Isaac,by="FIPS")

result_isaac <- DATASET_4_maps_isaac %>%
  group_by(FIPS) %>%
  summarise(
    name = last(name),
    Income = last(Income),
    Population = last(Population),
    Average_HomeValue = mean(Average_HomeValue),
    AREA = last(AREA),
    RISK_SCORE = last(RISK_SCORE),
    DAMAGE_PROPERTY_NUM = last(DAMAGE_PROPERTY_NUM),
    DAMAGE_CROPS_NUM = last(DAMAGE_CROPS_NUM),
    DEATHS = last(DEATHS),
    INJURIES = last(INJURIES),
    isaac = ifelse(any(Isaac == 1), 1, 0),
    within100_isaac = ifelse(any(within100_Isaac == 1), 1, 0)
  )

```

```{r}
CustomPopupLabels_isaac <- paste0("<strong>",CustomGIS$name," (",CustomGIS$FIPS,")</strong>",               # generating the text for label using our data
                   # "<br><font color= 'Black'",
                    #format(countyGIS$pctWinner,digits=4, trim=TRUE),                  # formatting the text with html
                    "</font>",
                    "<br> Average Home Value: ", format(CustomGIS$Average_HomeValue,big.mark=",", trim=TRUE, digits = 4)
                    ) %>% 
              lapply(htmltools::HTML)
```

```{r}

CustomGIS_isaac <- result_isaac %>%
  mutate(
    coloring = case_when(
      isaac == 1 ~ "red",
      within100_isaac == 1 ~ "yellow",
      TRUE ~ "gray"
    )
  )

pal <- colorBin("RdBu", result_isaac$isaac,bins = c(0,1), reverse=TRUE)

leaflet(CustomGIS_isaac, options = leafletOptions(crsClass = "L.CRS.EPSG3857"), width="100%") %>%
  addPolygons(weight = 0.5, color = "gray", opacity = 0.7,
    fillColor = ~coloring, fillOpacity = 1, smoothFactor = .5,
    label = CustomPopupLabels_isaac, # using the labels created above
    labelOptions = labelOptions(direction = "auto")) %>%
    addPolygons(data = countyGIS,fill = FALSE,color="white",weight = 1)


```

## maps of counties hit by Michael

```{r}

DATASET_4_maps_Michael <- left_join(countyGIS,FINAL_DATA_Michael,by="FIPS")

result_Michael <- DATASET_4_maps_Michael %>%
  group_by(FIPS) %>%
  summarise(
    name = last(name),
    Income = mean(Income[Year == 2018]),
    Population = mean(Population[Year == 2018]),
    Average_HomeValue = mean(Average_HomeValue[Year == 2018]),
    AREA = last(AREA),
    RISK_SCORE = last(RISK_SCORE),
    DAMAGE_PROPERTY_NUM = last(DAMAGE_PROPERTY_NUM_final),
    DAMAGE_CROPS_NUM = last(DAMAGE_CROPS_NUM_final),
    DEATHS = last(DEATHS_final),
    INJURIES = last(INJURIES_final),
    Michael = ifelse(any(Michael == 1), 1, 0),
    within100_michael = ifelse(any(within100_michael == 1), 1, 0)
  )


write_csv(result_Michael, "result_Michael.csv")

```

```{r}

CustomGIS_Michael <- result_Michael %>%
  mutate(
    coloring = case_when(
      Michael == 1 ~ "red",
      within100_michael == 1 ~ "yellow",
      TRUE ~ "gray"
    )
  )


CustomPopupLabels_Michael <- paste0(
  "<strong>", CustomGIS_Michael$name, " (", CustomGIS_Michael$FIPS, ")</strong>",
  "<br><font color='Black'>",
  "Average Home Value: ", scales::dollar(CustomGIS_Michael$Average_HomeValue, big.mark = ",", digits = 4),
  "<br>Damage to Property: ", CustomGIS_Michael$DAMAGE_PROPERTY_NUM,
  "<br>Damage to Crops: ", CustomGIS_Michael$DAMAGE_CROPS_NUM,
  "<br>Deaths: ", CustomGIS_Michael$DEATHS,
  "<br>Injuries: ", CustomGIS_Michael$INJURIES,
  "<br>Income: ", scales::dollar(CustomGIS_Michael$Income, big.mark = ",", digits = 4),
  "<br>Population: ", scales::comma(CustomGIS_Michael$Population, big.mark = ",", digits = 4),
  "</font>"
) %>% lapply(htmltools::HTML)





CustomPopupLabels_Michael <- lapply(1:nrow(CustomGIS_Michael), function(i) {
  if (!is.na(CustomGIS_Michael$Michael[i]) && !is.na(CustomGIS_Michael$within100_michael[i]) &&
      (CustomGIS_Michael$Michael[i] == 1 | CustomGIS_Michael$within100_michael[i] == 1)) {
    paste0(
      "<strong>", CustomGIS_Michael$name[i], " (", CustomGIS_Michael$FIPS[i], ")</strong>",
      "<br><font color='Black'>",
      "Average Home Value: ", scales::dollar(CustomGIS_Michael$Average_HomeValue[i], big.mark = ",", digits = 4),
      "<br>Damage to Property: ", scales::dollar(CustomGIS_Michael$DAMAGE_PROPERTY_NUM[i] / 1e6, big.mark = ",", digits = 4),
      " million",
      "<br>Damage to Crops: ", scales::dollar(CustomGIS_Michael$DAMAGE_CROPS_NUM[i] / 1e6, big.mark = ",", digits = 4),
      " million",
      "<br>Deaths: ", CustomGIS_Michael$DEATHS[i],
      "<br>Injuries: ", CustomGIS_Michael$INJURIES[i],
      "<br>Median Income: ", scales::dollar(CustomGIS_Michael$Income[i], big.mark = ",", digits = 4),
      "<br>Population: ", scales::comma(CustomGIS_Michael$Population[i], big.mark = ",", digits = 4),
      "</font>"
    )
  } else {
    NULL
  }
}) %>% lapply(htmltools::HTML)

#pal <- colorBin("RdBu", result_Michael$Michael,bins = c(0,1), reverse=TRUE)

leaflet(CustomGIS_Michael, options = leafletOptions(crsClass = "L.CRS.EPSG3857"), width="100%") %>%
  addPolygons(weight = 0.5, color = "gray", opacity = 0.7,
    fillColor = ~coloring, fillOpacity = 1, smoothFactor = .5,
    label = CustomPopupLabels_Michael,
    labelOptions = labelOptions(direction = "auto")) %>%
    addPolygons(data = countyGIS,fill = FALSE,color="white",weight = 1)




```

## maps of counties hit by Isaac

```{r}
DATASET_4_maps_Isaac <- left_join(countyGIS,FINAL_DATA_Isaac2,by="FIPS")

result_Isaac <- DATASET_4_maps_Isaac %>%
  group_by(FIPS) %>%
  summarise(
    name = last(name),
    Income = mean(Income[Year == 2018]),
    Population = mean(Population[Year == 2018]),
    Average_HomeValue = mean(Average_HomeValue[Year == 2018]),
    AREA = last(AREA),
    RISK_SCORE = last(RISK_SCORE),
    DAMAGE_PROPERTY_NUM = last(DAMAGE_PROPERTY_NUM_final),
    DAMAGE_CROPS_NUM = last(DAMAGE_CROPS_NUM_final),
    DEATHS = last(DEATHS_final),
    INJURIES = last(INJURIES_final),
    Isaac = ifelse(any(Isaac == 1), 1, 0),
    within100_Isaac = ifelse(any(within100_Isaac == 1), 1, 0)
  )


CustomGIS_Isaac <- result_Isaac %>%
  mutate(
    coloring = case_when(
      Isaac == 1 ~ "red",
      within100_Isaac == 1 ~ "yellow",
      TRUE ~ "gray"
    )
  )


CustomPopupLabels_Isaac <- paste0(
  "<strong>", CustomGIS_Isaac$name, " (", CustomGIS_Isaac$FIPS, ")</strong>",
  "<br><font color='Black'>",
  "Average Home Value: ", scales::dollar(CustomGIS_Isaac$Average_HomeValue, big.mark = ",", digits = 4),
  "<br>Damage to Property: ", CustomGIS_Isaac$DAMAGE_PROPERTY_NUM,
  "<br>Damage to Crops: ", CustomGIS_Isaac$DAMAGE_CROPS_NUM,
  "<br>Deaths: ", CustomGIS_Isaac$DEATHS,
  "<br>Injuries: ", CustomGIS_Isaac$INJURIES,
  "<br>Income: ", scales::dollar(CustomGIS_Isaac$Income, big.mark = ",", digits = 4),
  "<br>Population: ", scales::comma(CustomGIS_Isaac$Population, big.mark = ",", digits = 4),
  "</font>"
) %>% lapply(htmltools::HTML)





CustomPopupLabels_Isaac <- lapply(1:nrow(CustomGIS_Isaac), function(i) {
  if (!is.na(CustomGIS_Isaac$Isaac[i]) && !is.na(CustomGIS_Isaac$within100_Isaac[i]) &&
      (CustomGIS_Isaac$Isaac[i] == 1 | CustomGIS_Isaac$within100_Isaac[i] == 1)) {
    paste0(
      "<strong>", CustomGIS_Isaac$name[i], " (", CustomGIS_Isaac$FIPS[i], ")</strong>",
      "<br><font color='Black'>",
      "Average Home Value: ", scales::dollar(CustomGIS_Isaac$Average_HomeValue[i], big.mark = ",", digits = 4),
      "<br>Damage to Property: ", scales::dollar(CustomGIS_Isaac$DAMAGE_PROPERTY_NUM[i] / 1e6, big.mark = ",", digits = 4),
      " million",
      "<br>Damage to Crops: ", scales::dollar(CustomGIS_Isaac$DAMAGE_CROPS_NUM[i] / 1e6, big.mark = ",", digits = 4),
      " million",
      "<br>Deaths: ", CustomGIS_Isaac$DEATHS[i],
      "<br>Injuries: ", CustomGIS_Isaac$INJURIES[i],
      "<br>Median Income: ", scales::dollar(CustomGIS_Isaac$Income[i], big.mark = ",", digits = 4),
      "<br>Population: ", scales::comma(CustomGIS_Isaac$Population[i], big.mark = ",", digits = 4),
      "</font>"
    )
  } else {
    NULL
  }
}) %>% lapply(htmltools::HTML)

#pal <- colorBin("RdBu", result_Isaac$Isaac,bins = c(0,1), reverse=TRUE)

leaflet(CustomGIS_Isaac, options = leafletOptions(crsClass = "L.CRS.EPSG3857"), width="100%") %>%
  addPolygons(weight = 0.5, color = "gray", opacity = 0.7,
    fillColor = ~coloring, fillOpacity = 1, smoothFactor = .5,
    label = CustomPopupLabels_Isaac,
    labelOptions = labelOptions(direction = "auto")) %>%
    addPolygons(data = countyGIS,fill = FALSE,color="white",weight = 1)


```

## maps of counties hit for all hurricanes

```{r}
countyGIS$FIPS <-  as.numeric(countyGIS$FIPS)

DATASET_4_maps_Isaac <- left_join(countyGIS,FINAL_DATA_Isaac2,by="FIPS")

result_Isaac <- DATASET_4_maps_Isaac %>%
  group_by(FIPS) %>%
  summarise(
    name = last(name),
    Income = mean(Income[Year == 2018]),
    Population = mean(Population[Year == 2018]),
    Average_HomeValue = mean(Average_HomeValue[Year == 2018]),
    AREA = last(AREA),
    RISK_SCORE = last(RISK_SCORE),
    DAMAGE_PROPERTY_NUM = last(DAMAGE_PROPERTY_NUM_final),
    DAMAGE_CROPS_NUM = last(DAMAGE_CROPS_NUM_final),
    DEATHS = last(DEATHS_final),
    INJURIES = last(INJURIES_final),
    Isaac = ifelse(any(Isaac == 1), 1, 0),
    within100_Isaac = ifelse(any(within100_Isaac == 1), 1, 0)
  )


CustomGIS_Isaac <- result_Isaac %>%
  mutate(
    coloring = case_when(
      Isaac == 1 ~ "red",
      within100_Isaac == 1 ~ "yellow",
      TRUE ~ "gray"
    )
  )


CustomPopupLabels_Isaac <- paste0(
  "<strong>", CustomGIS_Isaac$name, " (", CustomGIS_Isaac$FIPS, ")</strong>",
  "<br><font color='Black'>",
  "Average Home Value: ", scales::dollar(CustomGIS_Isaac$Average_HomeValue, big.mark = ",", digits = 4),
  "<br>Damage to Property: ", CustomGIS_Isaac$DAMAGE_PROPERTY_NUM,
  "<br>Damage to Crops: ", CustomGIS_Isaac$DAMAGE_CROPS_NUM,
  "<br>Deaths: ", CustomGIS_Isaac$DEATHS,
  "<br>Injuries: ", CustomGIS_Isaac$INJURIES,
  "<br>Income: ", scales::dollar(CustomGIS_Isaac$Income, big.mark = ",", digits = 4),
  "<br>Population: ", scales::comma(CustomGIS_Isaac$Population, big.mark = ",", digits = 4),
  "</font>"
) %>% lapply(htmltools::HTML)





CustomPopupLabels_Isaac <- lapply(1:nrow(CustomGIS_Isaac), function(i) {
  if (!is.na(CustomGIS_Isaac$Isaac[i]) && !is.na(CustomGIS_Isaac$within100_Isaac[i]) &&
      (CustomGIS_Isaac$Isaac[i] == 1 | CustomGIS_Isaac$within100_Isaac[i] == 1)) {
    paste0(
      "<strong>", "Hurricane ", "Isaac", "</strong>",
      "<br><strong>", CustomGIS_Isaac$name[i], " (", CustomGIS_Isaac$FIPS[i], ")</strong>",
      "<br><font color='Black'>",
      "Average Home Value: ", scales::dollar(CustomGIS_Isaac$Average_HomeValue[i], big.mark = ",", digits = 4),
      "<br>Damage to Property: ", scales::dollar(CustomGIS_Isaac$DAMAGE_PROPERTY_NUM[i] / 1e6, big.mark = ",", digits = 4),
      " million",
      "<br>Damage to Crops: ", scales::dollar(CustomGIS_Isaac$DAMAGE_CROPS_NUM[i] / 1e6, big.mark = ",", digits = 4),
      " million",
      "<br>Deaths: ", CustomGIS_Isaac$DEATHS[i],
      "<br>Injuries: ", CustomGIS_Isaac$INJURIES[i],
      "<br>Median Income: ", scales::dollar(CustomGIS_Isaac$Income[i], big.mark = ",", digits = 4),
      "<br>Population: ", scales::comma(CustomGIS_Isaac$Population[i], big.mark = ",", digits = 4),
      "</font>"
    )
  } else {
    NULL
  }
}) %>% lapply(htmltools::HTML)

#pal <- colorBin("RdBu", result_Isaac$Isaac,bins = c(0,1), reverse=TRUE)

leaflet(CustomGIS_Isaac, options = leafletOptions(crsClass = "L.CRS.EPSG3857"), width="100%") %>%
  addTiles() %>%
  addPolygons(weight = 0.5, color = "gray", opacity = 0.7,
    fillColor = ~coloring, fillOpacity = 1, smoothFactor = .5,
    label = CustomPopupLabels_Isaac,
    labelOptions = labelOptions(direction = "auto")) %>%
    addPolygons(data = countyGIS,fill = FALSE,color="white",weight = 1) 

DATASET_4_maps_Matthew <- left_join(countyGIS,FINAL_DATA_Matthew,by="FIPS")

result_Matthew <- DATASET_4_maps_Matthew %>%
  group_by(FIPS) %>%
  summarise(
    name = last(name),
    Income = mean(Income[Year == 2018]),
    Population = mean(Population[Year == 2018]),
    Average_HomeValue = mean(Average_HomeValue[Year == 2018]),
    AREA = last(AREA),
    RISK_SCORE = last(RISK_SCORE),
    DAMAGE_PROPERTY_NUM = last(DAMAGE_PROPERTY_NUM_final),
    DAMAGE_CROPS_NUM = last(DAMAGE_CROPS_NUM_final),
    DEATHS = last(DEATHS_final),
    INJURIES = last(INJURIES_final),
    Matthew = ifelse(any(Matthew == 1), 1, 0),
    within100_Matthew = ifelse(any(within100_Matthew == 1), 1, 0)
  )


CustomGIS_Matthew <- result_Matthew %>%
  mutate(
    coloring = case_when(
      Matthew == 1 ~ "red",
      within100_Matthew == 1 ~ "yellow",
      TRUE ~ "gray"
    )
  )


CustomPopupLabels_Matthew <- paste0(
  "<strong>", CustomGIS_Matthew$name, " (", CustomGIS_Matthew$FIPS, ")</strong>",
  "<br><font color='Black'>",
  "Average Home Value: ", scales::dollar(CustomGIS_Matthew$Average_HomeValue, big.mark = ",", digits = 4),
  "<br>Damage to Property: ", CustomGIS_Matthew$DAMAGE_PROPERTY_NUM,
  "<br>Damage to Crops: ", CustomGIS_Matthew$DAMAGE_CROPS_NUM,
  "<br>Deaths: ", CustomGIS_Matthew$DEATHS,
  "<br>Injuries: ", CustomGIS_Matthew$INJURIES,
  "<br>Income: ", scales::dollar(CustomGIS_Matthew$Income, big.mark = ",", digits = 4),
  "<br>Population: ", scales::comma(CustomGIS_Matthew$Population, big.mark = ",", digits = 4),
  "</font>"
) %>% lapply(htmltools::HTML)





CustomPopupLabels_Matthew <- lapply(1:nrow(CustomGIS_Matthew), function(i) {
  if (!is.na(CustomGIS_Matthew$Matthew[i]) && !is.na(CustomGIS_Matthew$within100_Matthew[i]) &&
      (CustomGIS_Matthew$Matthew[i] == 1 | CustomGIS_Matthew$within100_Matthew[i] == 1)) {
    paste0(
      "<strong>", "Hurricane ", "Matthew (2016)", "</strong>",
      "<br><strong>", CustomGIS_Matthew$name[i], " (", CustomGIS_Matthew$FIPS[i], ")</strong>",
      "<br><font color='Black'>",
      "Average Home Value: ", scales::dollar(CustomGIS_Matthew$Average_HomeValue[i], big.mark = ",", digits = 4),
      "<br>Damage to Property: ", scales::dollar(CustomGIS_Matthew$DAMAGE_PROPERTY_NUM[i] / 1e6, big.mark = ",", digits = 4),
      " million",
      "<br>Damage to Crops: ", scales::dollar(CustomGIS_Matthew$DAMAGE_CROPS_NUM[i] / 1e6, big.mark = ",", digits = 4),
      " million",
      "<br>Deaths: ", CustomGIS_Matthew$DEATHS[i],
      "<br>Injuries: ", CustomGIS_Matthew$INJURIES[i],
      "<br>Median Income: ", scales::dollar(CustomGIS_Matthew$Income[i], big.mark = ",", digits = 4),
      "<br>Population: ", scales::comma(CustomGIS_Matthew$Population[i], big.mark = ",", digits = 4),
      "</font>"
    )
  } else {
    NULL
  }
}) %>% lapply(htmltools::HTML)

#pal <- colorBin("RdBu", result_Matthew$Matthew,bins = c(0,1), reverse=TRUE)

leaflet(CustomGIS_Matthew, options = leafletOptions(crsClass = "L.CRS.EPSG3857"), width="100%") %>%
  addPolygons(weight = 0.5, color = "gray", opacity = 0.7,
    fillColor = ~coloring, fillOpacity = 1, smoothFactor = .5,
    label = CustomPopupLabels_Matthew,
    labelOptions = labelOptions(direction = "auto")) %>%
    addPolygons(data = countyGIS,fill = FALSE,color="white",weight = 1)

DATASET_4_maps_Ivan <- left_join(countyGIS,FINAL_DATA_Ivan,by="FIPS")

result_Ivan <- DATASET_4_maps_Ivan %>%
  group_by(FIPS) %>%
  summarise(
    name = last(name),
    Income = mean(Income[Year == 2018]),
    Population = mean(Population[Year == 2018]),
    Average_HomeValue = mean(Average_HomeValue[Year == 2018]),
    AREA = last(AREA),
    RISK_SCORE = last(RISK_SCORE),
    DAMAGE_PROPERTY_NUM = last(DAMAGE_PROPERTY_NUM_final),
    DAMAGE_CROPS_NUM = last(DAMAGE_CROPS_NUM_final),
    DEATHS = last(DEATHS_final),
    INJURIES = last(INJURIES_final),
    Ivan = ifelse(any(Ivan == 1), 1, 0),
    within100_Ivan = ifelse(any(within100_Ivan == 1), 1, 0)
  )



CustomGIS_Ivan <- result_Ivan %>%
  mutate(
    coloring = case_when(
      Ivan == 1 ~ "red",
      within100_Ivan == 1 ~ "yellow",
      TRUE ~ "gray"
    )
  )
```


```{}
CustomPopupLabels_Ivan <- paste0(
  "<strong>", "Hurricane ", "Ivan", "</strong>",
  "<br><strong>", CustomGIS_Ivan$name[i], " (", CustomGIS_Ivan$FIPS[i], ")</strong>",
  "<br><font color='Black'>",
  "Average Home Value: ", scales::dollar(CustomGIS_Ivan$Average_HomeValue, big.mark = ",", digits = 4),
  "<br>Damage to Property: ", CustomGIS_Ivan$DAMAGE_PROPERTY_NUM,
  "<br>Damage to Crops: ", CustomGIS_Ivan$DAMAGE_CROPS_NUM,
  "<br>Deaths: ", CustomGIS_Ivan$DEATHS,
  "<br>Injuries: ", CustomGIS_Ivan$INJURIES,
  "<br>Income: ", scales::dollar(CustomGIS_Ivan$Income, big.mark = ",", digits = 4),
  "<br>Population: ", scales::comma(CustomGIS_Ivan$Population, big.mark = ",", digits = 4),
  "</font>"
) %>% lapply(htmltools::HTML)
```


```{r}
CustomPopupLabels_Ivan <- lapply(1:nrow(CustomGIS_Ivan), function(i) {
  if (!is.na(CustomGIS_Ivan$Ivan[i]) && !is.na(CustomGIS_Ivan$within100_Ivan[i]) &&
      (CustomGIS_Ivan$Ivan[i] == 1 | CustomGIS_Ivan$within100_Ivan[i] == 1)) {
    paste0(
      "<strong>", "Hurricane ", "Ivan (2004)", "</strong>",
      "<br><strong>", CustomGIS_Ivan$name[i], " (", CustomGIS_Ivan$FIPS[i], ")</strong>",
     "<br><font color='Black'>",
      "Average Home Value: ", scales::dollar(CustomGIS_Ivan$Average_HomeValue[i], big.mark = ",", digits = 4),
      "<br>Damage to Property: ", scales::dollar(CustomGIS_Ivan$DAMAGE_PROPERTY_NUM[i] / 1e6, big.mark = ",", digits = 4),
      " million",
      "<br>Damage to Crops: ", scales::dollar(CustomGIS_Ivan$DAMAGE_CROPS_NUM[i] / 1e6, big.mark = ",", digits = 4),
      " million",
      "<br>Deaths: ", CustomGIS_Ivan$DEATHS[i],
      "<br>Injuries: ", CustomGIS_Ivan$INJURIES[i],
      "<br>Median Income: ", scales::dollar(CustomGIS_Ivan$Income[i], big.mark = ",", digits = 4),
      "<br>Population: ", scales::comma(CustomGIS_Ivan$Population[i], big.mark = ",", digits = 4),
      "</font>"
    )
  } else {
    NULL
  }
}) %>% lapply(htmltools::HTML)

#pal <- colorBin("RdBu", result_Ivan$Ivan,bins = c(0,1), reverse=TRUE)

leaflet(CustomGIS_Ivan, options = leafletOptions(crsClass = "L.CRS.EPSG3857"), width="100%") %>%
  addPolygons(weight = 0.5, color = "gray", opacity = 0.7,
    fillColor = ~coloring, fillOpacity = 1, smoothFactor = .5,
    label = CustomPopupLabels_Ivan,
    labelOptions = labelOptions(direction = "auto")) %>%
    addPolygons(data = countyGIS,fill = FALSE,color="white",weight = 1)

DATASET_4_maps_Ike <- left_join(countyGIS,FINAL_DATA_Ike,by="FIPS")

result_Ike <- DATASET_4_maps_Ike %>%
  group_by(FIPS) %>%
  summarise(
    name = last(name),
    Income = mean(Income[Year == 2018]),
    Population = mean(Population[Year == 2018]),
    Average_HomeValue = mean(Average_HomeValue[Year == 2018]),
    AREA = last(AREA),
    RISK_SCORE = last(RISK_SCORE),
    DAMAGE_PROPERTY_NUM = last(DAMAGE_PROPERTY_NUM_final),
    DAMAGE_CROPS_NUM = last(DAMAGE_CROPS_NUM_final),
    DEATHS = last(DEATHS_final),
    INJURIES = last(INJURIES_final),
    Ike = ifelse(any(Ike == 1), 1, 0),
    within100_Ike = ifelse(any(within100_Ike == 1), 1, 0)
  )


CustomGIS_Ike <- result_Ike %>%
  mutate(
    coloring = case_when(
      Ike == 1 ~ "red",
      within100_Ike == 1 ~ "yellow",
      TRUE ~ "gray"
    )
  )


CustomPopupLabels_Ike <- paste0(
  "<strong>", CustomGIS_Ike$name, " (", CustomGIS_Ike$FIPS, ")</strong>",
  "<br><font color='Black'>",
  "Average Home Value: ", scales::dollar(CustomGIS_Ike$Average_HomeValue, big.mark = ",", digits = 4),
  "<br>Damage to Property: ", CustomGIS_Ike$DAMAGE_PROPERTY_NUM,
  "<br>Damage to Crops: ", CustomGIS_Ike$DAMAGE_CROPS_NUM,
  "<br>Deaths: ", CustomGIS_Ike$DEATHS,
  "<br>Injuries: ", CustomGIS_Ike$INJURIES,
  "<br>Income: ", scales::dollar(CustomGIS_Ike$Income, big.mark = ",", digits = 4),
  "<br>Population: ", scales::comma(CustomGIS_Ike$Population, big.mark = ",", digits = 4),
  "</font>"
) %>% lapply(htmltools::HTML)





CustomPopupLabels_Ike <- lapply(1:nrow(CustomGIS_Ike), function(i) {
  if (!is.na(CustomGIS_Ike$Ike[i]) && !is.na(CustomGIS_Ike$within100_Ike[i]) &&
      (CustomGIS_Ike$Ike[i] == 1 | CustomGIS_Ike$within100_Ike[i] == 1)) {
    paste0(
      "<strong>", "Hurricane ", "Ike (2008)", "</strong>",
      "<br><strong>", CustomGIS_Ike$name[i], " (", CustomGIS_Ike$FIPS[i], ")</strong>",
     "<br><font color='Black'>",
      "Average Home Value: ", scales::dollar(CustomGIS_Ike$Average_HomeValue[i], big.mark = ",", digits = 4),
      "<br>Damage to Property: ", scales::dollar(CustomGIS_Ike$DAMAGE_PROPERTY_NUM[i] / 1e6, big.mark = ",", digits = 4),
      " million",
      "<br>Damage to Crops: ", scales::dollar(CustomGIS_Ike$DAMAGE_CROPS_NUM[i] / 1e6, big.mark = ",", digits = 4),
      " million",
      "<br>Deaths: ", CustomGIS_Ike$DEATHS[i],
      "<br>Injuries: ", CustomGIS_Ike$INJURIES[i],
      "<br>Median Income: ", scales::dollar(CustomGIS_Ike$Income[i], big.mark = ",", digits = 4),
      "<br>Population: ", scales::comma(CustomGIS_Ike$Population[i], big.mark = ",", digits = 4),
      "</font>"
    )
  } else {
    NULL
  }
}) %>% lapply(htmltools::HTML)

#pal <- colorBin("RdBu", result_Ike$Ike,bins = c(0,1), reverse=TRUE)

leaflet(CustomGIS_Ike, options = leafletOptions(crsClass = "L.CRS.EPSG3857"), width="100%") %>%
  addPolygons(weight = 0.5, color = "gray", opacity = 0.7,
    fillColor = ~coloring, fillOpacity = 1, smoothFactor = .5,
    label = CustomPopupLabels_Ike,
    labelOptions = labelOptions(direction = "auto")) %>%
    addPolygons(data = countyGIS,fill = FALSE,color="white",weight = 1)

DATASET_4_maps_Irma <- left_join(countyGIS,FINAL_DATA_irma,by="FIPS")

result_Irma <- DATASET_4_maps_Irma %>%
  group_by(FIPS) %>%
  summarise(
    name = last(name),
    Income = mean(Income[Year == 2017]),
    Population = mean(Population[Year == 2017]),
    Average_HomeValue = mean(Average_HomeValue[Year == 2017]),
    AREA = last(AREA),
    RISK_SCORE = last(RISK_SCORE),
    DAMAGE_PROPERTY_NUM = last(DAMAGE_PROPERTY_NUM_final),
    DAMAGE_CROPS_NUM = last(DAMAGE_CROPS_NUM_final),
    DEATHS = last(DEATHS_final),
    INJURIES = last(INJURIES_final),
    Irma = ifelse(any(Irma == 1), 1, 0),
    within100_Irma = ifelse(any(within100_irma == 1), 1, 0)
  )


CustomGIS_Irma <- result_Irma %>%
  mutate(
    coloring = case_when(
      Irma == 1 ~ "red",
      within100_Irma == 1 ~ "yellow",
      TRUE ~ "gray"
    )
  )


CustomPopupLabels_Irma <- paste0(
  "<strong>", CustomGIS_Irma$name, " (", CustomGIS_Irma$FIPS, ")</strong>",
  "<br><font color='Black'>",
  "Average Home Value: ", scales::dollar(CustomGIS_Irma$Average_HomeValue, big.mark = ",", digits = 4),
  "<br>Damage to Property: ", CustomGIS_Irma$DAMAGE_PROPERTY_NUM,
  "<br>Damage to Crops: ", CustomGIS_Irma$DAMAGE_CROPS_NUM,
  "<br>Deaths: ", CustomGIS_Irma$DEATHS,
  "<br>Injuries: ", CustomGIS_Irma$INJURIES,
  "<br>Income: ", scales::dollar(CustomGIS_Irma$Income, big.mark = ",", digits = 4),
  "<br>Population: ", scales::comma(CustomGIS_Irma$Population, big.mark = ",", digits = 4),
  "</font>"
) %>% lapply(htmltools::HTML)





CustomPopupLabels_Irma <- lapply(1:nrow(CustomGIS_Irma), function(i) {
  if (!is.na(CustomGIS_Irma$Irma[i]) && !is.na(CustomGIS_Irma$within100_Irma[i]) &&
      (CustomGIS_Irma$Irma[i] == 1 | CustomGIS_Irma$within100_Irma[i] == 1)) {
    paste0(
      "<strong>", "Hurricane ", "Irma (2017)", "</strong>",
      "<br><strong>", CustomGIS_Irma$name[i], " (", CustomGIS_Irma$FIPS[i], ")</strong>",
     "<br><font color='Black'>",
      "Average Home Value: ", scales::dollar(CustomGIS_Irma$Average_HomeValue[i], big.mark = ",", digits = 4),
      "<br>Damage to Property: ", scales::dollar(CustomGIS_Irma$DAMAGE_PROPERTY_NUM[i] / 1e6, big.mark = ",", digits = 4),
      " million",
      "<br>Damage to Crops: ", scales::dollar(CustomGIS_Irma$DAMAGE_CROPS_NUM[i] / 1e6, big.mark = ",", digits = 4),
      " million",
      "<br>Deaths: ", CustomGIS_Irma$DEATHS[i],
      "<br>Injuries: ", CustomGIS_Irma$INJURIES[i],
      "<br>Median Income: ", scales::dollar(CustomGIS_Irma$Income[i], big.mark = ",", digits = 4),
      "<br>Population: ", scales::comma(CustomGIS_Irma$Population[i], big.mark = ",", digits = 4),
      "</font>"
    )
  } else {
    NULL
  }
}) %>% lapply(htmltools::HTML)

#pal <- colorBin("RdBu", result_Irma$Irma,bins = c(0,1), reverse=TRUE)

leaflet(CustomGIS_Irma, options = leafletOptions(crsClass = "L.CRS.EPSG3857"), width="100%") %>%
  addPolygons(weight = 0.5, color = "gray", opacity = 0.7,
    fillColor = ~coloring, fillOpacity = 1, smoothFactor = .5,
    label = CustomPopupLabels_Irma,
    labelOptions = labelOptions(direction = "auto")) %>%
    addPolygons(data = countyGIS,fill = FALSE,color="white",weight = 1)

DATASET_4_maps_Michael <- left_join(countyGIS,FINAL_DATA_Michael,by="FIPS")

result_Michael <- DATASET_4_maps_Michael %>%
  group_by(FIPS) %>%
  summarise(
    name = last(name),
    Income = mean(Income[Year == 2017]),
    Population = mean(Population[Year == 2017]),
    Average_HomeValue = mean(Average_HomeValue[Year == 2017]),
    AREA = last(AREA),
    RISK_SCORE = last(RISK_SCORE),
    DAMAGE_PROPERTY_NUM = last(DAMAGE_PROPERTY_NUM_final),
    DAMAGE_CROPS_NUM = last(DAMAGE_CROPS_NUM_final),
    DEATHS = last(DEATHS_final),
    INJURIES = last(INJURIES_final),
    Michael = ifelse(any(Michael == 1), 1, 0),
    within100_Michael = ifelse(any(within100_michael == 1), 1, 0)
  )


CustomGIS_Michael <- result_Michael %>%
  mutate(
    coloring = case_when(
      Michael == 1 ~ "red",
      within100_Michael == 1 ~ "yellow",
      TRUE ~ "gray"
    )
  )


CustomPopupLabels_Michael <- paste0(
  "<strong>", CustomGIS_Michael$name, " (", CustomGIS_Michael$FIPS, ")</strong>",
  "<br><font color='Black'>",
  "Average Home Value: ", scales::dollar(CustomGIS_Michael$Average_HomeValue, big.mark = ",", digits = 4),
  "<br>Damage to Property: ", CustomGIS_Michael$DAMAGE_PROPERTY_NUM,
  "<br>Damage to Crops: ", CustomGIS_Michael$DAMAGE_CROPS_NUM,
  "<br>Deaths: ", CustomGIS_Michael$DEATHS,
  "<br>Injuries: ", CustomGIS_Michael$INJURIES,
  "<br>Income: ", scales::dollar(CustomGIS_Michael$Income, big.mark = ",", digits = 4),
  "<br>Population: ", scales::comma(CustomGIS_Michael$Population, big.mark = ",", digits = 4),
  "</font>"
) %>% lapply(htmltools::HTML)





CustomPopupLabels_Michael <- lapply(1:nrow(CustomGIS_Michael), function(i) {
  if (!is.na(CustomGIS_Michael$Michael[i]) && !is.na(CustomGIS_Michael$within100_Michael[i]) &&
      (CustomGIS_Michael$Michael[i] == 1 | CustomGIS_Michael$within100_Michael[i] == 1)) {
    paste0(
      "<strong>", "Hurricane ", "Michael (2018)", "</strong>",
      "<br><strong>", CustomGIS_Michael$name[i], " (", CustomGIS_Michael$FIPS[i], ")</strong>",
     "<br><font color='Black'>",
      "Average Home Value: ", scales::dollar(CustomGIS_Michael$Average_HomeValue[i], big.mark = ",", digits = 4),
      "<br>Damage to Property: ", scales::dollar(CustomGIS_Michael$DAMAGE_PROPERTY_NUM[i] / 1e6, big.mark = ",", digits = 4),
      " million",
      "<br>Damage to Crops: ", scales::dollar(CustomGIS_Michael$DAMAGE_CROPS_NUM[i] / 1e6, big.mark = ",", digits = 4),
      " million",
      "<br>Deaths: ", CustomGIS_Michael$DEATHS[i],
      "<br>Injuries: ", CustomGIS_Michael$INJURIES[i],
      "<br>Median Income: ", scales::dollar(CustomGIS_Michael$Income[i], big.mark = ",", digits = 4),
      "<br>Population: ", scales::comma(CustomGIS_Michael$Population[i], big.mark = ",", digits = 4),
      "</font>"
    )
  } else {
    NULL
  }
}) %>% lapply(htmltools::HTML)

#pal <- colorBin("RdBu", result_Michael$Michael,bins = c(0,1), reverse=TRUE)

leaflet(CustomGIS_Michael, options = leafletOptions(crsClass = "L.CRS.EPSG3857"), width="100%") %>%
  addPolygons(weight = 0.5, color = "gray", opacity = 0.7,
    fillColor = ~coloring, fillOpacity = 1, smoothFactor = .5,
    label = CustomPopupLabels_Michael,
    labelOptions = labelOptions(direction = "auto")) %>%
    addPolygons(data = countyGIS,fill = FALSE,color="white",weight = 1)

DATASET_4_maps_Gustav <- left_join(countyGIS,FINAL_DATA_Gustav,by="FIPS")

result_Gustav <- DATASET_4_maps_Gustav %>%
  group_by(FIPS) %>%
  summarise(
    name = last(name),
    Income = mean(Income[Year == 2017]),
    Population = mean(Population[Year == 2017]),
    Average_HomeValue = mean(Average_HomeValue[Year == 2017]),
    AREA = last(AREA),
    RISK_SCORE = last(RISK_SCORE),
    DAMAGE_PROPERTY_NUM = last(DAMAGE_PROPERTY_NUM_final),
    DAMAGE_CROPS_NUM = last(DAMAGE_CROPS_NUM_final),
    DEATHS = last(DEATHS_final),
    INJURIES = last(INJURIES_final),
    Gustav = ifelse(any(Gustav == 1), 1, 0),
    within100_Gustav = ifelse(any(within100_Gustav == 1), 1, 0)
  )


CustomGIS_Gustav <- result_Gustav %>%
  mutate(
    coloring = case_when(
      Gustav == 1 ~ "red",
      within100_Gustav == 1 ~ "yellow",
      TRUE ~ "gray"
    )
  )


CustomPopupLabels_Gustav <- paste0(
  "<strong>", CustomGIS_Gustav$name, " (", CustomGIS_Gustav$FIPS, ")</strong>",
  "<br><font color='Black'>",
  "Average Home Value: ", scales::dollar(CustomGIS_Gustav$Average_HomeValue, big.mark = ",", digits = 4),
  "<br>Damage to Property: ", CustomGIS_Gustav$DAMAGE_PROPERTY_NUM,
  "<br>Damage to Crops: ", CustomGIS_Gustav$DAMAGE_CROPS_NUM,
  "<br>Deaths: ", CustomGIS_Gustav$DEATHS,
  "<br>Injuries: ", CustomGIS_Gustav$INJURIES,
  "<br>Income: ", scales::dollar(CustomGIS_Gustav$Income, big.mark = ",", digits = 4),
  "<br>Population: ", scales::comma(CustomGIS_Gustav$Population, big.mark = ",", digits = 4),
  "</font>"
) %>% lapply(htmltools::HTML)





CustomPopupLabels_Gustav <- lapply(1:nrow(CustomGIS_Gustav), function(i) {
  if (!is.na(CustomGIS_Gustav$Gustav[i]) && !is.na(CustomGIS_Gustav$within100_Gustav[i]) &&
      (CustomGIS_Gustav$Gustav[i] == 1 | CustomGIS_Gustav$within100_Gustav[i] == 1)) {
    paste0(
      "<strong>", "Hurricane ", "Gustav (2008)", "</strong>",
      "<br><strong>", CustomGIS_Gustav$name[i], " (", CustomGIS_Gustav$FIPS[i], ")</strong>",
     "<br><font color='Black'>",
      "Average Home Value: ", scales::dollar(CustomGIS_Gustav$Average_HomeValue[i], big.mark = ",", digits = 4),
      "<br>Damage to Property: ", scales::dollar(CustomGIS_Gustav$DAMAGE_PROPERTY_NUM[i] / 1e6, big.mark = ",", digits = 4),
      " million",
      "<br>Damage to Crops: ", scales::dollar(CustomGIS_Gustav$DAMAGE_CROPS_NUM[i] / 1e6, big.mark = ",", digits = 4),
      " million",
      "<br>Deaths: ", CustomGIS_Gustav$DEATHS[i],
      "<br>Injuries: ", CustomGIS_Gustav$INJURIES[i],
      "<br>Median Income: ", scales::dollar(CustomGIS_Gustav$Income[i], big.mark = ",", digits = 4),
      "<br>Population: ", scales::comma(CustomGIS_Gustav$Population[i], big.mark = ",", digits = 4),
      "</font>"
    )
  } else {
    NULL
  }
}) %>% lapply(htmltools::HTML)

#pal <- colorBin("RdBu", result_Gustav$Gustav,bins = c(0,1), reverse=TRUE)

leaflet(CustomGIS_Gustav, options = leafletOptions(crsClass = "L.CRS.EPSG3857"), width="100%") %>%
  addPolygons(weight = 0.5, color = "gray", opacity = 0.7,
    fillColor = ~coloring, fillOpacity = 1, smoothFactor = .5,
    label = CustomPopupLabels_Gustav,
    labelOptions = labelOptions(direction = "auto")) %>%
    addPolygons(data = countyGIS,fill = FALSE,color="white",weight = 1)

DATASET_4_maps_Lili <- left_join(countyGIS,FINAL_DATA_Lili,by="FIPS")

result_Lili <- DATASET_4_maps_Lili %>%
  group_by(FIPS) %>%
  summarise(
    name = last(name),
    Income = mean(Income[Year == 2017]),
    Population = mean(Population[Year == 2017]),
    Average_HomeValue = mean(Average_HomeValue[Year == 2017]),
    AREA = last(AREA),
    RISK_SCORE = last(RISK_SCORE),
    DAMAGE_PROPERTY_NUM = last(DAMAGE_PROPERTY_NUM_final),
    DAMAGE_CROPS_NUM = last(DAMAGE_CROPS_NUM_final),
    DEATHS = last(DEATHS_final),
    INJURIES = last(INJURIES_final),
    Lili = ifelse(any(Lili == 1), 1, 0),
    within100_Lili = ifelse(any(within100_Lili == 1), 1, 0)
  )


CustomGIS_Lili <- result_Lili %>%
  mutate(
    coloring = case_when(
      Lili == 1 ~ "red",
      within100_Lili == 1 ~ "yellow",
      TRUE ~ "gray"
    )
  )


CustomPopupLabels_Lili <- paste0(
  "<strong>", CustomGIS_Lili$name, " (", CustomGIS_Lili$FIPS, ")</strong>",
  "<br><font color='Black'>",
  "Average Home Value: ", scales::dollar(CustomGIS_Lili$Average_HomeValue, big.mark = ",", digits = 4),
  "<br>Damage to Property: ", CustomGIS_Lili$DAMAGE_PROPERTY_NUM,
  "<br>Damage to Crops: ", CustomGIS_Lili$DAMAGE_CROPS_NUM,
  "<br>Deaths: ", CustomGIS_Lili$DEATHS,
  "<br>Injuries: ", CustomGIS_Lili$INJURIES,
  "<br>Income: ", scales::dollar(CustomGIS_Lili$Income, big.mark = ",", digits = 4),
  "<br>Population: ", scales::comma(CustomGIS_Lili$Population, big.mark = ",", digits = 4),
  "</font>"
) %>% lapply(htmltools::HTML)





CustomPopupLabels_Lili <- lapply(1:nrow(CustomGIS_Lili), function(i) {
  if (!is.na(CustomGIS_Lili$Lili[i]) && !is.na(CustomGIS_Lili$within100_Lili[i]) &&
      (CustomGIS_Lili$Lili[i] == 1 | CustomGIS_Lili$within100_Lili[i] == 1)) {
    paste0(
      "<strong>", "Hurricane ", "Lili (2002)", "</strong>",
      "<br><strong>", CustomGIS_Lili$name[i], " (", CustomGIS_Lili$FIPS[i], ")</strong>",
     "<br><font color='Black'>",
      "Average Home Value: ", scales::dollar(CustomGIS_Lili$Average_HomeValue[i], big.mark = ",", digits = 4),
      "<br>Damage to Property: ", scales::dollar(CustomGIS_Lili$DAMAGE_PROPERTY_NUM[i] / 1e6, big.mark = ",", digits = 4),
      " million",
      "<br>Damage to Crops: ", scales::dollar(CustomGIS_Lili$DAMAGE_CROPS_NUM[i] / 1e6, big.mark = ",", digits = 4),
      " million",
      "<br>Deaths: ", CustomGIS_Lili$DEATHS[i],
      "<br>Injuries: ", CustomGIS_Lili$INJURIES[i],
      "<br>Median Income: ", scales::dollar(CustomGIS_Lili$Income[i], big.mark = ",", digits = 4),
      "<br>Population: ", scales::comma(CustomGIS_Lili$Population[i], big.mark = ",", digits = 4),
      "</font>"
    )
  } else {
    NULL
  }
}) %>% lapply(htmltools::HTML)

#pal <- colorBin("RdBu", result_Lili$Lili,bins = c(0,1), reverse=TRUE)

leaflet(CustomGIS_Lili, options = leafletOptions(crsClass = "L.CRS.EPSG3857"), width="100%") %>%
  addPolygons(weight = 0.5, color = "gray", opacity = 0.7,
    fillColor = ~coloring, fillOpacity = 1, smoothFactor = .5,
    label = CustomPopupLabels_Lili,
    labelOptions = labelOptions(direction = "auto")) %>%
    addPolygons(data = countyGIS,fill = FALSE,color="white",weight = 1)



```


## map of Average Home Value for all counties

```{r}
DATASET2_4_maps <- left_join(countyGIS,DATASET2,by="FIPS")

result_dataset_map <- DATASET2_4_maps %>%
  group_by(FIPS) %>%
  summarise(
    name = last(name),
    Income = mean(Income[Year == 2022]),
    Population = mean(Population[Year == 2022]),
    Average_HomeValue = mean(Average_HomeValue[Year == 2022]),
    AREA = last(AREA),
    RISK_SCORE = last(RISK_SCORE),
    HRCN_AFREQ = last(HRCN_AFREQ),
    HRCN_EVNTS = last(HRCN_EVNTS),
    HRCN_RISKS = last(HRCN_RISKS)
    )


# Create simplified popup labels
CustomPopupLabels_dataset4maps <- lapply(1:nrow(result_dataset_map), function(i) {
  paste0(
    "<strong>", result_dataset_map$name[i], " (", result_dataset_map$FIPS[i], ")</strong>",
    "<br>Average Home Value: ", scales::dollar(result_dataset_map$Average_HomeValue[i], big.mark = ",", digits = 4)
  )
})

CustomPopupLabels_dataset4maps <- lapply(1:nrow(result_dataset_map), function(i) {
  paste0(
    "<br><strong>", result_dataset_map$name[i], " (", result_dataset_map$FIPS[i], ")</strong>",
    "<br><font color='Black'>",
    "Average Home Value: ", scales::dollar(result_dataset_map$Average_HomeValue[i], big.mark = ",", digits = 4),
    "<br>Income: ", scales::dollar(result_dataset_map$Income[i], big.mark = ",", digits = 4),
    "<br>Population: ", scales::comma(result_dataset_map$Population[i], big.mark = ",", digits = 4),
    "<br>Risk Score: ", result_dataset_map$RISK_SCORE[i],
    "<br>Hurr Frequency: ", result_dataset_map$HRCN_AFREQ[i],
    "<br>Number of Hurricanes since 1850: ", result_dataset_map$HRCN_EVNTS[i],
    "<br>Hurricaane Risk Factor: ", result_dataset_map$HRCN_RISKS[i],
    "</font>"
  )
}) %>% lapply(htmltools::HTML)




#pal <- colorBin("RdBu", result_Lili$Lili,bins = c(0,1), reverse=TRUE)

# Define a color palette (e.g., from white to dark red)
color_palette <- colorNumeric(palette = "YlOrRd", domain = result_dataset_map$Average_HomeValue)


leaflet(result_dataset_map, options = leafletOptions(crsClass = "L.CRS.EPSG3857"), width="100%") %>%
  addPolygons(weight = 0.5, color = "gray", opacity = 0.7,
              fillColor = ~color_palette(Average_HomeValue), fillOpacity = 1, smoothFactor = .5,
              label = CustomPopupLabels_dataset4maps,
              labelOptions = labelOptions(direction = "auto")) %>%
  addPolygons(data = countyGIS, fill = FALSE, color = "white", weight = 1) %>%
  addLegend(pal = color_palette, values = ~Average_HomeValue, 
            title = "Average Home Value", opacity = 1)
```
